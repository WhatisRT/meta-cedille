import Bootstrap.
import Base.

set PWD "Test/".

import TermRecDiagonal.
import TermHelpers.
import Inference.

-- if the program is failing, return the error
elet isFailing [A : *] (x : Eval A) : Eval (Maybe String) :=
  catchEval ?(Maybe String) (x >>= (λ _ : A. pureEval ?(Maybe String) (nothing ?String)))
                            (λ s : String. pureEval ?(Maybe String) (just ?String s)).

elet expectFail [A : *] (x : Eval A) : Eval Unit :=
  isFailing ?A x >>= maybe ?_ ?_
    (throwEval ?Unit (withColor8 ANSI8Red "Success while failure was expected!"))
    (λ e : String. printLineEval $ stringConcat
      [String|newline, withColor8 ANSI8Green "Failed as expected with error:", newline, e]).

elet init$newStmt'$fail=minus=_newStmt'_ (x : Eval Unit) : Eval Unit := expectFail ?_ x.

updateEval.

fail-let test := pr1 ?Nat ?Nat 0.
fail-let a := a.
