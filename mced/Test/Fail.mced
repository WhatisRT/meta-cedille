import Bootstrap.
import Base.

set PWD "Test/".

-- if the program is failing, return the error
elet isFailing [A : *] (x : Eval A) : Eval (Maybe String) :=
  catchEval ?_ (x >>= (λ _ : A. pureEval ?_ (nothing ?String)))
               (λ s : String. pureEval ?_ (just ?_ s)).

elet expectFail [A : *] (x : Eval A) : Eval Unit :=
  isFailing ?_ x >>= maybe ?_ ?_
    (throwEval ?Unit (withColor8 ANSI8Red "Success while failure was expected!"))
    (λ e : String. printLineEval $ stringConcat
      [String|newline, withColor8 ANSI8Green "Failed as expected with error:", newline, e]).

elet init$newStmt'$fail=minus=_newStmt'_ (x : Eval Unit) : Eval Unit := expectFail ?_ x.

updateEval.

fail-let test := pr1 ?Nat ?Nat 0.
fail-let a := a.

fail-elet Inference/Test/foldl [A, B : *] (f : B -> A -> B) : List A -> B -> B :=
  recursionList ?_ ?_ (λ b : B. b) (λ a : A. λ as : List A. λ rec : B -> B. λ b : B. f (rec b) a).

fail-elet Inference/Test/map [X, Y : *] (f : X -> Y) : List X -> List Y :=
  recursionList ?_ ?_ [Y|] (λ x : X. λ _ : List X. λ rec : List Y. f x ∷ rec).
