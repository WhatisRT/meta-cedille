--------------------------------------------------------------------------------
-- FFI
--
-- We define a monad that can be used to run arbitrary scheme code
--------------------------------------------------------------------------------

-- FIXME: `defineSchemePrim` only works if it's not under any lambdas

-- TODO: we need to block reduction as a workaround, since getDef
-- always returns a head-normal form
let SchemeFFI (A : *) : * := ∀ X : *. (String -> X) -> X.
-- the compiler will compile applications of this differently
let defineSchemeInternal := tt.
let defineSchemePrim' [A : *] (s : String) : SchemeFFI A :=
  Λ X : *. λ x : String -> X. defineSchemeInternal ?X (x s).
let defineSchemePrim [A : *] (s : String) : SchemeFFI A :=
  defineSchemePrim' ?A φ"(lambda (_) ${s})".

-- NOTE: we can't actually compile these here, since the
-- `defineSchemePrim` functions don't work under lambdas
let pureScheme [A : *] (a : A) : SchemeFFI A :=
  defineSchemePrim' ?A "(lambda (_) (lambda (a) (lambda (_) a)))".
let bindScheme [A, B : *] (a : SchemeFFI A) (f : A -> SchemeFFI B) : SchemeFFI B :=
  defineSchemePrim ?B "(lambda (_) (lambda (_) (lambda (a) (lambda (f) (lambda (ev) ((f (a ev)) ev))))))".
