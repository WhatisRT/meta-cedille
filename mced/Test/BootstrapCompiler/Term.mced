--------------------------------------------------------------------------------
-- A more convenient term datatype and corresponding syntax
--
-- Application: use f x1 ... xn where erased arguments are prefixed with a '?'
-- Others: use *, □, "...", (...), {Π ∀ λ Λ} x1, ..., xn : T. t,
--------------------------------------------------------------------------------

module Bootstrap:Term.

Given Var init$var$_string_ init$var$_index_ init$index Sort Char String iTerm.
Given init$term$_var_ init$term$_sort_ init$string$nil SortAst SortSq quote$sq.
Given quote$angle quote$square quote$lambda quote$Lambda quote$Pi quote$forall quote$kappa.

importModule Bootstrap:Bool.
importModule Bootstrap:List.
importModule Bootstrap:Product.

elet Binder : * := ∀ X : *. X -> X -> X -> X -> X.
elet lambdaBinder : Binder := Λ X : *. λ lambda, Lambda, pi, forall : X. lambda.
elet LambdaBinder : Binder := Λ X : *. λ lambda, Lambda, pi, forall : X. Lambda.
elet piBinder     : Binder := Λ X : *. λ lambda, Lambda, pi, forall : X. pi.
elet forallBinder : Binder := Λ X : *. λ lambda, Lambda, pi, forall : X. forall.

elet Term : * := ∀ X : *.
  (Var -> X) -> (Sort -> X) -> (Binder -> String -> X -> X -> X) ->
  (X -> List (Bool × X) -> X) -> (Char -> X) -> X -> (X -> X) -> X.

elet varTerm (var : Var) : Term := Λ X : *.
  λ v : Var -> X.
  λ s : Sort -> X.
  λ b : Binder -> String -> X -> X -> X.
  λ a : X -> List (Bool × X) -> X.
  λ k : Char -> X.
  λ x : X.
  λ u : X -> X. v var.

elet sortTerm (sort : Sort) : Term := Λ X : *.
  λ v : Var -> X.
  λ s : Sort -> X.
  λ b : Binder -> String -> X -> X -> X.
  λ a : X -> List (Bool × X) -> X.
  λ k : Char -> X.
  λ x : X.
  λ u : X -> X. s sort.

elet binderTerm (binder : Binder) (name : String) (T, t : Term) : Term := Λ X : *.
  λ v : Var -> X.
  λ s : Sort -> X.
  λ b : Binder -> String -> X -> X -> X.
  λ a : X -> List (Bool × X) -> X.
  λ k : Char -> X.
  λ x : X.
  λ u : X -> X. b binder name (T ?X v s b a k x u) (t ?X v s b a k x u).

elet appLTerm (t : Term) (l : List (Bool × Term)) : Term := Λ X : *.
  λ v : Var -> X.
  λ s : Sort -> X.
  λ b : Binder -> String -> X -> X -> X.
  λ a : X -> List (Bool × X) -> X.
  λ k : Char -> X.
  λ x : X.
  λ u : X -> X. a (t ?X v s b a k x u)
                  (map ?_ ?_ (recursionProduct ?Bool ?Term ?(Bool × X)
                    (λ b' : Bool. λ t : Term. b' ; t ?X v s b a k x u)) l).

elet charTerm (c : Char) : Term := Λ X : *.
  λ v : Var -> X.
  λ s : Sort -> X.
  λ b : Binder -> String -> X -> X -> X.
  λ a : X -> List (Bool × X) -> X.
  λ k : Char -> X.
  λ x : X.
  λ u : X -> X. k c.

elet unknownTerm : Term := Λ X : *.
  λ v : Var -> X.
  λ s : Sort -> X.
  λ b : Binder -> String -> X -> X -> X.
  λ a : X -> List (Bool × X) -> X.
  λ k : Char -> X.
  λ x : X.
  λ u : X -> X. x.

elet unquoteTerm (t : Term) : Term := Λ X : *.
  λ v : Var -> X.
  λ s : Sort -> X.
  λ b : Binder -> String -> X -> X -> X.
  λ a : X -> List (Bool × X) -> X.
  λ k : Char -> X.
  λ x : X.
  λ u : X -> X. u $ t ?X v s b a k x u.

elet sVarTerm (s : String) : Term := varTerm (init$var$_string_ s).
elet iVarTerm (i : init$index) : Term := varTerm (init$var$_index_ i).
elet lambdaTerm := binderTerm lambdaBinder.
elet LambdaTerm := binderTerm LambdaBinder.
elet piTerm := binderTerm piBinder.
elet forallTerm := binderTerm forallBinder.

elet App' := Bool × iTerm.
elet appErased' := pr1 ?Bool ?iTerm.
elet appTerm' := pr2 ?Bool ?iTerm.

elet appToQuotedApp (t : iTerm) (a : App') :=
  (ifthenelse ?_ (appErased' a) quote$angle quote$square) t (appTerm' a).

elet foldWithApp : List App' -> iTerm -> iTerm := foldl ?_ ?_ appToQuotedApp.

elet TermToInitTerm (t : Term) : iTerm :=
  t ?iTerm
    (λ v : Var. init$term$_var_ v)
    (λ s : Sort. init$term$_sort_ s)
    (λ b : Binder. λ n : String. λ T, t : iTerm.
      b ?(String -> iTerm -> iTerm -> iTerm)
        quote$lambda quote$Lambda quote$Pi quote$forall n T t)
    (λ t : iTerm. λ l : List App'. foldWithApp (reverse ?_ l) t)
    (λ c : Char. quote$kappa c)
    quote$sq
    (λ u : iTerm. quote$sq).

elet App := Bool × Term.
elet mkApp := prodPair ?Bool ?Term.
elet mkAppU := prodPair ?_ ?Term false.
elet mkAppE := prodPair ?_ ?Term true.
elet appErased := pr1 ?Bool ?Term.
elet appTerm := pr2 ?Bool ?Term.

elet appSingle (t, t' : Term) : Term := appLTerm t $ pureList ?_ $ mkAppU t'.
elet appSingleE (t, t' : Term) : Term := appLTerm t $ pureList ?_ $ mkAppE t'.

elet toAppU := map ?_ ?_ mkAppU.

--------------------------------------------------------------------------------
-- Parameters and telescopes
--------------------------------------------------------------------------------

-- A parameter without erasure information
elet PreParam := String × Term.
elet mkPreParam := prodPair ?String ?Term.

elet preParamName (p : PreParam) : String := pr1 ?_ ?Term p.
elet preParamType (p : PreParam) : Term   := pr2 ?_ ?Term p.

-- If the first entry in the product is `true` the argument is erased
elet Param := Bool × PreParam.
elet mkParam := prodPair ?Bool ?PreParam.

elet paramErased : Param -> Bool := pr1 ?Bool ?PreParam.
elet paramName (p : Param) : String := pr1 ?_ ?Term $ pr2 ?_ ?PreParam p.
elet paramType (p : Param) : Term   := pr2 ?_ ?Term $ pr2 ?_ ?PreParam p.

-- Constructs a `List PreParam` from some names and a type
elet namesToPreParams (ns : List String) (t : Term) :=
  map ?_ ?_ (λ n : String. mkPreParam n t) ns.

elet Telescope := List Param.
elet telApp  (p : List PreParam) := app ?_ $ map ?_ ?_ (mkParam false) p.
elet telAppE (p : List PreParam) := app ?_ $ map ?_ ?_ (mkParam true)  p.
elet telNil := nil ?Param.

elet preParamToBinder (b : Binder) (t : Term) (p : PreParam) : Term :=
  binderTerm b (preParamName p) (preParamType p) t.

elet applyMultiBinder (b : Binder) := foldl ?_ ?_ (preParamToBinder b).

elet telescopeToApp (tel : Telescope) :=
  map ?_ ?_ (λ p : Param. mkApp (paramErased p) (sVarTerm $ paramName p)) tel.

--------------------------------------------------------------------------------
-- Parsing rules for telescopes
--------------------------------------------------------------------------------

elet init$nameparams'$ := nil ?String.
elet init$nameparams'$=comma=^space'^_string__nameparams'_ := cons ?String.

elet init$nameparams$_string__nameparams'_ := cons ?String.

elet init$params$_nameparams_^space^=colon=^space^_multiTerm_ :=
  λ ns : List String. λ t : Term. namesToPreParams ns t.

elet init$telescope'$ := telNil.
elet init$telescope'$^space^_telescope_ := λ t : Telescope. t.

elet init$telescope$=lparen=_params_=rparen=_telescope'_ := λ p : List PreParam. telApp p.
elet init$telescope$=lsquare=_params_=rsquare=_telescope'_ := λ p : List PreParam. telAppE p.
elet init$telescope$ := telNil.

--------------------------------------------------------------------------------
-- Multi-terms (Terms with infix notations)
--------------------------------------------------------------------------------

elet InfixData := String × (Term -> Term -> Term). -- add assoc and binding later
elet mkInfixData : String -> (Term -> Term -> Term) -> InfixData :=
  prodPair ?String ?(Term -> Term -> Term).

elet appInfixData : InfixData -> (Term -> Term -> Term) := pr2 ?String ?(Term -> Term -> Term).

elet appToTerm (i : Term × InfixData) (t : Term) : Term :=
  appInfixData (pr2 ?_ ?InfixData i) t (pr1 ?_ ?InfixData i).

-- The single term is the leftmost, and every cons adds a term at the right
elet MultiTerm : * := Term × List (Term × InfixData).

elet singleMultiTerm (t : Term) : MultiTerm :=
  t ; nil ?(Term × InfixData).

elet consMultiTerm (t : Term) (i : InfixData) : MultiTerm -> MultiTerm :=
  productMap2 ?Term ?_ ?_ $ cons ?_ (t ; i).

elet multiTermSingle : MultiTerm -> Term := pr1 ?Term ?(List (Term × InfixData)).

elet multiTermRest : MultiTerm -> List (Term × InfixData) :=
  pr2 ?Term ?(List (Term × InfixData)).

-- elet multiTermToTermLeft := λ m : MultiTerm
--   [<m Term> λ t : Term λ l : List [[Product Term] InfixData]
--     [[[<<foldl [[Product Term] InfixData]> Term> λ t' : Term λ p : [[Product Term] InfixData]
--       ]
--       t] l]]
--   [[<m Term> λ t : Term t] λ t : Term λ i : InfixData λ t' : Term [[i t'] t]]
--     : Π _ : MultiTerm Term.

elet multiTermToTermRight (m : MultiTerm) :=
  recursionList ?_ ?_
    (multiTermSingle m)
    (λ h : Term × InfixData. λ t : List (Term × InfixData). λ _ : Term. appToTerm
      (foldr ?_ ?_ (λ acc : Term × InfixData. λ x : Term × InfixData.
        appToTerm acc (pr1 ?_ ?InfixData x) ; pr2 ?_ ?InfixData x) t h)
      (multiTermSingle m))
    (multiTermRest m).

-- Currently, all infix symbols associate to the right
elet multiTermToTerm := multiTermToTermRight.

--------------------------------------------------------------------------------
-- Syntax for new terms
--------------------------------------------------------------------------------

-- Syntax for application

elet init$app$_singleTerm_ := mkAppU.
elet init$app$=question=_singleTerm_ := mkAppE.

elet init$applist$ : List App := nil ?App.
elet init$applist$_app__maybeApplist_ (a : App) (as : List App) : List App := a ∷ as.

elet init$maybeApplist$ : List App := nil ?App.
elet init$maybeApplist$^space^_applist_ (l : List App) : List App := l.

-- A term applied to some arguments
elet init$appTerm$_singleTerm__maybeApplist_ := appLTerm.

-- Syntax for terms in general
-- multiTerm is a potential application of multiple terms and infix notations
-- singleTerm is for anything else

-- We need one infix definition to please the parser generation
elet init$infix$=minus==rangle= := mkInfixData init$string$nil (piTerm init$string$nil).

elet init$multiTerm'$ (m : MultiTerm) : MultiTerm := m.
elet init$multiTerm'$_infix_^space^_appTerm_^space'^_multiTerm'_ :=
  λ inf : InfixData. λ t : Term. λ trans : MultiTerm -> MultiTerm. λ m : MultiTerm.
    trans $ consMultiTerm t inf m.

elet init$multiTerm$_appTerm_^space'^_multiTerm'_ :=
  λ t : Term. λ trans : MultiTerm -> MultiTerm. multiTermToTerm $ trans $ singleMultiTerm t.

elet init$singleTerm$=ast= := sortTerm SortAst.
elet init$singleTerm$=sq= := sortTerm SortSq.
elet init$singleTerm$=underscore= := unknownTerm.

elet init$singleTerm$_string_ := λ n : String. varTerm $ init$var$_string_ n.
elet init$singleTerm$=lparen=_multiTerm_=rparen= := λ t : Term. t.
elet init$singleTerm$=kappa=_char_ : Char -> Term := charTerm.

elet init$binder$=lambda= := lambdaBinder.
elet init$binder$=Lambda= := LambdaBinder.
elet init$binder$=Pi=     := piBinder.
elet init$binder$=forall= := forallBinder.

elet init$singleTerm$_binder_^space^_params_=dot=^space^_multiTerm_ :=
  λ b : Binder. λ p : List PreParam. λ t : Term. applyMultiBinder b p t.

endModule.
