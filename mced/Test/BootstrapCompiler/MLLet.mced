--------------------------------------------------------------------------------
-- ML-style let syntax
--
-- Use `b-let f (x1, ..., xn : T1) ... (... : Tn) : T := t.` to define a term
--------------------------------------------------------------------------------

module MLLet.

Given String M primLet primAnnLet.

importModule Bool.
importModule List.
importModule Maybe.
importModule Product.
importModule Sum.
importModule Term.
importModule Unit.

-- Functions to turn a Telescope into an actual telescope that can be applied to
-- a term.

elet paramToLambda (t : Term) (p : Param) : Term :=
  (ifthenelse ?_ (paramErased p) LambdaTerm lambdaTerm) (paramName p) (paramType p) t.

elet foldWithLambdas : Telescope -> Term -> Term := foldl ?_ ?_ paramToLambda.

elet paramToPi (t : Term) (p : Param) : Term :=
  (ifthenelse ?_ (paramErased p) forallTerm piTerm) (paramName p) (paramType p) t.

elet foldWithPi : Telescope -> Term -> Term := foldl ?_ ?_ paramToPi.

-- LetInfo contains all the data associated to a `let`

elet LetInfo := TripleProduct String Term (Maybe Term).
elet mkLetInfo : String -> Term -> Maybe Term -> LetInfo :=
  mkTripleProduct ?String ?Term ?(Maybe Term).
elet letInfoName   (i : LetInfo) : String     := pr31 ?String ?Term ?(Maybe Term) i.
elet letInfoTerm   (i : LetInfo) : Term       := pr32 ?String ?Term ?(Maybe Term) i.
elet letInfoType   (i : LetInfo) : Maybe Term := pr33 ?String ?Term ?(Maybe Term) i.
elet letInfoHasAnn (i : LetInfo) : Bool       :=
  maybe ?_ ?_ false (λ _ : Term. true) (letInfoType i).

elet appendTelToLetInfo (tel : Telescope) (i : LetInfo) : LetInfo :=
  mkLetInfo (letInfoName i)
            (foldWithLambdas tel $ letInfoTerm i)
            (mapMaybe ?_ ?_ (foldWithPi tel) (letInfoType i)).

-- define the definition specified in `LetInfo`

elet convertLetInfo (i : LetInfo) : M Unit :=
  maybe ?_ ?(M Unit)
    (primLet (letInfoName i) (TermToInitTerm $ letInfoTerm i))
    (λ type : Term. primAnnLet (letInfoName i) (TermToInitTerm $ letInfoTerm i) (TermToInitTerm type))
    (letInfoType i).

-- Syntax for `let`

elet init$betterLetType$ : Sum Term Unit := inr ?Term ?_ tt.
elet init$betterLetType$^space^_multiTerm_=colon= (t : Term) : Sum Term Unit :=
  inl ?_ ?Unit t.

elet init$betterLet$_string_^space^_telescope_=colon=_betterLetType_=equal=^space'^_multiTerm_=dot=  (n : String) (tel : Telescope) (maybeType : Maybe Term) (term : Term) : LetInfo :=
  appendTelToLetInfo tel (mkLetInfo n term maybeType).

elet init$stmt'$b=minus=let^space^_betterLet_ : LetInfo -> M Unit := convertLetInfo.

endModule.
