--------------------------------------------------------------------------------
-- ML-style let syntax
--
-- Use `b-let f (x1, ..., xn : T1) ... (... : Tn) : T := t.` to define a term
--------------------------------------------------------------------------------

-- Functions to turn a Telescope into an actual telescope that can be applied to
-- a term.

elet bootstrap/paramToLambda (t : Term) (p : Param) : Term :=
  (ifthenelse ?_ (paramErased p) LambdaTerm lambdaTerm) (paramName p) (paramType p) t.

elet bootstrap/foldWithLambdas : Telescope -> Term -> Term := foldl ?_ ?_ paramToLambda.

elet bootstrap/paramToPi (t : Term) (p : Param) : Term :=
  (ifthenelse ?_ (paramErased p) forallTerm piTerm) (paramName p) (paramType p) t.

elet bootstrap/foldWithPi : Telescope -> Term -> Term := foldl ?_ ?_ paramToPi.

-- LetInfo contains all the data associated to a `let`

elet bootstrap/LetInfo := TripleProduct String Term (Maybe Term).
elet bootstrap/mkLetInfo : String -> Term -> Maybe Term -> LetInfo :=
  mkTripleProduct ?String ?Term ?(Maybe Term).
elet bootstrap/letInfoName   (i : LetInfo) : String     := pr31 ?String ?Term ?(Maybe Term) i.
elet bootstrap/letInfoTerm   (i : LetInfo) : Term       := pr32 ?String ?Term ?(Maybe Term) i.
elet bootstrap/letInfoType   (i : LetInfo) : Maybe Term := pr33 ?String ?Term ?(Maybe Term) i.
elet bootstrap/letInfoHasAnn (i : LetInfo) : Bool       :=
  maybe ?_ ?_ false (λ _ : Term. true) (letInfoType i).

elet bootstrap/appendTelToLetInfo (tel : Telescope) (i : LetInfo) : LetInfo :=
  mkLetInfo (letInfoName i)
            (foldWithLambdas tel $ letInfoTerm i)
            (mapMaybe ?_ ?_ (foldWithPi tel) (letInfoType i)).

-- define the definition specified in `LetInfo`

elet bootstrap/convertLetInfo (i : LetInfo) : M Unit :=
  maybe ?_ ?(M Unit)
    (primLet (letInfoName i) (TermToInitTerm $ letInfoTerm i))
    (λ type : Term. primAnnLet (letInfoName i) (TermToInitTerm $ letInfoTerm i) (TermToInitTerm type))
    (letInfoType i).

-- Syntax for `let`

elet bootstrap/init$betterLetType$ : Sum Term Unit := inr ?Term ?_ tt.
elet bootstrap/init$betterLetType$^space^_multiTerm_=colon= (t : Term) : Sum Term Unit :=
  inl ?_ ?Unit t.

elet bootstrap/init$betterLet$_string_^space^_telescope_=colon=_betterLetType_=equal=^space'^_multiTerm_=dot=  (n : String) (tel : Telescope) (maybeType : Maybe Term) (term : Term) : LetInfo :=
  appendTelToLetInfo tel (mkLetInfo n term maybeType).

elet bootstrap/init$stmt'$b=minus=let^space^_betterLet_ : LetInfo -> M Unit := convertLetInfo.

runMeta compileNames "MLLet.mced" [String|"paramToLambda", "foldWithLambdas", "paramToPi", "foldWithPi", "LetInfo", "mkLetInfo", "letInfoName", "letInfoTerm", "letInfoType", "letInfoHasAnn", "appendTelToLetInfo", "convertLetInfo", "init$betterLetType$", "init$betterLetType$^space^_multiTerm_=colon=", "init$betterLet$_string_^space^_telescope_=colon=_betterLetType_=equal=^space'^_multiTerm_=dot=", "init$stmt'$b=minus=let^space^_betterLet_"].
