module Bool.

let Bool : * := ∀ X : *. X -> X -> X.

let true  : Bool := Λ X : *. λ t, f : X. t.
let false : Bool := Λ X : *. λ t, f : X. f.

elet recursionBool [X : *] (t, f : X) (b : Bool) : X := b ?X t f.

elet ifthenelse [X : *] (b : Bool) (ift, iff : X) : X := recursionBool ?_ ift iff b.

elet and (b, b' : Bool) : Bool := ifthenelse ?_ b b' false.
elet or  (b, b' : Bool) : Bool := ifthenelse ?_ b b b'.
elet not (b : Bool)     : Bool := ifthenelse ?_ b false true.

elet boolEq (b, b' : Bool) : Bool := ifthenelse ?_ b b' $ not b'.

endModule.

runMeta compileNames "Bool".
