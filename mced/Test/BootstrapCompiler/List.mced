module Bootstrap:List.

importModule Bootstrap:Bool.
importModule Bootstrap:Nat.
importModule Bootstrap:Product.

elet List (A : *) : * := ∀ X : *. X -> (A -> X -> X) -> X.

elet nil [A : *] : List A := Λ X : *. λ n : X. λ c : A -> X -> X. n.
elet cons [A : *] (a : A) (as : List A) : List A :=
  Λ X : *. λ n : X. λ c : A -> X -> X. c a (as ?X n c).

elet recursionList [A, X : *] (rn : X) (rc : A -> List A -> X -> X) (l : List A) : X :=
  pr2 ?_ ?X $ l ?(List A × X)
    (nil ?A ; rn)
    (λ a : A. λ p : List A × X.
      (a ∷ pr1 ?_ ?X p) ; rc a (pr1 ?_ ?X p) (pr2 ?_ ?X p)).

elet length [X : *] : List X -> Nat :=
  recursionList ?_ ?_ zero (λ x : X. λ xs : List X. λ n : Nat. suc n).

elet isNil [X : *] : List X -> Bool :=
  recursionList ?_ ?_ true (λ _ : X. λ _ : List X. λ _ : Bool. false).

elet listEq [X : *] (eqX : X -> X -> Bool) : List X -> List X -> Bool :=
  recursionList ?_ ?_ (isNil ?X) $
    λ x : X. λ xs : List X. λ rec : List X -> Bool.
      recursionList ?_ ?_ false (λ y : X. λ ys : List X. λ _ : Bool. and (eqX x y) (rec ys)).

elet pureList [X : *] (x : X) : List X := [X|x].

elet app [X : *] (l1, l2 : List X) : List X :=
  recursionList ?_ ?_ l2 (λ x : X. λ _ : List X. λ rec : List X. x ∷ rec) l1.

elet snoc [X : *] (x : X) (xs : List X) : List X := app ?_ xs (pureList ?_ x).

elet reverse [X : *] : List X -> List X :=
  recursionList ?_ ?_ [X|] (λ x : X. λ _ : List X. λ rec : List X. snoc ?_ x rec).

elet filter [X : *] (f : X -> Bool) : List X -> List X :=
  recursionList ?_ ?_ [X|]
    (λ x : X. λ _ : List X. λ rec : List X. ifthenelse ?_ (f x) (x ∷ rec) rec).

elet foldl [A, B : *] (f : B -> A -> B) : List A -> B -> B :=
  recursionList ?_ ?_ (λ b : B. b) (λ a : A. λ as : List A. λ rec : B -> B. λ b : B. f (rec b) a).

elet foldr [A, B : *] (f : B -> A -> B) (l : List A) : B -> B := foldl ?_ ?_ f $ reverse ?_ l.

elet scanl [A, B : *] (f : B -> A -> B) (b : B) : List A -> List B :=
  recursionList ?_ ?_
    (pureList ?_ b)
    (λ a : A. λ as : List A. λ rec : List B. foldl ?_ ?_ f (a ∷ as) b ∷ rec).

elet map [X, Y : *] (f : X -> Y) : List X -> List Y :=
  recursionList ?_ ?_ [Y|] (λ x : X. λ _ : List X. λ rec : List Y. f x ∷ rec).

elet intersperse [X : *] (x : X) (l : List X) : List X :=
  recursionList ?_ ?_ [X|]
    (λ x' : X. λ l' : List X. λ rec : List X.
      ifthenelse ?_ (isNil ?_ l') (pureList ?_ x') (x' ∷ x ∷ rec)) l.

endModule.
