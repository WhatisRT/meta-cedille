runMeta stmtToNewStmt (convertLetInfo (mkLetInfo
  "convertAndCheckLetInfo"
  (sVarTerm "modPrefix|COC:Conversion0|convertAndCheckLetInfo")
  (nothing ?Term))).

runMeta stmtToNewStmt (convertLetInfo (mkLetInfo
  "convertAndAddToEnv"
  (sVarTerm "modPrefix|COC:Conversion0|convertAndAddToEnv")
  (nothing ?Term))).

runMeta stmtToNewStmt (convertLetInfo (mkLetInfo
  "isDefined"
  (sVarTerm "modPrefix|COC:Theory0|isDefined")
  (nothing ?Term))).

runMeta stmtToNewStmt (convertLetInfo (mkLetInfo
  "ErrorFold"
  (sVarTerm "modPrefix|COC:Theory0|ErrorFold")
  (nothing ?Term))).

runMeta stmtToNewStmt (convertLetInfo (mkLetInfo
  "Env"
  (sVarTerm "modPrefix|COC:Theory0|Env")
  (nothing ?Term))).

runMeta stmtToNewStmt (convertLetInfo (mkLetInfo "COCEnv|0" (sVarTerm "modPrefix|COC:Theory0|emptyEnv") (nothing ?Term))).

let envPrefix := "COCEnv|".
let natToEnv (n : Nat) := stringApp envPrefix (showNatDecimal n).

elet getEnvVersion : Eval Nat :=
  getEval >>= (λ s : EvalState. pureEval ?Nat (getOtherState s)).

elet getEnv : Eval Env :=
  getEnvVersion >>= (λ n : Nat. checkTerm Env $ sVarTerm $ natToEnv n).

let updateLetInfoType (i : LetInfo) (T : Term) :=
  mkLetInfo (letInfoName i) (letInfoTerm i) (just ?Term T).

let init$COCStmt$let^space^_betterLet_ (i : LetInfo) : init$newStmt :=
  bindEval ?Env ?Unit getEnv
    (λ e : Env.
      ifthenelse ?init$newStmt (isDefined e (letInfoName i))
        (throwEval ?Unit "Name already defined!")
        (ErrorFold Term init$newStmt
          (λ T : Term.
            bindEval ?Nat ?Unit getEnvVersion
              (λ n : Nat.
                seqNewStmt
                  (letInfoToNewStmt (mkLetInfo
                    (natToEnv (suc n))
                    θ{convertAndAddToEnv γ{sVarTerm (natToEnv n)} γ{quoteLetInfo (updateLetInfoType i T)}}
                    (just ?Term θ{Env})))
                  (seqNewStmt
                    (modifyOtherState suc)
                    (debugPrint LogTypeInfo 100 (stringConcat [String |"Defined: ", letInfoName i, " : ", showTerm T])))))
          (λ s : String. throwEval ?Unit s)
          (convertAndCheckLetInfo e i))).

let init$newStmt'$c=minus=_COCStmt_ (s : init$newStmt) := s.
updateEval.
