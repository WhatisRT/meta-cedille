--------------------------------------------------------------------------------
-- Compiles modules into scheme
--------------------------------------------------------------------------------

-- replace ' with 1
let sanitizeNameScheme (s : String) : String :=
  stringFromList $ map ?Char ?Char
    (λ c : Char. ifthenelse ?Char (charEq c κ') κ1 c)
    (stringToList s).

let tryCompileSchemePrim (t : Term) (def : Eval String) : Eval String :=
  maybe ?Term ?(Eval String) def (matchApp ?(Eval String) def λ t' : Term. λ a : List App.
    matchVar ?(Eval String) def
      (λ v : Var. ifthenelse ?(Eval String)
        (and (varEq v (init$var$_string_ "defineSchemeInternal")) (natEq (length ?App a) 2))
          (maybe ?App ?(Eval String) def (λ a' : App.
            matchApp ?(Eval String) def
              (λ t : Term. λ a : List App.
                maybe ?App ?(Eval String) def (λ a' : App. checkTerm String (appTerm a')) (head ?App a))
              (appTerm a'))
            (head ?App (drop ?App 1 a)))
          def) t')
    (stripLambdas 2 t).

let showTermWithContextScheme (t : Term) : List String -> String := recursionTerm
  ?(List String -> String)
  (λ v : Var. λ con : List String. sanitizeNameScheme $ showVar con v)
  (λ s : Sort. λ _ : List String. "'SORT")
  (λ b : Binder. λ n : String. λ _, _ : Term. λ T, t : List String -> String. λ con : List String.
    b ?String (stringConcat [String|"(lambda (", sanitizeNameScheme n, ") ", t (cons ?String n con), ")"])
              (stringConcat [String|"(lambda (", sanitizeNameScheme n, ") ", t (cons ?String n con), ")"])
              "'PI" "'FORALL")
  (λ _ : Term. λ la : List App. λ t : List String -> String.
   λ l : List (Product Bool (List String -> String)). λ con : List String. stringConcat
     [String|"(", t con, stringConcat (map ?(Bool × (List String -> String)) ?String
              (recursionProduct ?Bool ?(List String -> String) ?String
                      (λ _ : Bool. λ t' : List String -> String. stringApp " " (t' con))) l), ")"])
  (λ c : Char. λ _ : List String. stringConcat [String|"'", stringCons c "'"])
  (λ _ : List String. "_")
  (λ _ : Term. λ t : List String -> String. λ con : List String. "'UNQUOTE")
  t.

let showTermScheme (t : Term) : Eval String :=
  tryCompileSchemePrim (reduceMultiApp t) $ pureEval ?String (showTermWithContextScheme t [String|]).

let printDefinitionScheme (def : LetInfo) : Eval String :=
  mapEval ?String ?String (λ t : String.
    stringConcat [String|"(define ", sanitizeNameScheme (letInfoName def), " ", t , ")"])
    (showTermScheme (letInfoTerm def)).

let schemeCompileDir := "Compiled/Scheme/".

let genNameScheme (name : ModuleName) : String :=
  stringConcat [String|schemeCompileDir, moduleNameToPath modName, ".ss"].

let compileModulesScheme : List ModuleName -> Eval Unit :=
  compileModules printDefinitionScheme genNameScheme.

runMeta ensureDirExists (stringConcat [String|schemeCompileDir, "/Bootstrap/"]).
runMeta ensureDirExists (stringConcat [String|schemeCompileDir, "/SchemeCompiler/"]).

runMeta compileModulesScheme
  [ModuleName| [String|"Bootstrap", "Unit"], [String|"Bootstrap", "DSum"]
             , [String|"Bootstrap", "Product"], [String|"Bootstrap", "Nat"]
             , [String|"Bootstrap", "Bool"], [String|"Bootstrap", "List"]
             , [String|"SchemeCompiler", "Test"]].
