--------------------------------------------------------------------------------
-- Parsing datatype declarations
--------------------------------------------------------------------------------

let Entries := List PreParam.

let DatatypeDecl := String × Telescope × Entries.

let toRecordDecl (d : DatatypeDecl) : DatatypeDecl :=
  recursionTripleProduct ?String ?Telescope ?Entries ?DatatypeDecl
    (λ name : String. λ t : Telescope. λ es : Entries.
      mkTripleProduct ?String ?Telescope ?Entries name t
        [PreParam| prodPair ?String ?Term
          (stringApp "mk" name)
          (applyMultiBinder piBinder es $ appLTerm (sVarTerm name) $ telescopeToApp t)])
    d.

let DatatypeDeclToStmt (d : DatatypeDecl) (m : String) : init$newStmt :=
  catchError ?DatatypeData ?init$newStmt
    (recursionTripleProduct ?String ?Telescope ?Entries ?(Error DatatypeData) mkDatatypeData d)
    (λ e : String. echoStmt $ stringApp m e)
    datatypeToLet.

let init$entry$_string_^space^=colon=^space^_multiTerm_
  (name : String) (type : Term) : PreParam := mkPreParam name type.

let init$entries$ : Entries := nil ?PreParam.
let init$entries$=pipe=^space^_entry__entries_ (e : PreParam) (es : Entries) := cons ?PreParam e es.

let init$data$_string_^space^_telescope_where^space^_entries_
  (name : String) (t : Telescope) (es : Entries)
  : DatatypeDecl :=
    mkTripleProduct ?String ?Telescope ?Entries name t es.

let init$newStmt'$data^space^_data_=dot= (d : DatatypeDecl) : init$newStmt :=
  DatatypeDeclToStmt d "Error: not a valid datatype! ".

let init$newStmt'$record^space^_data_=dot= (d : DatatypeDecl) : init$newStmt :=
  DatatypeDeclToStmt (toRecordDecl d) "Error: not a valid record! ".

updateEval.