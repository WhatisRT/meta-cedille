--------------------------------------------------------------------------------
-- Functions for quoting strings and syntax to use with the new terms
--------------------------------------------------------------------------------

module Bootstrap:StringNotation.

importModule Bootstrap:Builtins.
importModule Bootstrap:Bool.
importModule Bootstrap:StringHelpers.
importModule Bootstrap:Term.
importModule Bootstrap:List.

let quoteChar (c : Char) : Term := charTerm c.

let quoteString (s : String) : Term :=
  s ?Term
    (λ c : Char. λ rec : Term. θ{stringCons γ{quoteChar c} γ{rec}})
    θ{stringNil}.

-- Regular string syntax

let init$stringchar$!=doublequote=&=newline=! (c : Char) : Char := c.

let init$stringchar$=newline=_stringchar_ (c : Char) : Char := c.
let init$stringchar$=backslash=n : Char := κ
.

let init$newstring$ : String := stringNil.
let init$newstring$_stringchar__newstring_ : Char -> String -> String := stringCons.

let init$singleTerm$=doublequote=_newstring_=doublequote= : String -> Term := quoteString.

-- String interpolation

let init$intstring$ : Term := θ{stringNil}.
let init$intstring$=dollar==lbrace=^space^_multiTerm_=rbrace=_intstring_ (t, t' : Term) : Term :=
  θ{stringApp γ{t} γ{t'}}.
let init$intstring$_stringchar__intstring_ (c : Char) (t : Term) : Term :=
  θ{stringCons γ{quoteChar c} γ{t}}.

let init$singleTerm$=phi==doublequote=_intstring_=doublequote= : Term -> Term := λ t : Term. t.

-- Usages

elet showBool (b : Bool) := ifthenelse ?_ b "true" "false".

endModule.
