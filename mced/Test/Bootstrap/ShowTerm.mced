--------------------------------------------------------------------------------
-- Defines showTerm
--------------------------------------------------------------------------------

module Bootstrap:ShowTerm.

Given init$index'.

importModule Bootstrap:Builtins.
importModule Bootstrap:Bool.
importModule Bootstrap:List.
importModule Bootstrap:ListExt.
importModule Bootstrap:NatHelpers.
importModule Bootstrap:Product.
importModule Bootstrap:StringHelpers.
importModule Bootstrap:Term.
importModule Bootstrap:TermRec.

let showIndex' (i : init$index') : String :=
  i ?String
    ""
    (stringApp "0") (stringApp "1") (stringApp "2") (stringApp "3") (stringApp "4")
    (stringApp "5") (stringApp "6") (stringApp "7") (stringApp "8") (stringApp "9").

let showIndex (i : DBIndex) : String :=
  i ?String
    (λ i' : init$index'. stringApp "0" (showIndex' i'))
    (λ i' : init$index'. stringApp "1" (showIndex' i'))
    (λ i' : init$index'. stringApp "2" (showIndex' i'))
    (λ i' : init$index'. stringApp "3" (showIndex' i'))
    (λ i' : init$index'. stringApp "4" (showIndex' i'))
    (λ i' : init$index'. stringApp "5" (showIndex' i'))
    (λ i' : init$index'. stringApp "6" (showIndex' i'))
    (λ i' : init$index'. stringApp "7" (showIndex' i'))
    (λ i' : init$index'. stringApp "8" (showIndex' i'))
    (λ i' : init$index'. stringApp "9" (showIndex' i')).

elet showVar (con : List String) (v : Var) : String :=
  v ?String (λ s : String. s) (λ i : DBIndex. lookupDefault ?_ (indexToNat i) (showIndex i) con).
let showSort (s : Sort) : String := s ?String "*" "□".
let showBinder (b : Binder) : String := b ?String "λ" "Λ" "Π" "∀".

let isArrow         (b : Binder) : Bool   := b ?Bool false false true true.
let showBinderArrow (b : Binder) : String :=
  b ?String "λ is not an arrow!" "Λ is not an arrow!" "->" "=>".

let needsParens (t : Term) : Bool :=
  t ?Bool
    (λ _ : Var. false)
    (λ _ : Sort. false)
    (λ _ : Binder. λ _ : String. λ _, _ : Bool. true)
    (λ _ : Bool. λ _ : List (Bool × Bool). true)
    (λ _ : Char. false)
    false
    (λ _ : Bool. false).

let wrapWithParens (s : String) : String := stringConcat [String|"(", s, ")"].

elet showTermWithContext : Term -> List String -> String := recursionTerm ?_
  (λ v : Var. λ con : List String. showVar con v)
  (λ s : Sort. λ _ : List String. showSort s)
  (λ b : Binder. λ n : String. λ _, _ : Term. λ T, t : List String -> String. λ con : List String.
    ifthenelse ?_ (and (stringEq n "_") (isArrow b))
      (stringConcat [String| T con, " ", showBinderArrow b, " ", t (n ∷ con)])
      (stringConcat [String| showBinder b, " ", n, " : ", T con, ". ", t (n ∷ con)]))
  (λ _ : Term. λ la : List App. λ t : List String -> String.
   λ l : List (Bool × (List String -> String)). λ con : List String. stringConcat
     (t con ∷ map ?_ ?_
        (recursionTripleProduct ?_ ?_ ?_ ?_ λ b : Bool. λ s : List String -> String. λ t' : Term.
          stringConcat [String| ifthenelse ?_ b " ?" " ",
                                ifthenelse ?_ (needsParens t') (wrapWithParens (s con)) (s con)])
        (zipWith ?_ ?_ ?_ (recursionProduct ?_ ?_ ?_
                   λ b : Bool. λ s : List String -> String. λ a : App. b ; s ; appTerm a)
                 l la)))
  (λ c : Char. λ _ : List String. stringConcat [String| "κ", stringCons c stringNil])
  (λ _ : List String. "_")
  (λ _ : Term. λ t : List String -> String. λ con : List String. stringConcat [String|"γ{", t con, "}"]).

let showTerm (t : Term) : String := showTermWithContext t (nil ?String).

endModule.
