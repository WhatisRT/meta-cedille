module Bootstrap:Binary.

importModule Bootstrap:Bool.
importModule Bootstrap:Builtins.
importModule Bootstrap:List.
importModule Bootstrap:Nat.
importModule Bootstrap:NatHelpers.

let Byte : * := ∀ X : *. (Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> X) -> X.

let mkByte (b1, b2, b3, b4, b5, b6, b7, b8 : Bool) : Byte := Λ X : *.
  λ b : Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> Bool -> X. b b1 b2 b3 b4 b5 b6 b7 b8.

let byteToNat (b : Byte) : Nat := boolListToNat $
  b ?(List Bool) (λ b1, b2, b3, b4, b5, b6, b7, b8 : Bool. [Bool|b1; b2; b3; b4; b5; b6; b7; b8]).

let showByte (b : Byte) : String := showNatDecimal $ byteToNat b.

endModule.
