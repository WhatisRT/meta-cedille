--------------------------------------------------------------------------------
-- Term recursion
--------------------------------------------------------------------------------

module Bootstrap:TermRec.

importModule Bootstrap:Bool.
importModule Bootstrap:Builtins.
importModule Bootstrap:List.
importModule Bootstrap:ListExt.
importModule Bootstrap:Maybe.
importModule Bootstrap:Nat.
importModule Bootstrap:Product.
importModule Bootstrap:Term.

elet mapAppList [X, Y : *] (f : X -> Y) (l : List (Bool × X)) : List (Bool × Y) :=
  map ?_ ?_ (recursionProduct ?_ ?_ ?_ λ b : Bool. λ x : X. b, (f x)) l.

elet distList [X, Y, Z : *] (l : List (TripleProduct X Y Z)) : (List (X × Y)) × (List (X × Z)) :=
  l ?((List (X × Y)) × (List (X × Z)))
    (nil ?(X × Y), nil ?(X × Z))
    (recursionTripleProduct ?_ ?_ ?_ ?_ λ x : X. λ y : Y. λ z : Z.
      recursionProduct ?_ ?_ ?_ λ l : List (X × Y). λ r : List (X × Z).
        ((x,y) ∷ l), ((x,z) ∷ r)).

elet recursionTerm [X : *]
  (fvar  : Var -> X)
  (fsort : Sort -> X)
  (fbind : Binder -> String -> Term -> Term -> X -> X -> X)
  (fapp  : Term -> List App -> X -> List (Bool × X) -> X)
  (fchar : Char -> X)
  (funk  : X)
  (funq  : Term -> X -> X)
  (term  : Term) : X :=
  pr1 ?X ?Term (term ?(X × Term)
    (λ v : Var. fvar v, varTerm v)
    (λ s : Sort. fsort s, sortTerm s)
    (λ b : Binder. λ n : String. recursionProduct ?X ?Term ?((X × Term) -> (X × Term))
      λ T1 : X. λ T2 : Term. recursionProduct ?X ?Term ?(X × Term)
      λ t1 : X. λ t2 : Term. prodPair ?X ?_ (fbind b n T2 t2 T1 t1) (binderTerm b n T2 t2))
    (recursionProduct ?X ?Term ?(List (Bool × (X × Term)) -> (X × Term))
      λ t1 : X. λ t2 : Term. λ l : List (Bool × (X × Term)).
      recursionProduct ?(List (Bool × X)) ?(List (Bool × Term)) ?(X × Term)
        (λ l1 : List (Bool × X). λ l2 : List (Bool × Term).
          prodPair ?X ?Term (fapp t2 l2 t1 l1) (appLTerm t2 l2)) (distList ?Bool ?X ?Term l))
    (λ c : Char. fchar c, charTerm c)
    (funk, unknownTerm)
    (recursionProduct ?X ?Term ?(X × Term) λ u1 : X. λ u2 : Term.
      prodPair ?X ?_ (funq u2 u1) (unquoteTerm u2))).

let matchTerm [X : *]
  (fvar  : Var -> X)
  (fsort : Sort -> X)
  (fbind : Binder -> String -> Term -> Term -> X)
  (fapp  : Term -> List App -> X)
  (fchar : Char -> X)
  (funk  : X)
  (funq  : Term -> X) : Term -> X :=
  recursionTerm ?X
    fvar fsort
    (λ b : Binder. λ n : String. λ T, t : Term. λ _, _ : X. fbind b n T t)
    (λ t : Term. λ app : List App. λ _ : X. λ _ : List (Bool × X). fapp t app)
    fchar funk
    (λ t : Term. λ _ : X. funq t).

elet stripLambda : Term -> Maybe Term :=
  matchTerm ?(Maybe Term)
    (λ _ : Var. nothing ?Term)
    (λ _ : Sort. nothing ?Term)
    (λ b : Binder. λ _ : String. λ T, t : Term.
      b ?(Maybe Term) (just ?_ t) (just ?_ t) (nothing ?Term) (nothing ?Term))
    (λ _ : Term. λ _ : List App. nothing ?Term)
    (λ _ : Char. nothing ?Term)
    (nothing ?Term)
    (λ _ : Term. nothing ?Term).

elet stripLambdas (n : Nat) : Term -> Maybe Term :=
  n ?(Term -> Maybe Term)
    (just ?Term)
    (λ rec : Term -> Maybe Term. λ t : Term. bindMaybe ?_ ?_ (stripLambda t) rec).

elet stripPi : Term -> Maybe Term :=
  matchTerm ?(Maybe Term)
    (λ _ : Var. nothing ?Term)
    (λ _ : Sort. nothing ?Term)
    (λ b : Binder. λ _ : String. λ T, t : Term.
      b ?(Maybe Term) (nothing ?Term) (nothing ?Term) (just ?_ t) (nothing ?Term))
    (λ _ : Term. λ _ : List App. nothing ?Term)
    (λ _ : Char. nothing ?Term)
    (nothing ?Term)
    (λ _ : Term. nothing ?Term).

elet stripPis (n : Nat) : Term -> Maybe Term :=
  n ?(Term -> Maybe Term)
    (just ?Term)
    (λ rec : Term -> Maybe Term. λ t : Term. bindMaybe ?_ ?_ (stripPi t) rec).

let matchVar [X : *] (def : X) (f : Var -> X) (t : Term) : X :=
  matchTerm ?X
    f
    (λ _ : Sort. def)
    (λ _ : Binder. λ _ : String. λ _, _ : Term. def)
    (λ _ : Term. λ _ : List App. def)
    (λ _ : Char. def)
    def
    (λ _ : Term. def)
    t.

let matchApp [X : *] (def : X) (f : Term -> List App -> X) (t : Term) : X :=
  matchTerm ?X
    (λ _ : Var. def)
    (λ _ : Sort. def)
    (λ _ : Binder. λ _ : String. λ _, _ : Term. def)
    f
    (λ _ : Char. def)
    def
    (λ _ : Term. def)
    t.
--------------------------------------------------------------------------------
-- Helper for pattern matching of two terms and computing something on
-- the diagonal
--------------------------------------------------------------------------------

let recursionTermsDiag [X : *]
  (fvar : Var -> Var -> X)
  (fsort : Sort -> Sort -> X)
  (fbind : Binder -> String -> Term -> Term -> Binder -> String -> Term -> Term -> X -> X -> X)
  (fapp : Term -> List App -> Term -> List App -> X -> List X -> X)
  (fchar : Char -> Char -> X)
  (funk : X)
  (funq : Term -> Term -> X -> X)
  (default : Term -> Term -> X) : Term -> Term -> X :=
  recursionTerm ?(Term -> X)
    (λ v1 : Var. recursionTerm ?X
      (λ v2 : Var. fvar v1 v2)
      (λ s2 : Sort. default (varTerm v1) (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default (varTerm v1) (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default (varTerm v1) (appLTerm t2 app2))
      (λ c2 : Char. default (varTerm v1) (charTerm c2))
      (default (varTerm v1) unknownTerm)
      (λ t2 : Term. λ _ : X. default (varTerm v1) (unquoteTerm t2)))
    (λ s1 : Sort. recursionTerm ?X
      (λ v2 : Var. default (sortTerm s1) (varTerm v2))
      (λ s2 : Sort. fsort s1 s2)
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default (sortTerm s1) (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default (sortTerm s1) (appLTerm t2 app2))
      (λ c2 : Char. default (sortTerm s1) (charTerm c2))
      (default (sortTerm s1) unknownTerm)
      (λ t2 : Term. λ _ : X. default (sortTerm s1) (unquoteTerm t2)))
    (λ b1 : Binder. λ n1 : String. λ T1, t1 : Term. λ recT1, rect1 : Term -> X. recursionTerm ?X
      (λ v2 : Var. default (binderTerm b1 n1 T1 t1) (varTerm v2))
      (λ s2 : Sort. default (binderTerm b1 n1 T1 t1) (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. fbind b1 n1 T1 t1 b2 n2 T2 t2 (recT1 T2) (rect1 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default (binderTerm b1 n1 T1 t1) (appLTerm t2 app2))
      (λ c2 : Char. default (binderTerm b1 n1 T1 t1) (charTerm c2))
      (default (binderTerm b1 n1 T1 t1) unknownTerm)
      (λ t2 : Term. λ _ : X. default (binderTerm b1 n1 T1 t1) (unquoteTerm t2)))
    (λ t1 : Term. λ app1 : List App. λ rect1 : Term -> X. λ recapp1 : List (Bool × (Term -> X)). recursionTerm ?X
      (λ v2 : Var. default (appLTerm t1 app1) (varTerm v2))
      (λ s2 : Sort. default (appLTerm t1 app1) (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default (appLTerm t1 app1) (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X).
        fapp t1 app1 t2 app2 (rect1 t2) (zipWith ?(Bool × (Term -> X)) ?(Bool × Term) ?X
             (λ r1 : Bool × (Term -> X). λ r2 : Bool × Term.
               pr2 ?Bool ?(Term -> X) r1 $ pr2 ?Bool ?Term r2) recapp1 app2))
      (λ c2 : Char. default (appLTerm t1 app1) (charTerm c2))
      (default (appLTerm t1 app1) unknownTerm)
      (λ t2 : Term. λ _ : X. default (appLTerm t1 app1) (unquoteTerm t2)))
    (λ c1 : Char. recursionTerm ?X
      (λ v2 : Var. default (charTerm c1) (varTerm v2))
      (λ s2 : Sort. default (charTerm c1) (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default (charTerm c1) (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default (charTerm c1) (appLTerm t2 app2))
      (λ c2 : Char. fchar c1 c2)
      (default (charTerm c1) unknownTerm)
      (λ t2 : Term. λ _ : X. default (charTerm c1) (unquoteTerm t2)))
    (recursionTerm ?X
      (λ v2 : Var. default unknownTerm (varTerm v2))
      (λ s2 : Sort. default unknownTerm (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default unknownTerm (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default unknownTerm (appLTerm t2 app2))
      (λ c2 : Char. default unknownTerm (charTerm c2))
      (funk)
      (λ t2 : Term. λ _ : X. default unknownTerm (unquoteTerm t2)))
    (λ t1 : Term. λ rect1 : Term -> X. recursionTerm ?X
      (λ v2 : Var. default (unquoteTerm t1) (varTerm v2))
      (λ s2 : Sort. default (unquoteTerm t1) (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default (unquoteTerm t1) (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default (unquoteTerm t1) (appLTerm t2 app2))
      (λ c2 : Char. default (unquoteTerm t1) (charTerm c2))
      (default (unquoteTerm t1) unknownTerm)
      (λ t2 : Term. λ rect2 : X. funq t1 t2 (rect1 t2))).

endModule.
