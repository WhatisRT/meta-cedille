--------------------------------------------------------------------------------
-- Compiles definitions to the initial syntax
--
-- This is used to be able to write the bootstrap code using the
-- syntax/elaboration it defines.
--------------------------------------------------------------------------------

let unreachableShowTerm0 (msg : String) (_ : List String) : String :=
  stringApp "BUG: SHOW " msg.

let unreachableShowTerm1 (msg : String) (_ : List String -> String) (_ : List String) : String :=
  stringApp "BUG: SHOW " msg.

let unreachableShowTerm2 (msg : String) (_, _ : List String -> String) (_ : List String) : String :=
  stringApp "BUG: SHOW " msg.

let unreachableShowTerm3 (msg : String) (_, _, _ : List String -> String) (_ : List String) : String :=
  stringApp "BUG: SHOW " msg.

let adjustEmpty (s : String) : String := ifthenelse ?String (stringEq s "") "_" s.

-- show with the initial syntax
let showInitTermWithContext (t : iTerm) : List String -> String :=
  t ?(List String -> String)
    (λ v : Var. λ con : List String. showVar con v)
    (λ s : Sort. λ _ : List String. showSort s)
    (λ s : init$const. unreachableShowTerm0 "CONST")
    (unreachableShowTerm1 "PI") (unreachableShowTerm1 "PSI") (unreachableShowTerm2 "BETA")
    (unreachableShowTerm2 "DELTA") (unreachableShowTerm1 "SIGMA")
    (λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"[", t con, " ", t' con, "]"])
    (λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"<", t con, " ", t' con, ">"])
    (λ _ : List String -> String. λ _ : String. unreachableShowTerm2 "RHO")
    (λ s : String. λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"∀ ", adjustEmpty s, " : ", t con, " ", t' (cons ?String s con)])
    (λ s : String. λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"Π ", adjustEmpty s, " : ", t con, " ", t' (cons ?String s con)])
    (λ _ : String. λ _, _ : List String -> String. λ _ : List String. "BUG: SHOW IOTA")
    (λ s : String. λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"λ ", adjustEmpty s, " : ", t con, " ", t' (cons ?String s con)])
    (λ s : String. λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"Λ ", adjustEmpty s, " : ", t con, " ", t' (cons ?String s con)])
    (λ _, _ : List String -> String. λ _ : String. unreachableShowTerm1 "PAIR")
    (unreachableShowTerm3 "PHI") (unreachableShowTerm2 "EQUAL") (unreachableShowTerm1 "OMEGA")
    (unreachableShowTerm2 "MU") (unreachableShowTerm1 "EPSILON")
        -- Zetas
    (unreachableShowTerm2 "Let")
    (unreachableShowTerm3 "AnnLet")
    (unreachableShowTerm3 "SetEval")
    (unreachableShowTerm2 "ShellCmd")
    (unreachableShowTerm2 "CheckTerm")
    (unreachableShowTerm3 "Parse")
    (unreachableShowTerm1 "Normalize")
    (unreachableShowTerm1 "HeadNormalize")
    (unreachableShowTerm1 "InferType")
    (unreachableShowTerm2 "CatchErr")
    (unreachableShowTerm1 "Import")
    (unreachableShowTerm0 "GetEval")
    (unreachableShowTerm1 "Print")
    (unreachableShowTerm2 "WriteFile")
    (unreachableShowTerm0 "CommandLine")
    (unreachableShowTerm0 "ToggleProf")
    (λ c : Char. λ _ : List String. stringConcat [String|"κ", stringCons c stringNil])
    (unreachableShowTerm2 "CHAREQ").

let showInitTerm (t : iTerm) : String := showInitTermWithContext t [String|].

elet printTypeAnn : Maybe Term -> String :=
  maybe ?_ ?_ "" (λ T : Term. stringConcat [String|" : ", showInitTerm (TermToInitTerm T)]).

elet printDefinition (def : LetInfo) : String :=
  stringConcat [String|"let ", letInfoName def,
                       " := ", showInitTerm (TermToInitTerm $ letInfoTerm def),
                       printTypeAnn (letInfoType def) , "."].

let bootstrapCompileDir := "Bootstrap/Compiled/".

elet compileBootstrapModules (modNames : List String) : Eval Unit :=
  compileModules (λ d : LetInfo. pureEval ?_ $ printDefinition d)
                 (λ n : ModuleName. stringConcat
                    [String|bootstrapCompileDir, moduleNameToPath (tail ?_ n), ".mced"])
                 (map ?_ ?_ (λ s : String. [String|"Bootstrap", s]) modNames).

-- we need those definitions to compile things properly
let builtinStringNil : String := Λ X : *.
  λ sc : Char -> X -> X. λ sn : X. sn.
let builtinStringCons (c : Char) (s : String) : String := Λ X : *.
  λ sc : Char -> X -> X. λ sn : X. sc c (s ?X sc sn).
