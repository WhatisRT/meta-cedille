--------------------------------------------------------------------------------
-- Compiles definitions to the initial syntax
--
-- This is used to be able to write the bootstrap code using the
-- syntax/elaboration it defines.
--------------------------------------------------------------------------------

let unreachableShowTerm0 (msg : String) (_ : List String) : String :=
  stringApp "BUG: SHOW " msg.

let unreachableShowTerm1 (msg : String) (_ : List String -> String) (_ : List String) : String :=
  stringApp "BUG: SHOW " msg.

let unreachableShowTerm2 (msg : String) (_, _ : List String -> String) (_ : List String) : String :=
  stringApp "BUG: SHOW " msg.

let unreachableShowTerm3 (msg : String) (_, _, _ : List String -> String) (_ : List String) : String :=
  stringApp "BUG: SHOW " msg.

let adjustEmpty (s : String) : String := ifthenelse ?String (stringEq s "") "_" s.

-- show with the initial syntax
let showInitTermWithContext (t : iTerm) : List String -> String :=
  t ?(List String -> String)
    (λ v : Var. λ con : List String. showVar con v)
    (λ s : Sort. λ _ : List String. showSort s)
    (λ s : init$const. unreachableShowTerm0 "CONST")
    (unreachableShowTerm1 "PI") (unreachableShowTerm1 "PSI") (unreachableShowTerm2 "BETA")
    (unreachableShowTerm2 "DELTA") (unreachableShowTerm1 "SIGMA")
    (λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"[", t con, " ", t' con, "]"])
    (λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"<", t con, " ", t' con, ">"])
    (λ _ : List String -> String. λ _ : String. unreachableShowTerm2 "RHO")
    (λ s : String. λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"∀ ", adjustEmpty s, " : ", t con, " ", t' (cons ?String s con)])
    (λ s : String. λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"Π ", adjustEmpty s, " : ", t con, " ", t' (cons ?String s con)])
    (λ _ : String. λ _, _ : List String -> String. λ _ : List String. "BUG: SHOW IOTA")
    (λ s : String. λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"λ ", adjustEmpty s, " : ", t con, " ", t' (cons ?String s con)])
    (λ s : String. λ t, t' : List String -> String. λ con : List String.
      stringConcat [String|"Λ ", adjustEmpty s, " : ", t con, " ", t' (cons ?String s con)])
    (λ _, _ : List String -> String. λ _ : String. unreachableShowTerm1 "PAIR")
    (unreachableShowTerm3 "PHI") (unreachableShowTerm2 "EQUAL") (unreachableShowTerm1 "OMEGA")
    (unreachableShowTerm2 "MU") (unreachableShowTerm1 "EPSILON")
        -- Zetas
    (unreachableShowTerm2 "Let")
    (unreachableShowTerm3 "AnnLet")
    (unreachableShowTerm3 "SetEval")
    (unreachableShowTerm2 "ShellCmd")
    (unreachableShowTerm2 "CheckTerm")
    (unreachableShowTerm3 "Parse")
    (unreachableShowTerm1 "Normalize")
    (unreachableShowTerm1 "HeadNormalize")
    (unreachableShowTerm1 "InferType")
    (unreachableShowTerm2 "CatchErr")
    (unreachableShowTerm1 "Import")
    (unreachableShowTerm0 "GetEval")
    (unreachableShowTerm1 "Print")
    (unreachableShowTerm2 "WriteFile")
    (unreachableShowTerm0 "CommandLine")
    (λ c : Char. λ _ : List String. stringConcat [String|"'", stringCons c stringNil, "'"])
    (unreachableShowTerm2 "CHAREQ").

let showInitTerm (t : iTerm) : String :=
  showInitTermWithContext t [String|].

-- FIXME: get a proper syntax for writing characters
let modSeparator : Char := maybe ?Char ?Char quote$A (λ c : Char. c) $ head ?Char $ stringToList "|".

elet stripModPrefix : Term -> Term := renameNamesInTerm (λ s : String.
  ifthenelse ?_ (isPrefix modulePrefix s)
    (stringFromList $ drop ?_ 1 $ dropWhile ?_ (λ c : Char. not $ charEq modSeparator c) $
       drop ?_ (stringLength modulePrefix) $ stringToList s)
    s).

elet printTypeAnn : Maybe Term -> String :=
  maybe ?_ ?_ "" (λ T : Term. stringConcat [String|" : ", showInitTerm (TermToInitTerm T)]).

elet printDefinition (def : LetInfo) : String :=
  stringConcat [String|"let ", letInfoName def,
                       " := ", showInitTerm (TermToInitTerm $ letInfoTerm def),
                       printTypeAnn (letInfoType def) , "."].

elet writeDefinitionsToFile (fname : String) (defs : List LetInfo) : Eval Unit :=
  writeFile fname (stringConcat $ intersperse ?_ newline $ map ?_ ?_ printDefinition defs).

elet nameToLetInfo (prefix, n : String) : Eval LetInfo :=
  getDef (stringApp prefix n) >>= λ t : Term.
  inferType (sVarTerm (stringApp prefix n)) >>= λ T : Term.
    pureEval ?LetInfo $ mkLetInfo n (stripModPrefix t) (just ?Term $ stripModPrefix T).

elet bootstrapCompileDir := "bootstrap/Compiled/".

elet moduleToLetInfos (m : Module) : Eval (List LetInfo) :=
  sequenceEval ?_ $
    map ?_ ?_ (nameToLetInfo $ mkModuleContentPrefix $ ModuleModuleInfo m)
              (reverse ?_ $ ModuleContents m).

elet getModule (modName : ModuleName) : Eval Module :=
  findModule modName >>= maybe ?_ ?_ (throwEval ?Module "Module doesn't exist!")
    (λ m : Bool × Module. pureEval ?_ $ pr2 ?_ ?_ m).

elet compileNames (modName : String) : Eval Unit :=
  (getModule [String|"Bootstrap", modName] >>= moduleToLetInfos) >>=
    writeDefinitionsToFile (stringConcat [String|bootstrapCompileDir, modName, ".mced"]).

elet compileModules (modNames : List String) : Eval Unit :=
  voidEval ?_ $ sequenceEval ?_ $ map ?_ ?_ compileNames modNames.
