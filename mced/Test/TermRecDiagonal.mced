--------------------------------------------------------------------------------
-- Helper for pattern matching of two terms and computing something on
-- the diagonal
--------------------------------------------------------------------------------

let recursionTermsDiag [X : *]
  (fvar : init$var -> init$var -> X)
  (fsort : init$sort -> init$sort -> X)
  (fbind : Binder -> String -> Term -> Term -> Binder -> String -> Term -> Term -> X -> X -> X)
  (fapp : Term -> List App -> Term -> List App -> X -> List X -> X)
  (fchar : init$char -> init$char -> X)
  (funk : X)
  (funq : Term -> Term -> X -> X)
  (default : Term -> Term -> X) : Term -> Term -> X :=
  recursionTerm ?(Term -> X)
    (λ v1 : init$var. recursionTerm ?X
      (λ v2 : init$var. fvar v1 v2)
      (λ s2 : init$sort. default (varTerm v1) (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default (varTerm v1) (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default (varTerm v1) (appLTerm t2 app2))
      (λ c2 : init$char. default (varTerm v1) (charTerm c2))
      (default (varTerm v1) unknownTerm)
      (λ t2 : Term. λ _ : X. default (varTerm v1) (unquoteTerm t2)))
    (λ s1 : init$sort. recursionTerm ?X
      (λ v2 : init$var. default (sortTerm s1) (varTerm v2))
      (λ s2 : init$sort. fsort s1 s2)
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default (sortTerm s1) (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default (sortTerm s1) (appLTerm t2 app2))
      (λ c2 : init$char. default (sortTerm s1) (charTerm c2))
      (default (sortTerm s1) unknownTerm)
      (λ t2 : Term. λ _ : X. default (sortTerm s1) (unquoteTerm t2)))
    (λ b1 : Binder. λ n1 : String. λ T1, t1 : Term. λ recT1, rect1 : Term -> X. recursionTerm ?X
      (λ v2 : init$var. default (binderTerm b1 n1 T1 t1) (varTerm v2))
      (λ s2 : init$sort. default (binderTerm b1 n1 T1 t1) (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. fbind b1 n1 T1 t1 b2 n2 T2 t2 (recT1 T2) (rect1 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default (binderTerm b1 n1 T1 t1) (appLTerm t2 app2))
      (λ c2 : init$char. default (binderTerm b1 n1 T1 t1) (charTerm c2))
      (default (binderTerm b1 n1 T1 t1) unknownTerm)
      (λ t2 : Term. λ _ : X. default (binderTerm b1 n1 T1 t1) (unquoteTerm t2)))
    (λ t1 : Term. λ app1 : List App. λ rect1 : Term -> X. λ recapp1 : List (Bool × (Term -> X)). recursionTerm ?X
      (λ v2 : init$var. default (appLTerm t1 app1) (varTerm v2))
      (λ s2 : init$sort. default (appLTerm t1 app1) (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default (appLTerm t1 app1) (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X).
        fapp t1 app1 t2 app2 (rect1 t2) (zipWith ?(Bool × (Term -> X)) ?(Bool × Term) ?X
             (λ r1 : Bool × (Term -> X). λ r2 : Bool × Term.
               pr2 ?Bool ?(Term -> X) r1 $ pr2 ?Bool ?Term r2) recapp1 app2))
      (λ c2 : init$char. default (appLTerm t1 app1) (charTerm c2))
      (default (appLTerm t1 app1) unknownTerm)
      (λ t2 : Term. λ _ : X. default (appLTerm t1 app1) (unquoteTerm t2)))
    (λ c1 : init$char. recursionTerm ?X
      (λ v2 : init$var. default (charTerm c1) (varTerm v2))
      (λ s2 : init$sort. default (charTerm c1) (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default (charTerm c1) (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default (charTerm c1) (appLTerm t2 app2))
      (λ c2 : init$char. fchar c1 c2)
      (default (charTerm c1) unknownTerm)
      (λ t2 : Term. λ _ : X. default (charTerm c1) (unquoteTerm t2)))
    (recursionTerm ?X
      (λ v2 : init$var. default unknownTerm (varTerm v2))
      (λ s2 : init$sort. default unknownTerm (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default unknownTerm (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default unknownTerm (appLTerm t2 app2))
      (λ c2 : init$char. default unknownTerm (charTerm c2))
      (funk)
      (λ t2 : Term. λ _ : X. default unknownTerm (unquoteTerm t2)))
    (λ t1 : Term. λ rect1 : Term -> X. recursionTerm ?X
      (λ v2 : init$var. default (unquoteTerm t1) (varTerm v2))
      (λ s2 : init$sort. default (unquoteTerm t1) (sortTerm s2))
      (λ b2 : Binder. λ n2 : String. λ T2, t2 : Term. λ _, _ : X. default (unquoteTerm t1) (binderTerm b2 n2 T2 t2))
      (λ t2 : Term. λ app2 : List App. λ _ : X. λ _ : List (Bool × X). default (unquoteTerm t1) (appLTerm t2 app2))
      (λ c2 : init$char. default (unquoteTerm t1) (charTerm c2))
      (default (unquoteTerm t1) unknownTerm)
      (λ t2 : Term. λ rect2 : X. funq t1 t2 (rect1 t2))).