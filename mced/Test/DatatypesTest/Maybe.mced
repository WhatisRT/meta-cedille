module Maybe'.

-- Temporary workaround to make all the names that `data` needs available
import Datatypes/ModuleCompatibility.

data Maybe (A : *) where
| nothing : Maybe A
| just    : A -> Maybe A.

elet maybe [A, B : *] (default : B) (f : A -> B) (x : Maybe A) : B := MaybeFold _ _ default f x.

elet bindMaybe (A, B : *) (x : Maybe A) (f : A -> Maybe B) : Maybe B :=
  maybe ?_ ?_ (nothing B) f x.

elet mapMaybe [A, B : *] (f : A -> B) (x : Maybe A) : Maybe B :=
  maybe ?_ ?_ (nothing B) (Î» a : A. just B $ f a) x.

endModule.
