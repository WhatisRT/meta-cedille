--------------------------------------------------------------------------------
-- Descriptions of simple datatypes
--------------------------------------------------------------------------------

-- module Datatypes2:Desc.

-- importModule Bootstrap:Product.
-- importModule Bootstrap:String.

-- Given String stringNil stringCons.
-- Given Term quoteAst appLTerm binderTerm lambdaBinder App sVarTerm.
-- Given List nil cons.

--------------------------------------------------------------------------------
-- Argument description, taking the name of a recursive type

let ADesc := Term × Term.

let ADescTy (a : ADesc) := pr1 ?Term ?Term a.
let ADescF (a : ADesc) (t : Term) : Term := θ{γ{ADescTy a} γ{t}}.
let ADescMono (a : ADesc) := pr2 ?Term ?Term a.

--------------------------------------------------------------------------------
-- Constructor description

let CDesc := Name × List ADesc.

elet CDescName (d : CDesc) : Name := pr1 ?_ ?(List ADesc) d.
elet CDescAs (d : CDesc) : List ADesc := pr2 ?_ ?(List ADesc) d.

elet cArgTelTerm (t : Term) (as : List ADesc) : Telescope :=
  zipWithIndex ?_ ?_
    (λ k : Nat. λ ad : ADesc. false, φ"a${showNatDecimal k}", ADescF ad t)
    as.

elet cArgTelName (rn : Name) (as : List ADesc) : Telescope :=
  cArgTelTerm (sVarTerm rn) as.

elet cArgTel (rn : Name) (c : CDesc) : Telescope :=
  cArgTelName rn (CDescAs c).

elet CDescToTy' (qn, rn : Name) (as : List ADesc) : Term :=
  foldWithPi (cArgTelName rn as) (sVarTerm qn).

elet CDescToTy (qn, rn : Name) (d : CDesc) : Term :=
  foldWithPi (cArgTel rn d) (sVarTerm qn).

elet appCtor (rn : Name) (d : CDesc) : Term :=
  applyTelescope (sVarTerm φ"${CDescName d}F") ((true, rn, θ{*}) ∷ cArgTel rn d).

elet CDescToTyP (rn, pn : Name) (d : CDesc) : Term :=
  foldWithPi (cArgTel rn d) θ{γ{sVarTerm pn} γ{appCtor rn d}}.

--------------------------------------------------------------------------------
-- Datatype description

let Desc := Name × List CDesc.

elet DescName (d : Desc) : Name := pr1 ?_ ?(List CDesc) d.
elet DescCs (d : Desc) : List CDesc := pr2 ?_ ?(List CDesc) d.

--------------------------------------------------------------------------------
-- castCtor: convert a term of type F1 R -> ... -> Fn R -> X to F1 S -> ... -> Fn S -> X
-- where cn : Cast R S and the Fi come from a constructor

elet genElimMono (S, T, cast : Term) (f : Term -> Term) (monoT : Term) (t : Term) : Term :=
  θ{elimCast ?γ{f S} ?γ{f T} ?(γ{monoT} ?γ{S} ?γ{T} γ{cast}) γ{t}}.

elet CDescToCastApp (S, T, cast : Term) (c : CDesc) : List App :=
  zipWith ?_ ?_ ?_
    (λ p : Param. λ ad : ADesc.
      mkAppU $ genElimMono S T cast (ADescF ad) (ADescMono ad) (sVarTerm $ paramName p))
    (cArgTelTerm S (CDescAs c))
    (CDescAs c).

elet castCtor (S, T, cast : Term) (t : Term) (c : CDesc) : Term :=
  foldWithLambdas (cArgTelTerm S (CDescAs c)) $ appLTerm t $ CDescToCastApp S T cast c.

elet castCtorPi (S, T, cast : Term) (t : List App -> Term) (c : CDesc) : Term :=
  foldWithPi (cArgTelTerm S (CDescAs c)) $ t $ CDescToCastApp S T cast c.

elet castApp (an, bn, cn : Name) (ns : List Name) (d : Desc) : List App :=
  zipWith ?_ ?_ ?_
    (λ c : CDesc. λ n : Name. mkAppU $ castCtor (sVarTerm an) (sVarTerm bn) (sVarTerm cn) (sVarTerm n) c)
    (DescCs d) ns.
