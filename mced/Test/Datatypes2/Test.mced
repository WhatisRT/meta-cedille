--------------------------------------------------------------------------------
-- Test helpers

elet DefineTy' : Desc -> Eval Unit := DefineTy "A" "B" "c" "Q" "P" "R" "r" "x" "y" "z".
elet DefineInd' : Desc -> Eval Unit := DefineInd "h" "P" "x".

--------------------------------------------------------------------------------
-- List helpers

let monoList : Mono ListC := Λ X, Y : *. λ c : Cast X Y.
  extCast ?(ListC X) ?(ListC Y) ?(indList ?X ?(λ l : ListC X. View (ListC Y) (beta' ?(ListC X) l))
    (selfView ?(ListC Y) (nilC ?Y))
    (λ x : X. λ xs : ListC X. λ pxs : View (ListC Y) (beta' ?(ListC X) xs).
      selfView ?(ListC Y)
        (consC ?Y (elimCast ?X ?Y ?c x) (elimView ?(ListC Y) (beta' ?(ListC X) xs) ?pxs)))).

elet indHelperList/conv [AP, A : *] [c : Cast AP A] : List AP -> List A :=
  elimCast ?_ ?_ ?(monoList ?AP ?A c).

elet indHelperList [AP, A : *] [P : A -> *] [P' : List A -> *]
  (pn : P' [A|]) (pc : Π t : A. P t -> Π ts : List A. P' ts -> P' (cons ?A t ts))
  (convP1 : Cast AP A) (convP2 : Π t : AP. P (elimCast ?AP ?A ?convP1 t))
  : Π l : List AP. P' (indHelperList/conv ?AP ?A ?convP1 l) :=
  ψ convN = usubst ?(List A) ?(indHelperList/conv ?AP ?A ?convP1 [AP|]) ?[A|]
      ?(beta ?(List A) [A|]) ?P' : P' [A|] -> P' (indHelperList/conv ?AP ?A ?convP1 [AP|]).
  indList ?AP ?(λ l : List AP. P' (indHelperList/conv ?AP ?A ?convP1 l))
    (convN pn)
    (λ t : AP. λ ts : List AP. λ p' : P' (indHelperList/conv ?AP ?A ?convP1 ts).
     usubst ?(List A) ?(indHelperList/conv ?AP ?A ?convP1 (cons ?AP t ts))
       ?(cons ?A (elimCast ?AP ?A ?convP1 t) (indHelperList/conv ?AP ?A ?convP1 ts))
       ?(beta ?(List A) (indHelperList/conv ?AP ?A ?convP1 $ cons ?AP t ts)) ?P' $
       pc (elimCast ?AP ?A ?convP1 t) (convP2 t) (indHelperList/conv ?AP ?A ?convP1 ts) p').

--------------------------------------------------------------------------------
-- Tests

elet TNatDesc : Desc := "TNat" , [CDesc|"tZero" , [ADesc|]; "tSuc" , [ADesc|adRecNN]].
runMeta DefineTy' TNatDesc.
runMeta DefineInd' TNatDesc.

elet TNatListDesc : Desc := "TNatList" , [CDesc|"tNatNil" , [ADesc|]; "tNatCons" , [ADesc|adNonRec θ{Nat}; adRecNN]].
runMeta DefineTy' TNatListDesc.
runMeta DefineInd' TNatListDesc.

elet T1Desc : Desc := "T1" , [CDesc|"t11", [ADesc|]; "t12", [ADesc|adRecNN; adRecNN]].
runMeta DefineTy' T1Desc.
runMeta DefineInd' T1Desc.

-- golden test
elet indT1' : ∀ P : T1 -> *. P t11 -> Π a0 : T1. P a0 -> Π a1 : T1. P a1 -> P (t12 a0 a1)
           -> Π x : T1. P x := indT1.

elet T2Desc : Desc := "T2" , [CDesc|"t21", [ADesc|adNonRec θ{Nat}]; "t22", [ADesc|adRecNN; adRecNN]].
runMeta DefineTy' T2Desc.
runMeta DefineInd' T2Desc.

elet T3Desc : Desc := "T3" , [CDesc|"t31", [ADesc|]; "t32", [ADesc|adRecN (θ{List}, θ{monoList})]].
runMeta DefineTy' T3Desc.
runMeta DefineInd' T3Desc.

-- Non-strictly positive type

let T4Ty (X : *) : * := (X -> Bool) -> Bool.

elet monoT4Ty : Mono T4Ty :=
  Λ X, Y : *. λ c : Cast X Y. intrCast ?(T4Ty X) ?(T4Ty Y)
    ?(λ x : T4Ty X. λ y : Y -> Bool. x $ elimCast
      ?(Y -> Bool)
      ?(X -> Bool)
      ?(antiArr ?(λ Z : *. Z) ?(λ _ : *. Bool) monoId (antiConst ?Bool) ?X ?Y c)
      y)
    ?(beta ?(T4Ty X)).

elet T4Desc : Desc := "T4" , [CDesc|"t4", [ADesc|adRecN (θ{T4Ty}, θ{monoT4Ty})]].
runMeta DefineTy' T4Desc.
