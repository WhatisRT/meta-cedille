--------------------------------------------------------------------------------
-- Test helpers

elet DefineTy' : Desc -> Eval Unit := DefineTy "A" "B" "c" "Q" "P" "R" "r" "x" "y" "z".

--------------------------------------------------------------------------------
-- List helpers

let monoList : Mono ListC := Λ X, Y : *. λ c : Cast X Y.
  extCast ?(ListC X) ?(ListC Y) ?(indList ?X ?(λ l : ListC X. View (ListC Y) (beta' ?(ListC X) l))
    (selfView ?(ListC Y) (nilC ?Y))
    (λ x : X. λ xs : ListC X. λ pxs : View (ListC Y) (beta' ?(ListC X) xs).
      selfView ?(ListC Y)
        (consC ?Y (elimCast ?X ?Y ?c x) (elimView ?(ListC Y) (beta' ?(ListC X) xs) ?pxs)))).

elet indHelperList/conv [AP, A : *] [c : Cast AP A] : List AP -> List A :=
  elimCast ?_ ?_ ?(monoList ?AP ?A c).

elet indHelperList [AP, A : *] [P : A -> *] [P' : List A -> *]
  (pn : P' [A|]) (pc : Π t : A. P t -> Π ts : List A. P' ts -> P' (cons ?A t ts))
  (convP1 : Cast AP A) (convP2 : Π t : AP. P (elimCast ?AP ?A ?convP1 t))
  : Π l : List AP. P' (indHelperList/conv ?AP ?A ?convP1 l) :=
  ψ convN = usubst ?(List A) ?(indHelperList/conv ?AP ?A ?convP1 [AP|]) ?[A|]
      ?(beta ?(List A) [A|]) ?P' : P' [A|] -> P' (indHelperList/conv ?AP ?A ?convP1 [AP|]).
  indList ?AP ?(λ l : List AP. P' (indHelperList/conv ?AP ?A ?convP1 l))
    (convN pn)
    (λ t : AP. λ ts : List AP. λ p' : P' (indHelperList/conv ?AP ?A ?convP1 ts).
     usubst ?(List A) ?(indHelperList/conv ?AP ?A ?convP1 (cons ?AP t ts))
       ?(cons ?A (elimCast ?AP ?A ?convP1 t) (indHelperList/conv ?AP ?A ?convP1 ts))
       ?(beta ?(List A) (indHelperList/conv ?AP ?A ?convP1 $ cons ?AP t ts)) ?P' $
       pc (elimCast ?AP ?A ?convP1 t) (convP2 t) (indHelperList/conv ?AP ?A ?convP1 ts) p').

--------------------------------------------------------------------------------
-- Tests

elet TNatDesc : Desc := "TNat" , [CDesc|"tZero" , [ADesc|]; "tSuc" , [ADesc|adRecNN]].
runMeta DefineTy' TNatDesc.

elet TNatListDesc : Desc := "TNatList" , [CDesc|"tNatNil" , [ADesc|]; "tNatCons" , [ADesc|adNonRec θ{Nat}; adRecNN]].
runMeta DefineTy' TNatListDesc.

elet T1Desc : Desc := "T1" , [CDesc|"t11", [ADesc|]; "t12", [ADesc|adRecNN; adRecNN]].
runMeta DefineTy' T1Desc.

elet T2Desc : Desc := "T2" , [CDesc|"t21", [ADesc|adNonRec θ{Nat}]; "t22", [ADesc|adRecNN; adRecNN]].
runMeta DefineTy' T2Desc.

let t21RecFPf [P : T2 -> *] (p : Π n : Nat. P (t21 n)) : t21RecF P :=
  Λ A, B : *. λ n : Nat. λ a : A. λ b : B. p n.

let t22RecFPf [P : T2 -> *] (p : Π t : T2. P t -> Π t' : T2. P t' -> P (t22 t t')) : t22RecF P :=
  Λ A, B : *. λ t : Iota T2 (λ x : T2. T2Rec P x A B). λ t' : Iota T2 (λ x : T2. T2Rec P x A B).
  λ a : A. λ b : B. p
    (iPr1 ?T2 ?(λ x : T2. T2Rec P x A B) t)  (iPr2 ?T2 ?(λ x : T2. T2Rec P x A B) t a b a b)
    (iPr1 ?T2 ?(λ x : T2. T2Rec P x A B) t') (iPr2 ?T2 ?(λ x : T2. T2Rec P x A B) t' a b a b).

elet indT2 [P : T2 -> *]
           (p1 : Π n : Nat. P (t21 n)) (p2 : Π t : T2. P t -> Π t' : T2. P t' -> P (t22 t t'))
           (t : T2) : P t :=
  recT2LR ?P (elimCast ?T2 ?T2LR ?toT2LR t)
    (t21RecFPf ?P p1) (t22RecFPf ?P p2)
    (t21RecFPf ?P p1) (t22RecFPf ?P p2).


elet T3Desc : Desc := "T3" , [CDesc|"t31", [ADesc|]; "t32", [ADesc|adRecN (θ{List}, θ{monoList})]].
runMeta DefineTy' T3Desc.

elet t31RecFPf [P : T3 -> *] (p : P t31) : t31RecF P :=
  Λ A, B : *. λ a : A. λ b : B. p.


elet t32RecFPf/R (P : T3 -> *) (A, B : *) (x : T3) : * := T3Rec P x A B.

elet t32RecFPf/conv [P : T3 -> *] [A, B : *] : List (Iota T3 (t32RecFPf/R P A B)) -> List T3 :=
  ψ R = t32RecFPf/R P A B : T3 -> *.
  indHelperList/conv ?(Iota T3 R) ?T3 ?(castIota ?T3 ?R).

elet t32RecFPf [P : T3 -> *] [P' : List T3 -> *] (p : Π l : List T3. P' l -> P (t32 l))
  (p'n : P' [T3|]) (p'c : Π t : T3. P t -> Π ts : List T3. P' ts -> P' (cons ?T3 t ts))
  : t32RecF P :=
  Λ A, B : *. λ r : List (Iota T3 (t32RecFPf/R P A B)). λ a : A. λ b : B.
    p (t32RecFPf/conv ?P ?A ?B r)
      (indHelperList ?_ ?_ ?P ?P' p'n p'c
        (castIota ?T3 ?(t32RecFPf/R P A B))
        (λ t : Iota T3 (t32RecFPf/R P A B). iPr2 ?_ ?(t32RecFPf/R P A B) t a b a b)
        r).

elet indT3 [P : T3 -> *] [P' : List T3 -> *] (p1 : P t31) (p2 : Π l : List T3. P' l -> P (t32 l))
  (p'n : P' [T3|]) (p'c : Π t : T3. P t -> Π ts : List T3. P' ts -> P' (cons ?T3 t ts))
  (t : T3) : P t :=
  recT3LR ?P (elimCast ?T3 ?T3LR ?toT3LR t)
    (t31RecFPf ?P p1) (t32RecFPf ?P ?P' p2 p'n p'c)
    (t31RecFPf ?P p1) (t32RecFPf ?P ?P' p2 p'n p'c).

-- Non-strictly positive type

let T4Ty (X : *) : * := (X -> Bool) -> Bool.

elet monoT4Ty : Mono T4Ty :=
  Λ X, Y : *. λ c : Cast X Y. intrCast ?(T4Ty X) ?(T4Ty Y)
    ?(λ x : T4Ty X. λ y : Y -> Bool. x $ elimCast
      ?(Y -> Bool)
      ?(X -> Bool)
      ?(antiArr ?(λ Z : *. Z) ?(λ _ : *. Bool) monoId (antiConst ?Bool) ?X ?Y c)
      y)
    ?(beta ?(T4Ty X)).

elet T4Desc : Desc := "T4" , [CDesc|"t4", [ADesc|adRecN (θ{T4Ty}, θ{monoT4Ty})]].
runMeta DefineTy' T4Desc.
