let usubstC [A : *] [p, q : A] [eq : UEq ?A ?A p q] [P : A -> *] : Cast (P p) (P q) :=
  intrCast ?(P p) ?(P q) ?(usubst ?A ?q ?p ?(usym ?A ?p ?q eq) ?P) ?(beta ?(P p)).

let monoConst [Z : *] : Mono (λ _ : *. Z) := Λ X, Y : *. λ c : Cast X Y.
  intrCast ?Z ?Z ?(λ z : Z. z) ?(beta ?Z).

let monoId : Mono (λ Z : *. Z) := Λ X, Y : *. λ c : Cast X Y.
  intrCast ?X ?Y ?(λ x : X. elimCast ?X ?Y ?c x) ?(beta ?X).

let MonoD (F : * -> *) (FP : Π X : *. F X -> *) (monoF : Mono F) :=
  ∀ Y1, Y2 : *. Π c : Cast Y1 Y2. Π y : F Y1.
    Cast (FP Y1 y) (FP Y2 (elimCast ?(F Y1) ?(F Y2) ?(monoF ?Y1 ?Y2 c) y)).

let iotaMono' (F : * -> *) (FP : Π X : *. F X -> *) (monoF : Mono F) (monoFP : MonoD F FP monoF)
  : Mono (λ X : *. Iota (F X) (FP X))
  := iotaMono F FP monoF monoFP.

let monoSum [F1, F2 : * -> * -> *]
            (mono1 : ∀ X : *. Mono (F1 X))
            (mono2 : ∀ X : *. Mono (F2 X))
            : Mono (λ R : *. ∀ X : *. (F1 X R -> X) -> (F2 X R -> X) -> X) :=
  Λ X, Y : *. λ c : Cast X Y. intrCast
    ?(∀ Z : *. (F1 Z X -> Z) -> (F2 Z X -> Z) -> Z)
    ?(∀ Z : *. (F1 Z Y -> Z) -> (F2 Z Y -> Z) -> Z)
    ?(λ x : ∀ Z : *. (F1 Z X -> Z) -> (F2 Z X -> Z) -> Z.
      Λ Z : *. λ f1 : F1 Z Y -> Z. λ f2 : F2 Z Y -> Z.
        x ?Z (λ a : F1 Z X. f1 (elimCast ?(F1 Z X) ?(F1 Z Y) ?(mono1 ?Z ?X ?Y c) a))
             (λ a : F2 Z X. f2 (elimCast ?(F2 Z X) ?(F2 Z Y) ?(mono2 ?Z ?X ?Y c) a)))
    ?(beta ?(∀ Z : *. (F1 Z X -> Z) -> (F2 Z X -> Z) -> Z)).

let Anti (F : * -> *) : * := ∀ X, Y : *. Cast X Y -> Cast (F Y) (F X).

let antiConst [Z : *] : Anti (λ _ : *. Z) := Λ X, Y : *. λ c : Cast X Y.
  intrCast ?Z ?Z ?(λ z : Z. z) ?(beta ?Z).

let AntiD (F : * -> *) (FP : Π X : *. F X -> *) (anti : Anti F) :=
  ∀ Y1, Y2 : *. Π c : Cast Y1 Y2. Π y : F Y2.
    Cast (FP Y2 y) (FP Y1 (elimCast ?(F Y2) ?(F Y1) ?(anti ?Y1 ?Y2 c) y)).

let antiArr [F, G : * -> *] (mono : Mono F) (anti : Anti G) : Anti (λ X : *. F X -> G X) :=
  Λ X, Y : *. λ c : Cast X Y.
  intrCast ?(F Y -> G Y) ?(F X -> G X)
    ?(λ f : F Y -> G Y. λ x : F X.
      elimCast ?(G Y) ?(G X) ?(anti ?X ?Y c) (f (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x)))
    ?(beta ?(F Y -> G Y)).

let SumF [F1, F2 : * -> * -> *] := λ R : *. ∀ X : *. F1 X R -> F2 X R -> X.

let antiSum [F1, F2 : * -> * -> *]
            (anti1 : ∀ X : *. Anti (F1 X))
            (anti2 : ∀ X : *. Anti (F2 X))
            : Mono (λ R : *. ∀ X : *. F1 X R -> F2 X R -> X) :=
  Λ X, Y : *. λ c : Cast X Y. intrCast
    ?(∀ Z : *. F1 Z X -> F2 Z X -> Z)
    ?(∀ Z : *. F1 Z Y -> F2 Z Y -> Z)
    ?(λ x : ∀ Z : *. F1 Z X -> F2 Z X -> Z.
      Λ Z : *. λ f1 : F1 Z Y. λ f2 : F2 Z Y.
        x ?Z (elimCast ?(F1 Z Y) ?(F1 Z X) ?(anti1 ?Z ?X ?Y c) f1)
             (elimCast ?(F2 Z Y) ?(F2 Z X) ?(anti2 ?Z ?X ?Y c) f2))
    ?(beta ?(∀ Z : *. F1 Z X -> F2 Z X -> Z)).

let ArrF (F1, F2 : * -> * -> *) : * -> * := λ R : *. ∀ X : *. F1 X R -> F2 X R.

let antiSum' [F1, F2 : * -> * -> *] (anti1 : ∀ X : *. Anti (F1 X)) (mono2 : ∀ X : *. Mono (F2 X))
  : Mono (ArrF F1 F2) := Λ X, Y : *. λ c : Cast X Y.
  intrCast ?(ArrF F1 F2 X) ?(ArrF F1 F2 Y)
    ?(λ x : ArrF F1 F2 X. Λ Z : *. λ f1 : F1 Z Y.
        elimCast ?(F2 Z X) ?(F2 Z Y) ?(mono2 ?Z ?X ?Y c)
          (x ?Z (elimCast ?(F1 Z Y) ?(F1 Z X) ?(anti1 ?Z ?X ?Y c) f1)))
    ?(beta ?(ArrF F1 F2 X)).

let ArrF1 (F1, F2 : * -> * -> *) : * -> * -> * := λ X, R : *. F1 X R -> F2 X R.

let ForallF (F : * -> * -> *) : * -> * := λ R : *. ∀ X : *. F X R.

let ConvMono (F : * -> * -> *) (mono : ∀ X : *. Mono (F X)) : Mono (ForallF F) :=
  Λ X, Y : *. λ c : Cast X Y.
  intrCast ?(ForallF F X) ?(ForallF F Y)
    ?(λ x : ForallF F X. Λ Z : *. elimCast ?(F Z X) ?(F Z Y) ?(mono ?Z ?X ?Y c) (x ?Z))
    ?(beta ?(ForallF F X)).

let antiSum1 [F1, F2 : * -> * -> *] [Z : *] (anti1 : Anti (F1 Z)) (mono2 : Mono (F2 Z))
  : Mono (ArrF1 F1 F2 Z) := Λ X, Y : *. λ c : Cast X Y.
  intrCast ?(ArrF1 F1 F2 Z X) ?(ArrF1 F1 F2 Z Y)
    ?(λ x : ArrF1 F1 F2 Z X. λ f1 : F1 Z Y.
        elimCast ?(F2 Z X) ?(F2 Z Y) ?(mono2 ?X ?Y c)
          (x (elimCast ?(F1 Z Y) ?(F1 Z X) ?(anti1 ?X ?Y c) f1)))
    ?(beta ?(ArrF1 F1 F2 Z X)).

let ArrF2 (F1, F2 : * -> *) : * -> * := λ X : *. F1 X -> F2 X.

let antiSum2 [F1, F2 : * -> *] (anti1 : Anti F1) (mono2 : Mono F2)
  : Mono (λ X : *. F1 X -> F2 X) := Λ X, Y : *. λ c : Cast X Y.
  intrCast ?(ArrF2 F1 F2 X) ?(ArrF2 F1 F2 Y)
    ?(λ x : ArrF2 F1 F2 X. λ f1 : F1 Y.
        elimCast ?(F2 X) ?(F2 Y) ?(mono2 ?X ?Y c)
          (x (elimCast ?(F1 Y) ?(F1 X) ?(anti1 ?X ?Y c) f1)))
    ?(beta ?(ArrF2 F1 F2 X)).

let ArrFD (F, F1 : * -> *) (FP2 : Π X : *. F X -> *) : Π X : *. F X -> * :=
  λ X : *. λ x : F X. F1 X -> FP2 X x.

let antiSumD [F, F1 : * -> *] [FP2 : Π X : *. F X -> *]
             (mono : Mono F) (anti1 : Anti F1) (monoD2 : MonoD F FP2 mono)
             : MonoD F (ArrFD F F1 FP2) mono := Λ X, Y : *. λ c : Cast X Y. λ x : F X.
  intrCast ?(ArrFD F F1 FP2 X x) ?(ArrFD F F1 FP2 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x))
    ?(λ z : ArrFD F F1 FP2 X x. λ f1 : F1 Y.
        elimCast ?(FP2 X x) ?(FP2 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x)) ?(monoD2 ?X ?Y c x)
          (z (elimCast ?(F1 Y) ?(F1 X) ?(anti1 ?X ?Y c) f1)))
    ?(beta ?(ArrFD F F1 FP2 X x)).

let ForallFP (F : * -> *) (FP : Π X : *. F X -> (F X -> *) -> *) : Π X : *. F X -> * :=
  λ X : *. λ x : F X. ∀ P : F X -> *. FP X x P.

-- let ConvMonoD [F : * -> *] (mono : Mono F)
--               [FP : Π X : *. F X -> (F X -> *) -> *]
--               (mono : ∀ X : *. ∀ P : F X -> *. MonoD F ( *. λ x : F X. FP X x P) mono)
--               : MonoD F (ForallFP' F FP) mono :=
--   Λ X, Y : *. λ c : Cast X Y. λ x : F X.
--   intrCast ?(ForallFP' F FP X x) ?(ForallFP' F FP Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x))
--     ?(λ z : ForallFP' F FP X x. Λ P : F Y -> *.
--       elimCast ?(FP X x P) ?(FP Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P)
--         ?(mono ?X ?x ?P ?X ?Y c) (z ?P))
--     ?(beta ?(ForallFP' F FP X x)).

let AntiP' (F : * -> *) (mono : Mono F) (FP : Π X : *. F X -> (F X -> *) -> *) : * :=
  ∀ X, Y : *. Π c : Cast X Y. ∀ x : F X. ∀ P : F Y -> *.
    Cast (FP Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P)
         (FP X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x'))).

let MonoP' (F : * -> *) (mono : Mono F) (FP : Π X : *. F X -> (F X -> *) -> *) : * :=
  ∀ X, Y : *. Π c : Cast X Y. ∀ x : F X. ∀ P : F Y -> *.
    Cast (FP X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')))
         (FP Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P).

let ForallPFun (F : * -> *) (FP : Π X : *. F X -> (F X -> *) -> *) : Π X : *. F X -> * :=
  λ X : *. λ x : F X. ∀ P : F X -> *. FP X x P.

let ConvMonoPFun [F : * -> *] (mono : Mono F)
                 [FP : Π X : *. F X -> (F X -> *) -> *] (mono' : MonoP' F mono FP)
                 : MonoD F (ForallPFun F FP) mono :=
  Λ X, Y : *. λ c : Cast X Y. λ x : F X.
  intrCast ?(ForallPFun F FP X x) ?(ForallPFun F FP Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x))
    ?(λ z : ForallPFun F FP X x. Λ P : F Y -> *. elimCast
      ?(FP X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')))
      ?(FP Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P) ?(mono' ?X ?Y c ?x ?P)
      (z ?(λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x'))))
    ?(beta ?(ForallPFun F FP X x)).

let ArrPFun (F : * -> *) (F1, F2 : Π X : *. F X -> (F X -> *) -> *) :=
  λ X : *. λ x : F X. λ P : F X -> *. F1 X x P -> F2 X x P.

-- let ArrPFun' (F, F1 : * -> *) (F2 : Π X : *. F X -> (F X -> *) -> *) :=
--   λ X : *. λ x : F X. λ P : F X -> *. F1 X P -> F2 X x P.

let antiSumP [F : * -> *] [FP1, FP2 : Π X : *. F X -> (F X -> *) -> *]
             (mono : Mono F) (anti1 : AntiP' F mono FP1) (mono2 : MonoP' F mono FP2)
             : MonoP' F mono (ArrPFun F FP1 FP2) :=
  Λ X, Y : *. λ c : Cast X Y. Λ x : F X. Λ P : F Y -> *.
  intrCast ?(ArrPFun F FP1 FP2 X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')))
           ?(ArrPFun F FP1 FP2 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P)
    ?(λ z : ArrPFun F FP1 FP2 X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')).
      λ x' : FP1 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P.
        elimCast ?(FP2 X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')))
                 ?(FP2 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P)
                 ?(mono2 ?X ?Y c ?x ?P) $
        z (elimCast ?(FP1 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P)
                    ?(FP1 X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')))
                    ?(anti1 ?X ?Y c ?x ?P) x'))
    ?(beta ?(ArrPFun F FP1 FP2 X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')))).

let AntiToAntiP (F : * -> *) (mono : Mono F) (FP : * -> *) (anti : Anti FP)
  : AntiP' F mono (λ X : *. λ x : F X. λ P : F X -> *. FP X) :=
  Λ X, Y : *. λ c : Cast X Y. Λ x : F X. Λ P : F Y -> *.
    anti ?X ?Y c.

let antiArrP [F : * -> *] [FP1, FP2 : Π X : *. F X -> (F X -> *) -> *]
             (mono : Mono F) (mono1 : MonoP' F mono FP1) (anti2 : AntiP' F mono FP2)
             : AntiP' F mono (ArrPFun F FP1 FP2) :=
  Λ X, Y : *. λ c : Cast X Y. Λ x : F X. Λ P : F Y -> *.
  intrCast ?(ArrPFun F FP1 FP2 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P)
           ?(ArrPFun F FP1 FP2 X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')))
    ?(λ z : ArrPFun F FP1 FP2 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P.
      λ x' : FP1 X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')).
        elimCast ?(FP2 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P)
                 ?(FP2 X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')))
                 ?(anti2 ?X ?Y c ?x ?P) $
        z (elimCast ?(FP1 X x (λ x' : F X. P (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x')))
                    ?(FP1 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P)
                    ?(mono1 ?X ?Y c ?x ?P) x'))
    ?(beta ?(ArrPFun F FP1 FP2 Y (elimCast ?(F X) ?(F Y) ?(mono ?X ?Y c) x) P)).
