let modulePrefix := [[stringCons κm] [[stringCons κo] [[stringCons κd] [[stringCons κP] [[stringCons κr] [[stringCons κe] [[stringCons κf] [[stringCons κi] [[stringCons κx] [[stringCons κ|] stringNil]]]]]]]]]] : String.
let ModuleName := [List String] : *.
let moduleNameEq := λ n : ModuleName λ n' : ModuleName [[[<listEq String> stringEq] n] n'] : Π n : ModuleName Π n' : ModuleName Bool.
let ModuleNameToName := λ n : ModuleName [stringConcat [[<intersperse String> [[stringCons κ:] stringNil]] n]] : Π n : ModuleName String.
let quoteModuleName := λ n : ModuleName [[quoteTermList [[appLTerm [sVarTerm [[stringCons κS] [[stringCons κt] [[stringCons κr] [[stringCons κi] [[stringCons κn] [[stringCons κg] stringNil]]]]]]]] <nil App>]] [[<<map String> Term> quoteString] n]] : Π n : ModuleName Term.
let ModuleInfo := [[Product ModuleName] [[Product Nat] Telescope]] : *.
let ModuleInfoName := λ i : ModuleInfo [<<<pr31 ModuleName> Nat> Telescope> i] : Π i : ModuleInfo ModuleName.
let ModuleInfoVersion := λ i : ModuleInfo [<<<pr32 ModuleName> Nat> Telescope> i] : Π i : ModuleInfo Nat.
let ModuleInfoTelescope := λ i : ModuleInfo [<<<pr33 ModuleName> Nat> Telescope> i] : Π i : ModuleInfo Telescope.
let mkModuleInfo := λ name : ModuleName λ version : Nat λ t : Telescope [[[<<<mkTripleProduct ModuleName> Nat> Telescope> name] version] t] : Π name : ModuleName Π version : Nat Π t : Telescope ModuleInfo.
let mkModulePrefix := λ i : ModuleInfo [stringConcat [[<cons String> modulePrefix] [[<cons String> [ModuleNameToName [ModuleInfoName i]]] [[<cons String> [showNatDecimal [ModuleInfoVersion i]]] <nil String>]]]] : Π i : ModuleInfo String.
let mkModuleContentPrefix := λ i : ModuleInfo [[stringApp [mkModulePrefix i]] [[stringCons κ|] stringNil]] : Π i : ModuleInfo String.
let Module := [[Product ModuleInfo] [List String]] : *.
let ModuleModuleInfo := λ m : Module [<<pr1 ModuleInfo> [List String]> m] : Π m : Module ModuleInfo.
let ModuleContents := λ m : Module [<<pr2 ModuleInfo> [List String]> m] : Π m : Module [List String].
let ModuleModuleName := λ m : Module [ModuleInfoName [ModuleModuleInfo m]] : Π m : Module ModuleName.
let ModuleVersion := λ m : Module [ModuleInfoVersion [ModuleModuleInfo m]] : Π m : Module Nat.
let ModuleTelescope := λ m : Module [ModuleInfoTelescope [ModuleModuleInfo m]] : Π m : Module Telescope.
let mkModule := λ name : ModuleName λ version : Nat λ t : Telescope λ contents : [List String] [[<<prodPair ModuleInfo> [List String]> [[[mkModuleInfo name] version] t]] contents] : Π name : ModuleName Π version : Nat Π t : Telescope Π contents : [List String] Module.
let mkInitModule := λ name : ModuleName λ version : Nat λ t : Telescope [[[[mkModule name] version] t] <nil String>] : Π name : ModuleName Π version : Nat Π t : Telescope Module.
let mkTempModuleName' := λ m : Module λ n : Nat [[stringApp [mkModulePrefix [ModuleModuleInfo m]]] [[stringCons κ|] [[stringCons κ|] [[stringApp [showNatDecimal n]] stringNil]]]] : Π m : Module Π n : Nat String.
let mkTempModuleName := λ m : Module [[mkTempModuleName' m] [<length String> [ModuleContents m]]] : Π m : Module String.
let mkTempModuleNameSuc := λ m : Module [[mkTempModuleName' m] [suc [<length String> [ModuleContents m]]]] : Π m : Module String.
let mkModuleName := λ m : Module [[stringApp [mkModulePrefix [ModuleModuleInfo m]]] [[stringCons κ|] [[stringCons κ|] stringNil]]] : Π m : Module String.
let ModuleDict := [[Product Nat] Π _ : ModuleName [Maybe [[Product Bool] Module]]] : *.
let mkModuleDict := <<prodPair Nat> Π _ : ModuleName [Maybe [[Product Bool] Module]]> : Π a : Nat Π b : Π _ : ModuleName [Maybe [[Product Bool] Module]] [[Product Nat] Π _ : ModuleName [Maybe [[Product Bool] Module]]].
let ModuleDictVersion := <<pr1 Nat> Π _ : ModuleName [Maybe [[Product Bool] Module]]> : Π _ : [[Product Nat] Π _ : ModuleName [Maybe [[Product Bool] Module]]] Nat.
let ModuleDictDict := <<pr2 Nat> Π _ : ModuleName [Maybe [[Product Bool] Module]]> : Π _ : [[Product Nat] Π _ : ModuleName [Maybe [[Product Bool] Module]]] Π _ : ModuleName [Maybe [[Product Bool] Module]].
let emptyModuleDict := [[mkModuleDict zero] λ _ : ModuleName <nothing [[Product Bool] Module]>] : ModuleDict.
let insertModuleDict := λ m : Module λ dict : ModuleDict [[mkModuleDict [suc [ModuleDictVersion dict]]] λ n : ModuleName [[[<ifthenelse [Maybe [[Product Bool] Module]]> [[moduleNameEq n] [ModuleModuleName m]]] [<just [[Product Bool] Module]> [[<<prodPair Bool> Module> true] m]]] [[ModuleDictDict dict] n]]] : Π m : Module Π dict : ModuleDict ModuleDict.
let lookupModuleDict := λ k : ModuleName λ dict : ModuleDict [[ModuleDictDict dict] k] : Π k : ModuleName Π dict : ModuleDict [Maybe [[Product Bool] Module]].
let unloadModuleFromDict := λ m : ModuleName λ dict : ModuleDict [[[<<maybe [[Product Bool] Module]> [[Product Nat] Π _ : ModuleName [Maybe [[Product Bool] Module]]]> dict] λ x : [[Product Bool] Module] [[mkModuleDict [suc [ModuleDictVersion dict]]] λ n : ModuleName [[[<ifthenelse [Maybe [[Product Bool] Module]]> [[moduleNameEq n] m]] [<just [[Product Bool] Module]> [[<<<productMap1 Bool> Module> Bool> λ _ : Bool false] x]]] [[ModuleDictDict dict] n]]]] [[ModuleDictDict dict] m]] : Π m : ModuleName Π dict : ModuleDict ModuleDict.
let mkModuleDictName' := λ v : Nat λ d : ModuleDict [[stringApp modulePrefix] [[stringCons κ|] [[stringCons κ|] [[stringCons κD] [[stringCons κi] [[stringCons κc] [[stringCons κt] [[stringApp [showNatDecimal v]] stringNil]]]]]]]] : Π v : Nat Π d : ModuleDict String.
let mkModuleDictName := λ d : ModuleDict [[mkModuleDictName' [ModuleDictVersion d]] d] : Π d : ModuleDict String.
let mkModuleDictNameSuc := λ d : ModuleDict [[mkModuleDictName' [suc [ModuleDictVersion d]]] d] : Π d : ModuleDict String.