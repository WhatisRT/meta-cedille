let mkInfixData' := λ s : String λ s' : String [[mkInfixData s] λ t : Term λ t' : Term [[appLTerm [sVarTerm s']] [[<cons App> [[mkApp false] t]] [[<cons App> [[mkApp false] t']] <nil App>]]]] : Π s : String Π s' : String InfixData.
let mkMacroInfixData := λ s : String λ n1 : String λ n2 : String λ subst : Term [[mkInfixData s] λ t : Term λ t' : Term [[appLTerm [[[lambdaTerm n1] [[appLTerm [sVarTerm [[stringCons κT] [[stringCons κe] [[stringCons κr] [[stringCons κm] stringNil]]]]]] <nil App>]] [[[lambdaTerm n2] [[appLTerm [sVarTerm [[stringCons κT] [[stringCons κe] [[stringCons κr] [[stringCons κm] stringNil]]]]]] <nil App>]] subst]]] [[<cons App> [[mkApp false] t]] [[<cons App> [[mkApp false] t']] <nil App>]]]] : Π s : String Π n1 : String Π n2 : String Π subst : Term InfixData.
let defineInfix := λ symbol : String λ n1 : String λ n2 : String λ macro : Term [[seqNewStmt [letInfoToNewStmt [[[mkLetInfo [[stringApp [[stringCons κi] [[stringCons κn] [[stringCons κi] [[stringCons κt] [[stringCons κ$] [[stringCons κi] [[stringCons κn] [[stringCons κf] [[stringCons κi] [[stringCons κx] [[stringCons κ$] stringNil]]]]]]]]]]]] symbol]] [[appLTerm [sVarTerm [[stringCons κm] [[stringCons κk] [[stringCons κI] [[stringCons κn] [[stringCons κf] [[stringCons κi] [[stringCons κx] [[stringCons κD] [[stringCons κa] [[stringCons κt] [[stringCons κa] stringNil]]]]]]]]]]]]] [[<cons App> [[mkApp false] [quoteString symbol]]] [[<cons App> [[mkApp false] [[[lambdaTerm n1] [[appLTerm [sVarTerm [[stringCons κT] [[stringCons κe] [[stringCons κr] [[stringCons κm] stringNil]]]]]] <nil App>]] [[[lambdaTerm n2] [[appLTerm [sVarTerm [[stringCons κT] [[stringCons κe] [[stringCons κr] [[stringCons κm] stringNil]]]]]] <nil App>]] macro]]]] <nil App>]]]] [<just Term> [[appLTerm [sVarTerm [[stringCons κI] [[stringCons κn] [[stringCons κf] [[stringCons κi] [[stringCons κx] [[stringCons κD] [[stringCons κa] [[stringCons κt] [[stringCons κa] stringNil]]]]]]]]]]] <nil App>]]]]] reloadMEnv] : Π symbol : String Π n1 : String Π n2 : String Π macro : Term [Eval Unit].
let defineInfix' := λ symbol : String λ macro : String [[seqNewStmt [letInfoToNewStmt [[[mkLetInfo [[stringApp [[stringCons κi] [[stringCons κn] [[stringCons κi] [[stringCons κt] [[stringCons κ$] [[stringCons κi] [[stringCons κn] [[stringCons κf] [[stringCons κi] [[stringCons κx] [[stringCons κ$] stringNil]]]]]]]]]]]] symbol]] [[appLTerm [sVarTerm [[stringCons κm] [[stringCons κk] [[stringCons κI] [[stringCons κn] [[stringCons κf] [[stringCons κi] [[stringCons κx] [[stringCons κD] [[stringCons κa] [[stringCons κt] [[stringCons κa] [[stringCons κ'] stringNil]]]]]]]]]]]]]] [[<cons App> [[mkApp false] [quoteString symbol]]] [[<cons App> [[mkApp false] [quoteString macro]]] <nil App>]]]] [<just Term> [[appLTerm [sVarTerm [[stringCons κI] [[stringCons κn] [[stringCons κf] [[stringCons κi] [[stringCons κx] [[stringCons κD] [[stringCons κa] [[stringCons κt] [[stringCons κa] stringNil]]]]]]]]]]] <nil App>]]]]] reloadMEnv] : Π symbol : String Π macro : String [Eval Unit].
let init$newStmt'$infix^space^=doublequote=_newstring_=doublequote=^space^=colon==equal=^space^_string_=dot= := λ s : String λ s' : String [[defineInfix' s] s'] : Π s : String Π s' : String [Eval Unit].
let init$newStmt'$infixMacro^space^_string_^space^=doublequote=_newstring_=doublequote=^space^_string_^space^=colon==equal=^space^_multiTerm_=dot= := λ n1 : String λ s : String λ n2 : String λ subst : Term [[[[defineInfix s] n1] n2] [quoteTerm subst]] : Π n1 : String Π s : String Π n2 : String Π subst : Term [Eval Unit].