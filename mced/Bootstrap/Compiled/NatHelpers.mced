let one := Λ X : * λ z : X λ s : Π _ : X X [s [[<zero X> z] s]] : Nat.
let two := Λ X : * λ z : X λ s : Π _ : X X [s [[<one X> z] s]] : Nat.
let three := Λ X : * λ z : X λ s : Π _ : X X [s [[<two X> z] s]] : Nat.
let four := Λ X : * λ z : X λ s : Π _ : X X [s [[<three X> z] s]] : Nat.
let five := Λ X : * λ z : X λ s : Π _ : X X [s [[<four X> z] s]] : Nat.
let six := Λ X : * λ z : X λ s : Π _ : X X [s [[<five X> z] s]] : Nat.
let seven := Λ X : * λ z : X λ s : Π _ : X X [s [[<six X> z] s]] : Nat.
let eight := Λ X : * λ z : X λ s : Π _ : X X [s [[<seven X> z] s]] : Nat.
let nine := Λ X : * λ z : X λ s : Π _ : X X [s [[<eight X> z] s]] : Nat.
let ten := Λ X : * λ z : X λ s : Π _ : X X [s [[<nine X> z] s]] : Nat.
let add := λ n : Nat λ m : Nat [[[<recursionNat' Nat> n] λ rec : Nat [suc rec]] m] : Π n : Nat Π m : Nat Nat.
let mul := λ n : Nat λ m : Nat [[[<recursionNat' Nat> zero] λ rec : Nat [[add rec] n]] m] : Π n : Nat Π m : Nat Nat.
let pred := λ n : Nat [[[<recursionNat Nat> zero] λ n' : Nat λ _ : Nat n'] n] : Π n : Nat Nat.
let sub := λ n : Nat λ m : Nat [[[<recursionNat' Nat> n] λ rec : Nat [pred rec]] m] : Π n : Nat Π m : Nat Nat.
let isZero := λ n : Nat [[<n Bool> true] λ _ : Bool false] : Π _ : Nat Bool.
let natEq := λ n : Nat [[<n Π n : Nat Bool> isZero] λ rec : Π _ : Nat Bool [[<recursionNat Bool> false] λ n : Nat λ _ : Bool [rec n]]] : Π _ : Nat Π _ : Nat Bool.
let natLeq := λ n : Nat [[<n Π n : Nat Bool> λ _ : Nat true] λ rec : Π _ : Nat Bool [[<recursionNat Bool> false] λ n : Nat λ _ : Bool [rec n]]] : Π _ : Nat Π _ : Nat Bool.
let natLt := λ m : Nat λ n : Nat [[natLeq [suc m]] n] : Π m : Nat Π n : Nat Bool.
let Dec := ∀ X : * Π _ : X Π _ : X Π _ : X Π _ : X Π _ : X Π _ : X Π _ : X Π _ : X Π _ : X Π _ : X X : *.
let Dec0 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d0 : Dec.
let Dec1 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d1 : Dec.
let Dec2 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d2 : Dec.
let Dec3 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d3 : Dec.
let Dec4 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d4 : Dec.
let Dec5 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d5 : Dec.
let Dec6 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d6 : Dec.
let Dec7 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d7 : Dec.
let Dec8 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d8 : Dec.
let Dec9 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d9 : Dec.
let showDec := λ d : Dec [[[[[[[[[[<d String> [[stringCons κ0] stringNil]] [[stringCons κ1] stringNil]] [[stringCons κ2] stringNil]] [[stringCons κ3] stringNil]] [[stringCons κ4] stringNil]] [[stringCons κ5] stringNil]] [[stringCons κ6] stringNil]] [[stringCons κ7] stringNil]] [[stringCons κ8] stringNil]] [[stringCons κ9] stringNil]] : Π d : Dec String.
let baseListToNat := Λ B : * λ digitToNat : Π _ : B Nat λ ds : [List B] λ base : Nat [[<[<reverse B> ds] Nat> zero] λ d : B λ rec : Nat [[add [[mul rec] base]] [digitToNat d]]] : ∀ B : * Π digitToNat : Π _ : B Nat Π ds : [List B] Π base : Nat Nat.
let boolToNat := λ b : Bool [[[<ifthenelse Nat> b] one] zero] : Π b : Bool Nat.
let decToNat := λ d : Dec [[[[[[[[[[<d Nat> zero] one] two] three] four] five] six] seven] eight] nine] : Π d : Dec Nat.
let boolListToNat := λ bs : [List Bool] [[[<baseListToNat Bool> boolToNat] bs] two] : Π bs : [List Bool] Nat.
let decListToNat := λ ds : [List Dec] [[[<baseListToNat Dec> decToNat] ds] ten] : Π ds : [List Dec] Nat.
let index'ToDigits := λ i : DBIndex' [[[[[[[[[[[<i [List Dec]> <nil Dec>] [<cons Dec> Dec0]] [<cons Dec> Dec1]] [<cons Dec> Dec2]] [<cons Dec> Dec3]] [<cons Dec> Dec4]] [<cons Dec> Dec5]] [<cons Dec> Dec6]] [<cons Dec> Dec7]] [<cons Dec> Dec8]] [<cons Dec> Dec9]] : Π i : DBIndex' [List Dec].
let indexToDigits := λ i : DBIndex [[[[[[[[[[<i [List Dec]> λ i' : DBIndex' [[<cons Dec> Dec0] [index'ToDigits i']]] λ i' : DBIndex' [[<cons Dec> Dec1] [index'ToDigits i']]] λ i' : DBIndex' [[<cons Dec> Dec2] [index'ToDigits i']]] λ i' : DBIndex' [[<cons Dec> Dec3] [index'ToDigits i']]] λ i' : DBIndex' [[<cons Dec> Dec4] [index'ToDigits i']]] λ i' : DBIndex' [[<cons Dec> Dec5] [index'ToDigits i']]] λ i' : DBIndex' [[<cons Dec> Dec6] [index'ToDigits i']]] λ i' : DBIndex' [[<cons Dec> Dec7] [index'ToDigits i']]] λ i' : DBIndex' [[<cons Dec> Dec8] [index'ToDigits i']]] λ i' : DBIndex' [[<cons Dec> Dec9] [index'ToDigits i']]] : Π i : DBIndex [List Dec].
let indexToNat := λ i : DBIndex [decListToNat [indexToDigits i]] : Π i : DBIndex Nat.
let incrementBoolList := λ l : [List Bool] [<<pr2 [List Bool]> [List Bool]> [[<l [[Product [List Bool]] [List Bool]]> [[<<prodPair [List Bool]> [List Bool]> <nil Bool>] [[<cons Bool> true] <nil Bool>]]] λ a : Bool [<<<recursionProduct [List Bool]> [List Bool]> [[Product [List Bool]] [List Bool]]> λ p1 : [List Bool] λ p2 : [List Bool] [[<<prodPair [List Bool]> [List Bool]> [[<cons Bool> a] p1]] [[[λ b : Bool λ bs : [List Bool] λ rec : [List Bool] [[[<ifthenelse [List Bool]> b] [[<cons Bool> false] rec]] [[<cons Bool> true] bs]] a] p1] p2]]]]] : Π _ : [List Bool] [List Bool].
let incrementDecList := λ l : [List Dec] [<<pr2 [List Dec]> [List Dec]> [[<l [[Product [List Dec]] [List Dec]]> [[<<prodPair [List Dec]> [List Dec]> <nil Dec>] [[<cons Dec> Dec1] <nil Dec>]]] λ a : Dec [<<<recursionProduct [List Dec]> [List Dec]> [[Product [List Dec]] [List Dec]]> λ p1 : [List Dec] λ p2 : [List Dec] [[<<prodPair [List Dec]> [List Dec]> [[<cons Dec> a] p1]] [[[λ d : Dec λ ds : [List Dec] λ rec : [List Dec] [[[[[[[[[[<d [List Dec]> [[<cons Dec> Dec1] ds]] [[<cons Dec> Dec2] ds]] [[<cons Dec> Dec3] ds]] [[<cons Dec> Dec4] ds]] [[<cons Dec> Dec5] ds]] [[<cons Dec> Dec6] ds]] [[<cons Dec> Dec7] ds]] [[<cons Dec> Dec8] ds]] [[<cons Dec> Dec9] ds]] [[<cons Dec> Dec0] rec]] a] p1] p2]]]]] : Π _ : [List Dec] [List Dec].
let natToBoolList := λ n : Nat [[<n [List Bool]> [[<cons Bool> false] <nil Bool>]] λ rec : [List Bool] [incrementBoolList rec]] : Π _ : Nat [List Bool].
let natToDecList := λ n : Nat [[<n [List Dec]> [[<cons Dec> Dec0] <nil Dec>]] λ rec : [List Dec] [incrementDecList rec]] : Π _ : Nat [List Dec].
let showListOfDigitsBased := Λ X : * λ showX : Π _ : X String λ l : [List X] [stringConcat [[<<map X> String> showX] [<reverse X> l]]] : ∀ X : * Π showX : Π _ : X String Π l : [List X] String.
let showNatBinary := λ n : Nat [[<showListOfDigitsBased Bool> λ b : Bool [[[<ifthenelse String> b] [[stringCons κ1] stringNil]] [[stringCons κ0] stringNil]]] [natToBoolList n]] : Π n : Nat String.
let showNatDecimal := λ n : Nat [[<showListOfDigitsBased Dec> showDec] [natToDecList n]] : Π n : Nat String.
let quoteNat := λ n : Nat [[[<recursionNat Term> [[appLTerm [sVarTerm [[stringCons κz] [[stringCons κe] [[stringCons κr] [[stringCons κo] stringNil]]]]]] <nil App>]] λ _ : Nat λ rec : Term [[appLTerm [sVarTerm [[stringCons κs] [[stringCons κu] [[stringCons κc] stringNil]]]]] [[<cons App> [[mkApp false] rec]] <nil App>]]] n] : Π n : Nat Term.