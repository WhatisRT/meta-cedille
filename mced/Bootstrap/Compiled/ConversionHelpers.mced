let stringListToList := λ l : init$stringList [[<l [List String]> <nil String>] λ s : String λ rec : [List String] [[<cons String> s] rec]] : Π l : init$stringList [List String].
let listToStringList := λ l : [List String] [<<pr2 [List String]> init$stringList> [[<l [[Product [List String]] init$stringList]> [[<<prodPair [List String]> init$stringList> <nil String>] init$stringList$nil]] λ a : String λ p : [[Product [List String]] init$stringList] [[<<prodPair [List String]> init$stringList> [[<cons String> a] [<<pr1 [List String]> init$stringList> p]]] [[[λ s : String λ _ : [List String] λ rec : init$stringList [[init$stringList$cons s] rec] a] [<<pr1 [List String]> init$stringList> p]] [<<pr2 [List String]> init$stringList> p]]]]] : Π _ : [List String] init$stringList.
let nothingTerm := Λ X : * λ v : Π _ : Var X λ s : Π _ : Sort X λ b : Π _ : Binder Π _ : String Π _ : X Π _ : X X λ a : Π _ : X Π _ : [List [[Product Bool] X]] X λ k : Π _ : Char X λ x : X λ u : Π _ : X X [[a [[[[[[[<quoteSq X> v] s] b] a] k] x] u]] [[<<map [[Product Bool] Term]> [[Product Bool] X]> [<<<recursionProduct Bool> Term> [[Product Bool] X]> λ b' : Bool λ t : Term [[<<prodPair Bool> X> b'] [[[[[[[<t X> v] s] b] a] k] x] u]]]] <nil App>]] : Term.
let nothingTerm1 := λ _ : Term nothingTerm : Π _ : Term Term.
let nothingTerm2 := λ _ : Term λ _ : Term nothingTerm : Π _ : Term Π _ : Term Term.
let nothingTerm3 := λ _ : Term λ _ : Term λ _ : Term nothingTerm : Π _ : Term Π _ : Term Π _ : Term Term.
let initTermToTerm := λ t : iTerm [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[<t Term> varTerm] sortTerm] λ _ : init$const [sVarTerm [[stringCons κC] [[stringCons κh] [[stringCons κa] [[stringCons κr] stringNil]]]]]] nothingTerm1] nothingTerm1] nothingTerm2] nothingTerm2] nothingTerm1] appSingle] appSingleE] λ _ : Term λ _ : String λ _ : Term λ _ : Term nothingTerm] λ s : String λ t : Term λ t' : Term [[[[binderTerm forallBinder] s] t] t']] λ s : String λ t : Term λ t' : Term [[[[binderTerm piBinder] s] t] t']] λ _ : String λ _ : Term λ _ : Term nothingTerm] λ s : String λ t : Term λ t' : Term [[[[binderTerm lambdaBinder] s] t] t']] λ s : String λ t : Term λ t' : Term [[[[binderTerm LambdaBinder] s] t] t']] λ _ : Term λ _ : Term λ _ : String λ _ : Term nothingTerm] nothingTerm3] nothingTerm2] nothingTerm1] nothingTerm2] nothingTerm1] nothingTerm2] nothingTerm3] nothingTerm3] nothingTerm2] nothingTerm2] nothingTerm3] nothingTerm1] nothingTerm1] nothingTerm1] nothingTerm2] nothingTerm1] nothingTerm] nothingTerm1] nothingTerm2] nothingTerm] nothingTerm] λ c : Char [charTerm c]] nothingTerm2] : Π t : iTerm Term.
let telescopeFromTypeHelper := λ t : Term [[<<prodPair [List Param]> Term> telNil] t] : Π t : Term [[Product Telescope] Term].
let telCons := λ n : String λ T : Term [<cons [[Product Bool] PreParam]> [[mkParam false] [[mkPreParam n] T]]] : Π n : String Π T : Term Π as : [List [[Product Bool] PreParam]] [List [[Product Bool] PreParam]].
let telConsE := λ n : String λ T : Term [<cons [[Product Bool] PreParam]> [[mkParam true] [[mkPreParam n] T]]] : Π n : String Π T : Term Π as : [List [[Product Bool] PreParam]] [List [[Product Bool] PreParam]].
let telescopeFromType := λ term : Term [<<pr1 [[Product Telescope] Term]> Term> [[[[[[[<term [[Product [[Product Telescope] Term]] Term]> λ v : Var [[<<prodPair [[Product Telescope] Term]> Term> [λ v : Var [telescopeFromTypeHelper [varTerm v]] v]] [varTerm v]]] λ s : Sort [[<<prodPair [[Product Telescope] Term]> Term> [λ s : Sort [telescopeFromTypeHelper [sortTerm s]] s]] [sortTerm s]]] λ b : Binder λ n : String [<<<recursionProduct [[Product Telescope] Term]> Term> Π _ : [[Product [[Product Telescope] Term]] Term] [[Product [[Product Telescope] Term]] Term]> λ T1 : [[Product Telescope] Term] λ T2 : Term [<<<recursionProduct [[Product Telescope] Term]> Term> [[Product [[Product Telescope] Term]] Term]> λ t1 : [[Product Telescope] Term] λ t2 : Term [[<<prodPair [[Product Telescope] Term]> Term> [[[[[[λ b : Binder λ n : String λ t : Term λ t' : Term λ rect : [[Product Telescope] Term] λ rect' : [[Product Telescope] Term] [[[[<b [[Product Telescope] Term]> [telescopeFromTypeHelper [[[lambdaTerm n] t] t']]] [telescopeFromTypeHelper [[[LambdaTerm n] t] t']]] [[<<<productMap1 Telescope> Term> [List [[Product Bool] PreParam]]> [[telCons n] t]] rect']] [[<<<productMap1 Telescope> Term> [List [[Product Bool] PreParam]]> [[telConsE n] t]] rect']] b] n] T2] t2] T1] t1]] [[[[binderTerm b] n] T2] t2]]]]] [<<<recursionProduct [[Product Telescope] Term]> Term> Π _ : [List [[Product Bool] [[Product [[Product Telescope] Term]] Term]]] [[Product [[Product Telescope] Term]] Term]> λ t1 : [[Product Telescope] Term] λ t2 : Term λ l : [List [[Product Bool] [[Product [[Product Telescope] Term]] Term]]] [[<<<recursionProduct [List [[Product Bool] [[Product Telescope] Term]]]> [List [[Product Bool] Term]]> [[Product [[Product Telescope] Term]] Term]> λ l1 : [List [[Product Bool] [[Product Telescope] Term]]] λ l2 : [List [[Product Bool] Term]] [[<<prodPair [[Product Telescope] Term]> Term> [[[[λ t : Term λ app : [List App] λ _ : [[Product Telescope] Term] λ _ : [List [[Product Bool] [[Product Telescope] Term]]] [telescopeFromTypeHelper [[appLTerm t] app]] t2] l2] t1] l1]] [[appLTerm t2] l2]]] [<<<distList Bool> [[Product Telescope] Term]> Term> l]]]] λ c : Char [[<<prodPair [[Product Telescope] Term]> Term> [λ c : Char [telescopeFromTypeHelper [charTerm c]] c]] [charTerm c]]] [[<<prodPair [[Product Telescope] Term]> Term> [telescopeFromTypeHelper unknownTerm]] unknownTerm]] [<<<recursionProduct [[Product Telescope] Term]> Term> [[Product [[Product Telescope] Term]] Term]> λ u1 : [[Product Telescope] Term] λ u2 : Term [[<<prodPair [[Product Telescope] Term]> Term> [[λ u : Term λ _ : [[Product Telescope] Term] [telescopeFromTypeHelper [unquoteTerm u]] u2] u1]] [unquoteTerm u2]]]]] : Π _ : Term [[Product Telescope] Term].