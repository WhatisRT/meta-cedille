let paramToLambda := λ t : Term λ p : Param [[[[[[<ifthenelse Π _ : String Π _ : Term Π _ : Term Term> [paramErased p]] LambdaTerm] lambdaTerm] [paramName p]] [paramType p]] t] : Π t : Term Π p : Param Term.
let foldWithLambdas := λ l : [List Param] [<<pr2 [List Param]> Π _ : Term Term> [[<l [[Product [List Param]] Π _ : Term Term]> [[<<prodPair [List Param]> Π _ : Term Term> <nil Param>] λ b : Term b]] λ a : Param λ p : [[Product [List Param]] Π _ : Term Term] [[<<prodPair [List Param]> Π _ : Term Term> [[<cons Param> a] [<<pr1 [List Param]> Π _ : Term Term> p]]] [[[λ a : Param λ as : [List Param] λ rec : Π _ : Term Term λ b : Term [[paramToLambda [rec b]] a] a] [<<pr1 [List Param]> Π _ : Term Term> p]] [<<pr2 [List Param]> Π _ : Term Term> p]]]]] : Π _ : Telescope Π _ : Term Term.
let paramToPi := λ t : Term λ p : Param [[[[[[<ifthenelse Π _ : String Π _ : Term Π _ : Term Term> [paramErased p]] forallTerm] piTerm] [paramName p]] [paramType p]] t] : Π t : Term Π p : Param Term.
let foldWithPi := λ l : [List Param] [<<pr2 [List Param]> Π _ : Term Term> [[<l [[Product [List Param]] Π _ : Term Term]> [[<<prodPair [List Param]> Π _ : Term Term> <nil Param>] λ b : Term b]] λ a : Param λ p : [[Product [List Param]] Π _ : Term Term] [[<<prodPair [List Param]> Π _ : Term Term> [[<cons Param> a] [<<pr1 [List Param]> Π _ : Term Term> p]]] [[[λ a : Param λ as : [List Param] λ rec : Π _ : Term Term λ b : Term [[paramToPi [rec b]] a] a] [<<pr1 [List Param]> Π _ : Term Term> p]] [<<pr2 [List Param]> Π _ : Term Term> p]]]]] : Π _ : Telescope Π _ : Term Term.
let LetInfo := ∀ X : * Π _ : Π a : String Π _ : [λ _ : String [[Product Term] [Maybe Term]] a] X X : *.
let mkLetInfo := λ a : String λ b : Term λ c : [Maybe Term] [[<<prodPair String> [[Product Term] [Maybe Term]]> a] [[<<prodPair Term> [Maybe Term]> b] c]] : Π _ : String Π _ : Term Π _ : [Maybe Term] LetInfo.
let letInfoName := λ i : LetInfo [<<<pr31 String> Term> [Maybe Term]> i] : Π i : LetInfo String.
let letInfoTerm := λ i : LetInfo [<<<pr32 String> Term> [Maybe Term]> i] : Π i : LetInfo Term.
let letInfoType := λ i : LetInfo [<<<pr33 String> Term> [Maybe Term]> i] : Π i : LetInfo [Maybe Term].
let letInfoHasAnn := λ i : LetInfo [[[<<maybe Term> Bool> false] λ _ : Term true] [letInfoType i]] : Π i : LetInfo Bool.
let appendTelToLetInfo := λ tel : Telescope λ i : LetInfo [[[mkLetInfo [letInfoName i]] [[foldWithLambdas tel] [letInfoTerm i]]] [[<<mapMaybe Term> Term> [foldWithPi tel]] [letInfoType i]]] : Π tel : Telescope Π i : LetInfo LetInfo.
let convertLetInfo := λ i : LetInfo [[[<<maybe Term> [M Unit]> [[primLet [letInfoName i]] [TermToInitTerm [letInfoTerm i]]]] λ type : Term [[[primAnnLet [letInfoName i]] [TermToInitTerm [letInfoTerm i]]] [TermToInitTerm type]]] [letInfoType i]] : Π i : LetInfo [M Unit].
let init$betterLetType$ := Λ X : * λ l : Π _ : Term X λ r : Π _ : ∀ X : * Π x : X X X [r tt] : [[Sum Term] Unit].
let init$betterLetType$^space^_multiTerm_=colon= := λ t : Term [<<inl Term> Unit> t] : Π t : Term [[Sum Term] Unit].
let init$betterLet$_string_^space^_telescope_=colon=_betterLetType_=equal=^space'^_multiTerm_=dot= := λ n : String λ tel : Telescope λ maybeType : [Maybe Term] λ term : Term [[appendTelToLetInfo tel] [[[mkLetInfo n] term] maybeType]] : Π n : String Π tel : Telescope Π maybeType : [Maybe Term] Π term : Term LetInfo.
let init$stmt'$b=minus=let^space^_betterLet_ := λ i : LetInfo [[[<<maybe Term> [M Unit]> [[primLet [letInfoName i]] [TermToInitTerm [letInfoTerm i]]]] λ type : Term [[[primAnnLet [letInfoName i]] [TermToInitTerm [letInfoTerm i]]] [TermToInitTerm type]]] [letInfoType i]] : Π _ : LetInfo [M Unit].