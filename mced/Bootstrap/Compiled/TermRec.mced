let mapAppList := Λ X : * Λ Y : * λ f : Π _ : X Y λ l : [List [[Product Bool] X]] [[<<map [[Product Bool] X]> [[Product Bool] Y]> [<<<recursionProduct Bool> X> [[Product Bool] Y]> λ b : Bool λ x : X [[<<prodPair Bool> Y> b] [f x]]]] l] : ∀ X : * ∀ Y : * Π f : Π _ : X Y Π l : [List [[Product Bool] X]] [List [[Product Bool] Y]].
let distList := Λ X : * Λ Y : * Λ Z : * λ l : [List [[[TripleProduct X] Y] Z]] [[<l [[Product [List [[Product X] Y]]] [List [[Product X] Z]]]> [[<<prodPair [List [[Product X] Y]]> [List [[Product X] Z]]> <nil [[Product X] Y]>] <nil [[Product X] Z]>]] [<<<<recursionTripleProduct X> Y> Z> Π _ : [[Product [List [[Product X] Y]]] [List [[Product X] Z]]] [[Product [List [[Product X] Y]]] [List [[Product X] Z]]]> λ x : X λ y : Y λ z : Z [<<<recursionProduct [List [[Product X] Y]]> [List [[Product X] Z]]> [[Product [List [[Product X] Y]]] [List [[Product X] Z]]]> λ l : [List [[Product X] Y]] λ r : [List [[Product X] Z]] [[<<prodPair [List [[Product X] Y]]> [List [[Product X] Z]]> [[<cons [[Product X] Y]> [[<<prodPair X> Y> x] y]] l]] [[<cons [[Product X] Z]> [[<<prodPair X> Z> x] z]] r]]]]] : ∀ X : * ∀ Y : * ∀ Z : * Π l : [List [[[TripleProduct X] Y] Z]] [[Product [List [[Product X] Y]]] [List [[Product X] Z]]].
let recursionTerm := Λ X : * λ fvar : Π _ : Var X λ fsort : Π _ : Sort X λ fbind : Π _ : Binder Π _ : String Π _ : Term Π _ : Term Π _ : X Π _ : X X λ fapp : Π _ : Term Π _ : [List App] Π _ : X Π _ : [List [[Product Bool] X]] X λ fchar : Π _ : Char X λ funk : X λ funq : Π _ : Term Π _ : X X λ term : Term [<<pr1 X> Term> [[[[[[[<term [[Product X] Term]> λ v : Var [[<<prodPair X> Term> [fvar v]] [varTerm v]]] λ s : Sort [[<<prodPair X> Term> [fsort s]] [sortTerm s]]] λ b : Binder λ n : String [<<<recursionProduct X> Term> Π _ : [[Product X] Term] [[Product X] Term]> λ T1 : X λ T2 : Term [<<<recursionProduct X> Term> [[Product X] Term]> λ t1 : X λ t2 : Term [[<<prodPair X> Term> [[[[[[fbind b] n] T2] t2] T1] t1]] [[[[binderTerm b] n] T2] t2]]]]] [<<<recursionProduct X> Term> Π _ : [List [[Product Bool] [[Product X] Term]]] [[Product X] Term]> λ t1 : X λ t2 : Term λ l : [List [[Product Bool] [[Product X] Term]]] [[<<<recursionProduct [List [[Product Bool] X]]> [List [[Product Bool] Term]]> [[Product X] Term]> λ l1 : [List [[Product Bool] X]] λ l2 : [List [[Product Bool] Term]] [[<<prodPair X> Term> [[[[fapp t2] l2] t1] l1]] [[appLTerm t2] l2]]] [<<<distList Bool> X> Term> l]]]] λ c : Char [[<<prodPair X> Term> [fchar c]] [charTerm c]]] [[<<prodPair X> Term> funk] unknownTerm]] [<<<recursionProduct X> Term> [[Product X] Term]> λ u1 : X λ u2 : Term [[<<prodPair X> Term> [[funq u2] u1]] [unquoteTerm u2]]]]] : ∀ X : * Π fvar : Π _ : Var X Π fsort : Π _ : Sort X Π fbind : Π _ : Binder Π _ : String Π _ : Term Π _ : Term Π _ : X Π _ : X X Π fapp : Π _ : Term Π _ : [List App] Π _ : X Π _ : [List [[Product Bool] X]] X Π fchar : Π _ : Char X Π funk : X Π funq : Π _ : Term Π _ : X X Π term : Term X.
let matchTerm := Λ X : * λ fvar : Π _ : Var X λ fsort : Π _ : Sort X λ fbind : Π _ : Binder Π _ : String Π _ : Term Π _ : Term X λ fapp : Π _ : Term Π _ : [List App] X λ fchar : Π _ : Char X λ funk : X λ funq : Π _ : Term X [[[[[[[<recursionTerm X> fvar] fsort] λ b : Binder λ n : String λ T : Term λ t : Term λ _ : X λ _ : X [[[[fbind b] n] T] t]] λ t : Term λ app : [List App] λ _ : X λ _ : [List [[Product Bool] X]] [[fapp t] app]] fchar] funk] λ t : Term λ _ : X [funq t]] : ∀ X : * Π fvar : Π _ : Var X Π fsort : Π _ : Sort X Π fbind : Π _ : Binder Π _ : String Π _ : Term Π _ : Term X Π fapp : Π _ : Term Π _ : [List App] X Π fchar : Π _ : Char X Π funk : X Π funq : Π _ : Term X Π _ : Term X.
let stripLambda := [[[[[[[<matchTerm [Maybe Term]> λ _ : Var <nothing Term>] λ _ : Sort <nothing Term>] λ b : Binder λ _ : String λ T : Term λ t : Term [[[[<b [Maybe Term]> [<just Term> t]] [<just Term> t]] <nothing Term>] <nothing Term>]] λ _ : Term λ _ : [List App] <nothing Term>] λ _ : Char <nothing Term>] <nothing Term>] λ _ : Term <nothing Term>] : Π _ : Term [Maybe Term].
let stripLambdas := λ n : Nat [[<n Π _ : Term [Maybe Term]> <just Term>] λ rec : Π _ : Term [Maybe Term] λ t : Term [[<<bindMaybe Term> Term> [stripLambda t]] rec]] : Π n : Nat Π _ : Term [Maybe Term].
let stripPi := [[[[[[[<matchTerm [Maybe Term]> λ _ : Var <nothing Term>] λ _ : Sort <nothing Term>] λ b : Binder λ _ : String λ T : Term λ t : Term [[[[<b [Maybe Term]> <nothing Term>] <nothing Term>] [<just Term> t]] <nothing Term>]] λ _ : Term λ _ : [List App] <nothing Term>] λ _ : Char <nothing Term>] <nothing Term>] λ _ : Term <nothing Term>] : Π _ : Term [Maybe Term].
let stripPis := λ n : Nat [[<n Π _ : Term [Maybe Term]> <just Term>] λ rec : Π _ : Term [Maybe Term] λ t : Term [[<<bindMaybe Term> Term> [stripPi t]] rec]] : Π n : Nat Π _ : Term [Maybe Term].
let matchVar := Λ X : * λ def : X λ f : Π _ : Var X λ t : Term [[[[[[[[<matchTerm X> f] λ _ : Sort def] λ _ : Binder λ _ : String λ _ : Term λ _ : Term def] λ _ : Term λ _ : [List App] def] λ _ : Char def] def] λ _ : Term def] t] : ∀ X : * Π def : X Π f : Π _ : Var X Π t : Term X.
let matchApp := Λ X : * λ def : X λ f : Π _ : Term Π _ : [List App] X λ t : Term [[[[[[[[<matchTerm X> λ _ : Var def] λ _ : Sort def] λ _ : Binder λ _ : String λ _ : Term λ _ : Term def] f] λ _ : Char def] def] λ _ : Term def] t] : ∀ X : * Π def : X Π f : Π _ : Term Π _ : [List App] X Π t : Term X.
let recursionTermsDiag := Λ X : * λ fvar : Π _ : Var Π _ : Var X λ fsort : Π _ : Sort Π _ : Sort X λ fbind : Π _ : Binder Π _ : String Π _ : Term Π _ : Term Π _ : Binder Π _ : String Π _ : Term Π _ : Term Π _ : X Π _ : X X λ fapp : Π _ : Term Π _ : [List App] Π _ : Term Π _ : [List App] Π _ : X Π _ : [List X] X λ fchar : Π _ : Char Π _ : Char X λ funk : X λ funq : Π _ : Term Π _ : Term Π _ : X X λ default : Π _ : Term Π _ : Term X [[[[[[[<recursionTerm Π _ : Term X> λ v1 : Var [[[[[[[<recursionTerm X> λ v2 : Var [[fvar v1] v2]] λ s2 : Sort [[default [varTerm v1]] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : X λ _ : X [[default [varTerm v1]] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : X λ _ : [List [[Product Bool] X]] [[default [varTerm v1]] [[appLTerm t2] app2]]] λ c2 : Char [[default [varTerm v1]] [charTerm c2]]] [[default [varTerm v1]] unknownTerm]] λ t2 : Term λ _ : X [[default [varTerm v1]] [unquoteTerm t2]]]] λ s1 : Sort [[[[[[[<recursionTerm X> λ v2 : Var [[default [sortTerm s1]] [varTerm v2]]] λ s2 : Sort [[fsort s1] s2]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : X λ _ : X [[default [sortTerm s1]] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : X λ _ : [List [[Product Bool] X]] [[default [sortTerm s1]] [[appLTerm t2] app2]]] λ c2 : Char [[default [sortTerm s1]] [charTerm c2]]] [[default [sortTerm s1]] unknownTerm]] λ t2 : Term λ _ : X [[default [sortTerm s1]] [unquoteTerm t2]]]] λ b1 : Binder λ n1 : String λ T1 : Term λ t1 : Term λ recT1 : Π _ : Term X λ rect1 : Π _ : Term X [[[[[[[<recursionTerm X> λ v2 : Var [[default [[[[binderTerm b1] n1] T1] t1]] [varTerm v2]]] λ s2 : Sort [[default [[[[binderTerm b1] n1] T1] t1]] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : X λ _ : X [[[[[[[[[[fbind b1] n1] T1] t1] b2] n2] T2] t2] [recT1 T2]] [rect1 t2]]] λ t2 : Term λ app2 : [List App] λ _ : X λ _ : [List [[Product Bool] X]] [[default [[[[binderTerm b1] n1] T1] t1]] [[appLTerm t2] app2]]] λ c2 : Char [[default [[[[binderTerm b1] n1] T1] t1]] [charTerm c2]]] [[default [[[[binderTerm b1] n1] T1] t1]] unknownTerm]] λ t2 : Term λ _ : X [[default [[[[binderTerm b1] n1] T1] t1]] [unquoteTerm t2]]]] λ t1 : Term λ app1 : [List App] λ rect1 : Π _ : Term X λ recapp1 : [List [[Product Bool] Π _ : Term X]] [[[[[[[<recursionTerm X> λ v2 : Var [[default [[appLTerm t1] app1]] [varTerm v2]]] λ s2 : Sort [[default [[appLTerm t1] app1]] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : X λ _ : X [[default [[appLTerm t1] app1]] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : X λ _ : [List [[Product Bool] X]] [[[[[[fapp t1] app1] t2] app2] [rect1 t2]] [[[<<<zipWith [[Product Bool] Π _ : Term X]> [[Product Bool] Term]> X> λ r1 : [[Product Bool] Π _ : Term X] λ r2 : [[Product Bool] Term] [[<<pr2 Bool> Π _ : Term X> r1] [<<pr2 Bool> Term> r2]]] recapp1] app2]]] λ c2 : Char [[default [[appLTerm t1] app1]] [charTerm c2]]] [[default [[appLTerm t1] app1]] unknownTerm]] λ t2 : Term λ _ : X [[default [[appLTerm t1] app1]] [unquoteTerm t2]]]] λ c1 : Char [[[[[[[<recursionTerm X> λ v2 : Var [[default [charTerm c1]] [varTerm v2]]] λ s2 : Sort [[default [charTerm c1]] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : X λ _ : X [[default [charTerm c1]] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : X λ _ : [List [[Product Bool] X]] [[default [charTerm c1]] [[appLTerm t2] app2]]] λ c2 : Char [[fchar c1] c2]] [[default [charTerm c1]] unknownTerm]] λ t2 : Term λ _ : X [[default [charTerm c1]] [unquoteTerm t2]]]] [[[[[[[<recursionTerm X> λ v2 : Var [[default unknownTerm] [varTerm v2]]] λ s2 : Sort [[default unknownTerm] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : X λ _ : X [[default unknownTerm] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : X λ _ : [List [[Product Bool] X]] [[default unknownTerm] [[appLTerm t2] app2]]] λ c2 : Char [[default unknownTerm] [charTerm c2]]] funk] λ t2 : Term λ _ : X [[default unknownTerm] [unquoteTerm t2]]]] λ t1 : Term λ rect1 : Π _ : Term X [[[[[[[<recursionTerm X> λ v2 : Var [[default [unquoteTerm t1]] [varTerm v2]]] λ s2 : Sort [[default [unquoteTerm t1]] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : X λ _ : X [[default [unquoteTerm t1]] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : X λ _ : [List [[Product Bool] X]] [[default [unquoteTerm t1]] [[appLTerm t2] app2]]] λ c2 : Char [[default [unquoteTerm t1]] [charTerm c2]]] [[default [unquoteTerm t1]] unknownTerm]] λ t2 : Term λ rect2 : X [[[funq t1] t2] [rect1 t2]]]] : ∀ X : * Π fvar : Π _ : Var Π _ : Var X Π fsort : Π _ : Sort Π _ : Sort X Π fbind : Π _ : Binder Π _ : String Π _ : Term Π _ : Term Π _ : Binder Π _ : String Π _ : Term Π _ : Term Π _ : X Π _ : X X Π fapp : Π _ : Term Π _ : [List App] Π _ : Term Π _ : [List App] Π _ : X Π _ : [List X] X Π fchar : Π _ : Char Π _ : Char X Π funk : X Π funq : Π _ : Term Π _ : Term Π _ : X X Π default : Π _ : Term Π _ : Term X Π _ : Term Π _ : Term X.