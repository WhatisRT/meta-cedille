let quote$stringNil := Λ X : * λ v : Π _ : Var X λ s : Π _ : Sort X λ b : Π _ : Binder Π _ : String Π _ : X Π _ : X X λ a : Π _ : X Π _ : [List [[Product Bool] X]] X λ k : Π _ : Char X λ x : X λ u : Π _ : X X [v [varString [[stringCons κs] [[stringCons κt] [[stringCons κr] [[stringCons κi] [[stringCons κn] [[stringCons κg] [[stringCons κN] [[stringCons κi] [[stringCons κl] stringNil]]]]]]]]]]] : Term.
let quote$stringCons := Λ X : * λ v : Π _ : Var X λ s : Π _ : Sort X λ b : Π _ : Binder Π _ : String Π _ : X Π _ : X X λ a : Π _ : X Π _ : [List [[Product Bool] X]] X λ k : Π _ : Char X λ x : X λ u : Π _ : X X [v [varString [[stringCons κs] [[stringCons κt] [[stringCons κr] [[stringCons κi] [[stringCons κn] [[stringCons κg] [[stringCons κC] [[stringCons κo] [[stringCons κn] [[stringCons κs] stringNil]]]]]]]]]]]] : Term.
let quoteChar := λ c : Char [charTerm c] : Π c : Char Term.
let quoteString := λ s : String [[<s Term> λ c : Char λ rec : Term [[appSingle [[appSingle quote$stringCons] [quoteChar c]]] rec]] quote$stringNil] : Π s : String Term.
let init$stringchar$!=doublequote=&=newline=! := λ c : Char c : Π c : Char Char.
let init$stringchar$=newline=_stringchar_ := λ c : Char c : Π c : Char Char.
let init$stringchar$=backslash=n := κ
 : Char.
let init$newstring$ := Λ X : * λ sc : Π _ : Char Π _ : X X λ sn : X sn : String.
let init$newstring$_stringchar__newstring_ := λ c : Char λ s : String Λ X : * λ sc : Π _ : Char Π _ : X X λ sn : X [[sc c] [[<s X> sc] sn]] : Π _ : Char Π _ : String String.
let init$singleTerm$=doublequote=_newstring_=doublequote= := λ s : String [[<s Term> λ c : Char λ rec : Term [[appSingle [[appSingle quote$stringCons] [quoteChar c]]] rec]] quote$stringNil] : Π _ : String Term.
let init$intstringchar$!=doublequote=! := λ c : Char c : Π c : Char Char.
let init$intstring$ := Λ X : * λ v : Π _ : Var X λ s : Π _ : Sort X λ b : Π _ : Binder Π _ : String Π _ : X Π _ : X X λ a : Π _ : X Π _ : [List [[Product Bool] X]] X λ k : Π _ : Char X λ x : X λ u : Π _ : X X [[a [[[[[[[<[sVarTerm [[stringCons κs] [[stringCons κt] [[stringCons κr] [[stringCons κi] [[stringCons κn] [[stringCons κg] [[stringCons κN] [[stringCons κi] [[stringCons κl] stringNil]]]]]]]]]] X> v] s] b] a] k] x] u]] [[<<map [[Product Bool] Term]> [[Product Bool] X]> [<<<recursionProduct Bool> Term> [[Product Bool] X]> λ b' : Bool λ t : Term [[<<prodPair Bool> X> b'] [[[[[[[<t X> v] s] b] a] k] x] u]]]] <nil App>]] : Term.
let init$intstring$=dollar==lbrace=^space^_multiTerm_=rbrace=_intstring_ := λ t : Term λ t' : Term [[appLTerm [sVarTerm [[stringCons κs] [[stringCons κt] [[stringCons κr] [[stringCons κi] [[stringCons κn] [[stringCons κg] [[stringCons κA] [[stringCons κp] [[stringCons κp] stringNil]]]]]]]]]]] [[<cons App> [[mkApp false] t]] [[<cons App> [[mkApp false] t']] <nil App>]]] : Π t : Term Π t' : Term Term.
let init$intstring$_intstringchar__intstring_ := λ c : Char λ t : Term [[appLTerm [sVarTerm [[stringCons κs] [[stringCons κt] [[stringCons κr] [[stringCons κi] [[stringCons κn] [[stringCons κg] [[stringCons κC] [[stringCons κo] [[stringCons κn] [[stringCons κs] stringNil]]]]]]]]]]]] [[<cons App> [[mkApp false] [quoteChar c]]] [[<cons App> [[mkApp false] t]] <nil App>]]] : Π c : Char Π t : Term Term.
let init$singleTerm$=phi==doublequote=_intstring_=doublequote= := λ t : Term t : Π _ : Term Term.
let showBool := λ b : Bool [[[<ifthenelse String> b] [[stringCons κt] [[stringCons κr] [[stringCons κu] [[stringCons κe] stringNil]]]]] [[stringCons κf] [[stringCons κa] [[stringCons κl] [[stringCons κs] [[stringCons κe] stringNil]]]]]] : Π b : Bool String.