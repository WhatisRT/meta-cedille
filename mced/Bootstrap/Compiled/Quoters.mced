let quoteProduct := Λ A : * Λ B : * λ quotedA : Term λ quotedB : Term λ quoteA : Π _ : A Term λ quoteB : Π _ : B Term [<<<recursionProduct A> B> Term> λ a : A λ b : B [[appLTerm [sVarTerm [[stringCons κp] [[stringCons κr] [[stringCons κo] [[stringCons κd] [[stringCons κP] [[stringCons κa] [[stringCons κi] [[stringCons κr] stringNil]]]]]]]]]] [[<cons App> [[mkApp true] quotedA]] [[<cons App> [[mkApp true] quotedB]] [[<cons App> [[mkApp false] [quoteA a]]] [[<cons App> [[mkApp false] [quoteB b]]] <nil App>]]]]]] : ∀ A : * ∀ B : * Π quotedA : Term Π quotedB : Term Π quoteA : Π _ : A Term Π quoteB : Π _ : B Term Π _ : [[Product A] B] Term.
let quoteList := Λ X : * λ quotedX : Term λ quoteX : Π _ : X Term [[<<recursionList X> Term> [[appLTerm [sVarTerm [[stringCons κn] [[stringCons κi] [[stringCons κl] stringNil]]]]] [[<cons App> [[mkApp true] quotedX]] <nil App>]]] λ x : X λ _ : [List X] λ rec : Term [[appLTerm [sVarTerm [[stringCons κc] [[stringCons κo] [[stringCons κn] [[stringCons κs] stringNil]]]]]] [[<cons App> [[mkApp true] quotedX]] [[<cons App> [[mkApp false] [quoteX x]]] [[<cons App> [[mkApp false] rec]] <nil App>]]]]] : ∀ X : * Π quotedX : Term Π quoteX : Π _ : X Term Π _ : [List X] Term.