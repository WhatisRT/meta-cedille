let genEscapeCode := Î» s : String [[stringCons Îº] [[stringCons Îº[] [[stringApp s] [[stringCons Îºm] stringNil]]]] : Î  s : String String.
let resetCode := [genEscapeCode [[stringCons Îº0] stringNil]] : String.
let backspaceCode := [[stringCons Îº] stringNil] : String.
let undoPrint := Î» s : String [stringConcat [[<replicate String> backspaceCode] [stringLength s]]] : Î  s : String String.
let evalWithProgress := Î› T : * Î» progress : String Î» done : String Î» x : [Eval T] [[<<seqEval Unit> T> [printEval progress]] [[<<bindEval T> T> x] Î» x' : T [[<<seqEval Unit> T> [[<<seqEval Unit> Unit> [printEval [undoPrint progress]]] [printEval done]]] [<pureEval T> x']]]] : âˆ€ T : * Î  progress : String Î  done : String Î  x : [Eval T] [Eval T].
let ANSI8Color := âˆ€ X : * Î  _ : X Î  _ : X Î  _ : X Î  _ : X Î  _ : X Î  _ : X Î  _ : X Î  _ : X X : *.
let ANSI8Black := Î› X : * Î» black : X Î» red : X Î» green : X Î» yellow : X Î» blue : X Î» magenta : X Î» cyan : X Î» white : X black : âˆ€ X : * Î  black : X Î  red : X Î  green : X Î  yellow : X Î  blue : X Î  magenta : X Î  cyan : X Î  white : X X.
let ANSI8Red := Î› X : * Î» black : X Î» red : X Î» green : X Î» yellow : X Î» blue : X Î» magenta : X Î» cyan : X Î» white : X red : âˆ€ X : * Î  black : X Î  red : X Î  green : X Î  yellow : X Î  blue : X Î  magenta : X Î  cyan : X Î  white : X X.
let ANSI8Green := Î› X : * Î» black : X Î» red : X Î» green : X Î» yellow : X Î» blue : X Î» magenta : X Î» cyan : X Î» white : X green : âˆ€ X : * Î  black : X Î  red : X Î  green : X Î  yellow : X Î  blue : X Î  magenta : X Î  cyan : X Î  white : X X.
let ANSI8Yellow := Î› X : * Î» black : X Î» red : X Î» green : X Î» yellow : X Î» blue : X Î» magenta : X Î» cyan : X Î» white : X yellow : âˆ€ X : * Î  black : X Î  red : X Î  green : X Î  yellow : X Î  blue : X Î  magenta : X Î  cyan : X Î  white : X X.
let ANSI8Blue := Î› X : * Î» black : X Î» red : X Î» green : X Î» yellow : X Î» blue : X Î» magenta : X Î» cyan : X Î» white : X blue : âˆ€ X : * Î  black : X Î  red : X Î  green : X Î  yellow : X Î  blue : X Î  magenta : X Î  cyan : X Î  white : X X.
let ANSI8Magenta := Î› X : * Î» black : X Î» red : X Î» green : X Î» yellow : X Î» blue : X Î» magenta : X Î» cyan : X Î» white : X magenta : âˆ€ X : * Î  black : X Î  red : X Î  green : X Î  yellow : X Î  blue : X Î  magenta : X Î  cyan : X Î  white : X X.
let ANSI8Cyan := Î› X : * Î» black : X Î» red : X Î» green : X Î» yellow : X Î» blue : X Î» magenta : X Î» cyan : X Î» white : X cyan : âˆ€ X : * Î  black : X Î  red : X Î  green : X Î  yellow : X Î  blue : X Î  magenta : X Î  cyan : X Î  white : X X.
let ANSI8White := Î› X : * Î» black : X Î» red : X Î» green : X Î» yellow : X Î» blue : X Î» magenta : X Î» cyan : X Î» white : X white : âˆ€ X : * Î  black : X Î  red : X Î  green : X Î  yellow : X Î  blue : X Î  magenta : X Î  cyan : X Î  white : X X.
let toColorCode8 := Î» c : ANSI8Color [genEscapeCode [[[[[[[[<c String> [[stringCons Îº3] [[stringCons Îº0] stringNil]]] [[stringCons Îº3] [[stringCons Îº1] stringNil]]] [[stringCons Îº3] [[stringCons Îº2] stringNil]]] [[stringCons Îº3] [[stringCons Îº3] stringNil]]] [[stringCons Îº3] [[stringCons Îº4] stringNil]]] [[stringCons Îº3] [[stringCons Îº5] stringNil]]] [[stringCons Îº3] [[stringCons Îº6] stringNil]]] [[stringCons Îº3] [[stringCons Îº7] stringNil]]]] : Î  c : ANSI8Color String.
let toBrightColorCode8 := Î» c : ANSI8Color [genEscapeCode [[stringApp [[[[[[[[<c String> [[stringCons Îº3] [[stringCons Îº0] stringNil]]] [[stringCons Îº3] [[stringCons Îº1] stringNil]]] [[stringCons Îº3] [[stringCons Îº2] stringNil]]] [[stringCons Îº3] [[stringCons Îº3] stringNil]]] [[stringCons Îº3] [[stringCons Îº4] stringNil]]] [[stringCons Îº3] [[stringCons Îº5] stringNil]]] [[stringCons Îº3] [[stringCons Îº6] stringNil]]] [[stringCons Îº3] [[stringCons Îº7] stringNil]]]] [[stringCons Îº;] [[stringCons Îº1] stringNil]]]] : Î  c : ANSI8Color String.
let toBGColorCode8 := Î» c : ANSI8Color [genEscapeCode [[[[[[[[<c String> [[stringCons Îº4] [[stringCons Îº0] stringNil]]] [[stringCons Îº4] [[stringCons Îº1] stringNil]]] [[stringCons Îº4] [[stringCons Îº2] stringNil]]] [[stringCons Îº4] [[stringCons Îº3] stringNil]]] [[stringCons Îº4] [[stringCons Îº4] stringNil]]] [[stringCons Îº4] [[stringCons Îº5] stringNil]]] [[stringCons Îº4] [[stringCons Îº6] stringNil]]] [[stringCons Îº4] [[stringCons Îº7] stringNil]]]] : Î  c : ANSI8Color String.
let withColor8 := Î» c : ANSI8Color Î» s : String [stringConcat [[<cons String> [toBrightColorCode8 c]] [[<cons String> s] [[<cons String> resetCode] <nil String>]]]] : Î  c : ANSI8Color Î  s : String String.
let withColors8 := Î» fg : ANSI8Color Î» bg : ANSI8Color Î» s : String [stringConcat [[<cons String> [toColorCode8 fg]] [[<cons String> [toBGColorCode8 bg]] [[<cons String> s] [[<cons String> resetCode] <nil String>]]]]] : Î  fg : ANSI8Color Î  bg : ANSI8Color Î  s : String String.
let toColorCode256 := Î» c : Byte [genEscapeCode [[stringCons Îº3] [[stringCons Îº8] [[stringCons Îº;] [[stringCons Îº5] [[stringCons Îº;] [[stringApp [showByte c]] stringNil]]]]]]] : Î  c : Byte String.
let toBGColorCode256 := Î» c : Byte [genEscapeCode [[stringCons Îº4] [[stringCons Îº8] [[stringCons Îº;] [[stringCons Îº5] [[stringCons Îº;] [[stringApp [showByte c]] stringNil]]]]]]] : Î  c : Byte String.
let withColor256 := Î» c : Byte Î» s : String [stringConcat [[<cons String> [toColorCode256 c]] [[<cons String> s] [[<cons String> resetCode] <nil String>]]]] : Î  c : Byte Î  s : String String.
let withColors256 := Î» fg : Byte Î» bg : Byte Î» s : String [stringConcat [[<cons String> [toColorCode256 fg]] [[<cons String> [toBGColorCode256 bg]] [[<cons String> s] [[<cons String> resetCode] <nil String>]]]]] : Î  fg : Byte Î  bg : Byte Î  s : String String.
let LogType := âˆ€ X : * Î  _ : X Î  _ : X Î  _ : X Î  _ : X X : *.
let LogTypeDebug := Î› X : * Î» debug : X Î» info : X Î» warn : X Î» error : X debug : âˆ€ X : * Î  debug : X Î  info : X Î  warn : X Î  error : X X.
let LogTypeInfo := Î› X : * Î» debug : X Î» info : X Î» warn : X Î» error : X info : âˆ€ X : * Î  debug : X Î  info : X Î  warn : X Î  error : X X.
let LogTypeWarn := Î› X : * Î» debug : X Î» info : X Î» warn : X Î» error : X warn : âˆ€ X : * Î  debug : X Î  info : X Î  warn : X Î  error : X X.
let LogTypeError := Î› X : * Î» debug : X Î» info : X Î» warn : X Î» error : X error : âˆ€ X : * Î  debug : X Î  info : X Î  warn : X Î  error : X X.
let currentLogType := [<pureEval âˆ€ X : * Î  debug : X Î  info : X Î  warn : X Î  error : X X> LogTypeDebug] : [Eval LogType].
let doPrintLogType := Î» t : LogType [[[[<t [Eval Bool]> [<pureEval Bool> true]] [[<<mapEval EvalState> Bool> Î» s : EvalState [getPrintInfo [getEvalOpts s]]] getEval]] [<pureEval Bool> true]] [<pureEval Bool> true]] : Î  t : LogType [Eval Bool].
let debugPrint := Î» t : LogType Î» level : Nat Î» m : String [[<<bindEval Bool> Unit> [doPrintLogType t]] Î» b : Bool [[[<ifthenelse [Eval Unit]> b] [printLineEval m]] [<pureEval Unit> tt]]] : Î  t : LogType Î  level : Nat Î  m : String [Eval Unit].
let showLetInfo := Î» i : LetInfo [[stringApp [letInfoName i]] [[stringCons Îº ] [[stringCons Îº:] [[stringCons Îº=] [[stringCons Îº ] [[stringApp [showTerm [letInfoTerm i]]] [[stringApp [[[<<maybe Term> String> stringNil] Î» T : Term [[stringCons Îº ] [[stringCons Îº:] [[stringCons Îº ] [[stringApp [showTerm T]] stringNil]]]]] [letInfoType i]]] [[stringCons Îº
] stringNil]]]]]]]] : Î  i : LetInfo String.
let debugPrintLetInfo := Î» i : LetInfo [[<<seqEval Unit> LetInfo> [[[debugPrint LogTypeInfo] zero] [[stringCons ÎºD] [[stringCons Îºe] [[stringCons Îºf] [[stringCons Îºi] [[stringCons Îºn] [[stringCons Îºe] [[stringCons Îºd] [[stringCons Îº:] [[stringCons Îº ] [[stringApp [showLetInfo i]] stringNil]]]]]]]]]]]] [<pureEval LetInfo> i]] : ElabLet.