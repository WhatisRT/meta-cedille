let init$bindigit$0 := Λ X : * λ t : X λ f : X f : Bool.
let init$bindigit$1 := Λ X : * λ t : X λ f : X t : Bool.
let init$binnat'$_bindigit__binnat'_ := λ a : Bool λ as : [List Bool] Λ X : * λ n : X λ c : Π _ : Bool Π _ : X X [[c a] [[<as X> n] c]] : Π a : Bool Π as : [List Bool] [List Bool].
let init$binnat'$ := Λ X : * λ n : X λ c : Π _ : Bool Π _ : X X n : [List Bool].
let init$binnat$_bindigit__binnat'_ := λ a : Bool λ as : [List Bool] Λ X : * λ n : X λ c : Π _ : Bool Π _ : X X [[c a] [[<as X> n] c]] : Π a : Bool Π as : [List Bool] [List Bool].
let init$decdigit$0 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d0 : Dec.
let init$decdigit$1 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d1 : Dec.
let init$decdigit$2 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d2 : Dec.
let init$decdigit$3 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d3 : Dec.
let init$decdigit$4 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d4 : Dec.
let init$decdigit$5 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d5 : Dec.
let init$decdigit$6 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d6 : Dec.
let init$decdigit$7 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d7 : Dec.
let init$decdigit$8 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d8 : Dec.
let init$decdigit$9 := Λ X : * λ d0 : X λ d1 : X λ d2 : X λ d3 : X λ d4 : X λ d5 : X λ d6 : X λ d7 : X λ d8 : X λ d9 : X d9 : Dec.
let init$decnat'$_decdigit__decnat'_ := λ a : Dec λ as : [List Dec] Λ X : * λ n : X λ c : Π _ : Dec Π _ : X X [[c a] [[<as X> n] c]] : Π a : Dec Π as : [List Dec] [List Dec].
let init$decnat'$ := Λ X : * λ n : X λ c : Π _ : Dec Π _ : X X n : [List Dec].
let init$decnat$_decdigit__decnat'_ := λ a : Dec λ as : [List Dec] Λ X : * λ n : X λ c : Π _ : Dec Π _ : X X [[c a] [[<as X> n] c]] : Π a : Dec Π as : [List Dec] [List Dec].
let quoteDec := λ d : Dec [[[[[[[[[[<d Term> [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] [[stringCons κ0] stringNil]]]]]] <nil App>]] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] [[stringCons κ1] stringNil]]]]]] <nil App>]] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] [[stringCons κ2] stringNil]]]]]] <nil App>]] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] [[stringCons κ3] stringNil]]]]]] <nil App>]] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] [[stringCons κ4] stringNil]]]]]] <nil App>]] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] [[stringCons κ5] stringNil]]]]]] <nil App>]] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] [[stringCons κ6] stringNil]]]]]] <nil App>]] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] [[stringCons κ7] stringNil]]]]]] <nil App>]] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] [[stringCons κ8] stringNil]]]]]] <nil App>]] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] [[stringCons κ9] stringNil]]]]]] <nil App>]] : Π d : Dec Term.
let quoteListBool := λ l : [List Bool] [<<pr2 [List Bool]> Term> [[<l [[Product [List Bool]] Term]> [[<<prodPair [List Bool]> Term> <nil Bool>] [[appLTerm [sVarTerm [[stringCons κn] [[stringCons κi] [[stringCons κl] stringNil]]]]] [[<cons App> [[mkApp true] [[appLTerm [sVarTerm [[stringCons κB] [[stringCons κo] [[stringCons κo] [[stringCons κl] stringNil]]]]]] <nil App>]]] <nil App>]]]] λ a : Bool [<<<recursionProduct [List Bool]> Term> [[Product [List Bool]] Term]> λ as : [List Bool] λ x : Term [[<<prodPair [List Bool]> Term> [[<cons Bool> a] as]] [[[λ x : Bool λ _ : [List Bool] λ rec : Term [[appLTerm [sVarTerm [[stringCons κc] [[stringCons κo] [[stringCons κn] [[stringCons κs] stringNil]]]]]] [[<cons App> [[mkApp true] [[appLTerm [sVarTerm [[stringCons κB] [[stringCons κo] [[stringCons κo] [[stringCons κl] stringNil]]]]]] <nil App>]]] [[<cons App> [[mkApp false] [quoteBool x]]] [[<cons App> [[mkApp false] rec]] <nil App>]]]] a] as] x]]]]] : Π _ : [List Bool] Term.
let quoteListDec := λ l : [List Dec] [<<pr2 [List Dec]> Term> [[<l [[Product [List Dec]] Term]> [[<<prodPair [List Dec]> Term> <nil Dec>] [[appLTerm [sVarTerm [[stringCons κn] [[stringCons κi] [[stringCons κl] stringNil]]]]] [[<cons App> [[mkApp true] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] stringNil]]]]] <nil App>]]] <nil App>]]]] λ a : Dec [<<<recursionProduct [List Dec]> Term> [[Product [List Dec]] Term]> λ as : [List Dec] λ x : Term [[<<prodPair [List Dec]> Term> [[<cons Dec> a] as]] [[[λ x : Dec λ _ : [List Dec] λ rec : Term [[appLTerm [sVarTerm [[stringCons κc] [[stringCons κo] [[stringCons κn] [[stringCons κs] stringNil]]]]]] [[<cons App> [[mkApp true] [[appLTerm [sVarTerm [[stringCons κD] [[stringCons κe] [[stringCons κc] stringNil]]]]] <nil App>]]] [[<cons App> [[mkApp false] [quoteDec x]]] [[<cons App> [[mkApp false] rec]] <nil App>]]]] a] as] x]]]]] : Π _ : [List Dec] Term.
let init$singleTerm$_decnat_ := λ ds : [List Dec] [[appLTerm [sVarTerm [[stringCons κd] [[stringCons κe] [[stringCons κc] [[stringCons κL] [[stringCons κi] [[stringCons κs] [[stringCons κt] [[stringCons κT] [[stringCons κo] [[stringCons κN] [[stringCons κa] [[stringCons κt] stringNil]]]]]]]]]]]]]] [[<cons App> [[mkApp false] [quoteListDec ds]]] <nil App>]] : Π ds : [List Dec] Term.