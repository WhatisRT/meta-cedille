let consDecToIndex' := λ i : DBIndex' λ d : Dec [[[[[[[[[[[<d Π _ : DBIndex' DBIndex'> init$index'$0_index'_] init$index'$1_index'_] init$index'$2_index'_] init$index'$3_index'_] init$index'$4_index'_] init$index'$5_index'_] init$index'$6_index'_] init$index'$7_index'_] init$index'$8_index'_] init$index'$9_index'_] i] : Π i : DBIndex' Π d : Dec DBIndex'.
let consDecToIndex := λ i : DBIndex' λ d : Dec [[[[[[[[[[[<d Π _ : DBIndex' DBIndex> init$index$0_index'_] init$index$1_index'_] init$index$2_index'_] init$index$3_index'_] init$index$4_index'_] init$index$5_index'_] init$index$6_index'_] init$index$7_index'_] init$index$8_index'_] init$index$9_index'_] i] : Π i : DBIndex' Π d : Dec DBIndex.
let indexToIndex' := λ i : DBIndex [[[[[[[[[[<i DBIndex'> init$index'$0_index'_] init$index'$1_index'_] init$index'$2_index'_] init$index'$3_index'_] init$index'$4_index'_] init$index'$5_index'_] init$index'$6_index'_] init$index'$7_index'_] init$index'$8_index'_] init$index'$9_index'_] : Π i : DBIndex DBIndex'.
let digitListToIndex' := λ l : [List Dec] [[[<<foldl Dec> DBIndex'> consDecToIndex'] l] init$index'$] : Π l : [List Dec] DBIndex'.
let digitListToIndex := λ l : [List Dec] [<<pr2 [List Dec]> DBIndex> [[<l [[Product [List Dec]] DBIndex]> [[<<prodPair [List Dec]> DBIndex> <nil Dec>] [init$index$0_index'_ init$index'$]]] λ a : Dec λ p : [[Product [List Dec]] DBIndex] [[<<prodPair [List Dec]> DBIndex> [[<cons Dec> a] [<<pr1 [List Dec]> DBIndex> p]]] [[[λ d : Dec λ ds : [List Dec] λ _ : DBIndex [[consDecToIndex [digitListToIndex' ds]] d] a] [<<pr1 [List Dec]> DBIndex> p]] [<<pr2 [List Dec]> DBIndex> p]]]]] : Π _ : [List Dec] DBIndex.
let natToIndex := λ n : Nat [digitListToIndex [natToDecList n]] : Π n : Nat DBIndex.
let natToVar := λ n : Nat [iVarTerm [natToIndex n]] : Π n : Nat Term.
let indexEq := λ i1 : DBIndex λ i2 : DBIndex [[natEq [indexToNat i1]] [indexToNat i2]] : Π i1 : DBIndex Π i2 : DBIndex Bool.
let varEq := λ v1 : Var λ v2 : Var [[<v1 Bool> λ n1 : String [[<v2 Bool> λ n2 : String [[stringEq n1] n2]] λ _ : DBIndex false]] λ i1 : DBIndex [[<v2 Bool> λ _ : String false] λ i2 : DBIndex [[indexEq i1] i2]]] : Π v1 : Var Π v2 : Var Bool.
let sortEq := λ s1 : Sort λ s2 : Sort [[<s1 Bool> [[<s2 Bool> true] false]] [[<s2 Bool> false] true]] : Π s1 : Sort Π s2 : Sort Bool.
let binderEq := λ b1 : Binder λ b2 : Binder [[[[<b1 Bool> [[[[<b2 Bool> true] false] false] false]] [[[[<b2 Bool> false] true] false] false]] [[[[<b2 Bool> false] false] true] false]] [[[[<b2 Bool> false] false] false] true]] : Π b1 : Binder Π b2 : Binder Bool.
let termEq := λ term : Term [<<pr1 Π _ : Term Bool> Term> [[[[[[[<term [[Product Π _ : Term Bool] Term]> λ v : Var [[<<prodPair Π _ : Term Bool> Term> [λ v1 : Var [[[[[[[<recursionTerm Bool> λ v2 : Var [[varEq v1] v2]] λ s2 : Sort [[λ _ : Term λ _ : Term false [varTerm v1]] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : Bool λ _ : Bool [[λ _ : Term λ _ : Term false [varTerm v1]] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : Bool λ _ : [List [[Product Bool] Bool]] [[λ _ : Term λ _ : Term false [varTerm v1]] [[appLTerm t2] app2]]] λ c2 : Char [[λ _ : Term λ _ : Term false [varTerm v1]] [charTerm c2]]] [[λ _ : Term λ _ : Term false [varTerm v1]] unknownTerm]] λ t2 : Term λ _ : Bool [[λ _ : Term λ _ : Term false [varTerm v1]] [unquoteTerm t2]]] v]] [varTerm v]]] λ s : Sort [[<<prodPair Π _ : Term Bool> Term> [λ s1 : Sort [[[[[[[<recursionTerm Bool> λ v2 : Var [[λ _ : Term λ _ : Term false [sortTerm s1]] [varTerm v2]]] λ s2 : Sort [[sortEq s1] s2]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : Bool λ _ : Bool [[λ _ : Term λ _ : Term false [sortTerm s1]] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : Bool λ _ : [List [[Product Bool] Bool]] [[λ _ : Term λ _ : Term false [sortTerm s1]] [[appLTerm t2] app2]]] λ c2 : Char [[λ _ : Term λ _ : Term false [sortTerm s1]] [charTerm c2]]] [[λ _ : Term λ _ : Term false [sortTerm s1]] unknownTerm]] λ t2 : Term λ _ : Bool [[λ _ : Term λ _ : Term false [sortTerm s1]] [unquoteTerm t2]]] s]] [sortTerm s]]] λ b : Binder λ n : String [<<<recursionProduct Π _ : Term Bool> Term> Π _ : [[Product Π _ : Term Bool] Term] [[Product Π _ : Term Bool] Term]> λ T1 : Π _ : Term Bool λ T2 : Term [<<<recursionProduct Π _ : Term Bool> Term> [[Product Π _ : Term Bool] Term]> λ t1 : Π _ : Term Bool λ t2 : Term [[<<prodPair Π _ : Term Bool> Term> [[[[[[λ b1 : Binder λ n1 : String λ T1 : Term λ t1 : Term λ recT1 : Π _ : Term Bool λ rect1 : Π _ : Term Bool [[[[[[[<recursionTerm Bool> λ v2 : Var [[λ _ : Term λ _ : Term false [[[[binderTerm b1] n1] T1] t1]] [varTerm v2]]] λ s2 : Sort [[λ _ : Term λ _ : Term false [[[[binderTerm b1] n1] T1] t1]] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : Bool λ _ : Bool [[[[[[[[[[λ b1 : Binder λ n1 : String λ _ : Term λ _ : Term λ b2 : Binder λ n2 : String λ _ : Term λ _ : Term λ rec1 : Bool λ rec2 : Bool [[and [[binderEq b1] b2]] [[and [[stringEq n1] n2]] [[and rec1] rec2]]] b1] n1] T1] t1] b2] n2] T2] t2] [recT1 T2]] [rect1 t2]]] λ t2 : Term λ app2 : [List App] λ _ : Bool λ _ : [List [[Product Bool] Bool]] [[λ _ : Term λ _ : Term false [[[[binderTerm b1] n1] T1] t1]] [[appLTerm t2] app2]]] λ c2 : Char [[λ _ : Term λ _ : Term false [[[[binderTerm b1] n1] T1] t1]] [charTerm c2]]] [[λ _ : Term λ _ : Term false [[[[binderTerm b1] n1] T1] t1]] unknownTerm]] λ t2 : Term λ _ : Bool [[λ _ : Term λ _ : Term false [[[[binderTerm b1] n1] T1] t1]] [unquoteTerm t2]]] b] n] T2] t2] T1] t1]] [[[[binderTerm b] n] T2] t2]]]]] [<<<recursionProduct Π _ : Term Bool> Term> Π _ : [List [[Product Bool] [[Product Π _ : Term Bool] Term]]] [[Product Π _ : Term Bool] Term]> λ t1 : Π _ : Term Bool λ t2 : Term λ l : [List [[Product Bool] [[Product Π _ : Term Bool] Term]]] [[<<<recursionProduct [List [[Product Bool] Π _ : Term Bool]]> [List [[Product Bool] Term]]> [[Product Π _ : Term Bool] Term]> λ l1 : [List [[Product Bool] Π _ : Term Bool]] λ l2 : [List [[Product Bool] Term]] [[<<prodPair Π _ : Term Bool> Term> [[[[λ t1 : Term λ app1 : [List App] λ rect1 : Π _ : Term Bool λ recapp1 : [List [[Product Bool] Π _ : Term Bool]] [[[[[[[<recursionTerm Bool> λ v2 : Var [[λ _ : Term λ _ : Term false [[appLTerm t1] app1]] [varTerm v2]]] λ s2 : Sort [[λ _ : Term λ _ : Term false [[appLTerm t1] app1]] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : Bool λ _ : Bool [[λ _ : Term λ _ : Term false [[appLTerm t1] app1]] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : Bool λ _ : [List [[Product Bool] Bool]] [[[[[[λ _ : Term λ l1 : [List App] λ _ : Term λ l2 : [List App] λ rect : Bool λ recapp : [List Bool] [[and rect] [[and [[natEq [<length App> l1]] [<length App> l2]]] [[[<<foldl Bool> Bool> and] recapp] true]]] t1] app1] t2] app2] [rect1 t2]] [[[<<<zipWith [[Product Bool] Π _ : Term Bool]> [[Product Bool] Term]> Bool> λ r1 : [[Product Bool] Π _ : Term Bool] λ r2 : [[Product Bool] Term] [[<<pr2 Bool> Π _ : Term Bool> r1] [<<pr2 Bool> Term> r2]]] recapp1] app2]]] λ c2 : Char [[λ _ : Term λ _ : Term false [[appLTerm t1] app1]] [charTerm c2]]] [[λ _ : Term λ _ : Term false [[appLTerm t1] app1]] unknownTerm]] λ t2 : Term λ _ : Bool [[λ _ : Term λ _ : Term false [[appLTerm t1] app1]] [unquoteTerm t2]]] t2] l2] t1] l1]] [[appLTerm t2] l2]]] [<<<distList Bool> Π _ : Term Bool> Term> l]]]] λ c : Char [[<<prodPair Π _ : Term Bool> Term> [λ c1 : Char [[[[[[[<recursionTerm Bool> λ v2 : Var [[λ _ : Term λ _ : Term false [charTerm c1]] [varTerm v2]]] λ s2 : Sort [[λ _ : Term λ _ : Term false [charTerm c1]] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : Bool λ _ : Bool [[λ _ : Term λ _ : Term false [charTerm c1]] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : Bool λ _ : [List [[Product Bool] Bool]] [[λ _ : Term λ _ : Term false [charTerm c1]] [[appLTerm t2] app2]]] λ c2 : Char [[charEq c1] c2]] [[λ _ : Term λ _ : Term false [charTerm c1]] unknownTerm]] λ t2 : Term λ _ : Bool [[λ _ : Term λ _ : Term false [charTerm c1]] [unquoteTerm t2]]] c]] [charTerm c]]] [[<<prodPair Π _ : Term Bool> Term> [[[[[[[<recursionTerm Bool> λ v2 : Var [[λ _ : Term λ _ : Term false unknownTerm] [varTerm v2]]] λ s2 : Sort [[λ _ : Term λ _ : Term false unknownTerm] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : Bool λ _ : Bool [[λ _ : Term λ _ : Term false unknownTerm] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : Bool λ _ : [List [[Product Bool] Bool]] [[λ _ : Term λ _ : Term false unknownTerm] [[appLTerm t2] app2]]] λ c2 : Char [[λ _ : Term λ _ : Term false unknownTerm] [charTerm c2]]] true] λ t2 : Term λ _ : Bool [[λ _ : Term λ _ : Term false unknownTerm] [unquoteTerm t2]]]] unknownTerm]] [<<<recursionProduct Π _ : Term Bool> Term> [[Product Π _ : Term Bool] Term]> λ u1 : Π _ : Term Bool λ u2 : Term [[<<prodPair Π _ : Term Bool> Term> [[λ t1 : Term λ rect1 : Π _ : Term Bool [[[[[[[<recursionTerm Bool> λ v2 : Var [[λ _ : Term λ _ : Term false [unquoteTerm t1]] [varTerm v2]]] λ s2 : Sort [[λ _ : Term λ _ : Term false [unquoteTerm t1]] [sortTerm s2]]] λ b2 : Binder λ n2 : String λ T2 : Term λ t2 : Term λ _ : Bool λ _ : Bool [[λ _ : Term λ _ : Term false [unquoteTerm t1]] [[[[binderTerm b2] n2] T2] t2]]] λ t2 : Term λ app2 : [List App] λ _ : Bool λ _ : [List [[Product Bool] Bool]] [[λ _ : Term λ _ : Term false [unquoteTerm t1]] [[appLTerm t2] app2]]] λ c2 : Char [[λ _ : Term λ _ : Term false [unquoteTerm t1]] [charTerm c2]]] [[λ _ : Term λ _ : Term false [unquoteTerm t1]] unknownTerm]] λ t2 : Term λ rect2 : Bool [[[λ _ : Term λ _ : Term λ rec : Bool rec t1] t2] [rect1 t2]]] u2] u1]] [unquoteTerm u2]]]]] : Π _ : Term Π _ : Term Bool.
let substContextVars := λ s : Π _ : Nat Nat λ t : Term [[[[[[[[<t Π _ : Nat Term> λ v : Var λ k : Nat [[<v Term> λ n : String [sVarTerm n]] λ i : DBIndex [[[<ifthenelse Term> [[natLeq k] [indexToNat i]]] [iVarTerm [natToIndex [[add [s [[sub [indexToNat i]] k]]] k]]]] [iVarTerm i]]]] λ s : Sort λ k : Nat [sortTerm s]] λ b : Binder λ n : String λ recT : Π _ : Nat Term λ rect : Π _ : Nat Term λ k : Nat [[[[binderTerm b] n] [recT k]] [rect [suc k]]]] λ rect : Π _ : Nat Term λ recApp : [List [[Product Bool] Π _ : Nat Term]] λ k : Nat [[appLTerm [rect k]] [[<<map [[Product Bool] Π _ : Nat Term]> [[Product Bool] Term]> [<<<productMap2 Bool> Π _ : Nat Term> Term> λ f : Π _ : Nat Term [f k]]] recApp]]] λ c : Char λ _ : Nat [charTerm c]] λ _ : Nat unknownTerm] λ rect : Π _ : Nat Term λ k : Nat [rect k]] [decListToNat [[<cons Dec> Dec0] <nil Dec>]]] : Π s : Π _ : Nat Nat Π t : Term Term.
let strengthen := λ t : Term [[[[[[[[<t Π _ : Nat Term> λ v : Var λ k : Nat [[<v Term> λ n : String [sVarTerm n]] λ i : DBIndex [[[<ifthenelse Term> [[natLeq k] [indexToNat i]]] [iVarTerm [natToIndex [[add [pred [[sub [indexToNat i]] k]]] k]]]] [iVarTerm i]]]] λ s : Sort λ k : Nat [sortTerm s]] λ b : Binder λ n : String λ recT : Π _ : Nat Term λ rect : Π _ : Nat Term λ k : Nat [[[[binderTerm b] n] [recT k]] [rect [suc k]]]] λ rect : Π _ : Nat Term λ recApp : [List [[Product Bool] Π _ : Nat Term]] λ k : Nat [[appLTerm [rect k]] [[<<map [[Product Bool] Π _ : Nat Term]> [[Product Bool] Term]> [<<<productMap2 Bool> Π _ : Nat Term> Term> λ f : Π _ : Nat Term [f k]]] recApp]]] λ c : Char λ _ : Nat [charTerm c]] λ _ : Nat unknownTerm] λ rect : Π _ : Nat Term λ k : Nat [rect k]] [decListToNat [[<cons Dec> Dec0] <nil Dec>]]] : Π _ : Term Term.
let strengthenBy := λ k : Nat [substContextVars λ n : Nat [[sub n] k]] : Π k : Nat Π _ : Term Term.
let weakenBy := λ k : Nat [substContextVars [add k]] : Π k : Nat Π _ : Term Term.