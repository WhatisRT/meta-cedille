let consDecToIndex' := λ i : DBIndex' λ d : Dec [[[[[[[[[[[<d Π _ : DBIndex' DBIndex'> init$index'$0_index'_] init$index'$1_index'_] init$index'$2_index'_] init$index'$3_index'_] init$index'$4_index'_] init$index'$5_index'_] init$index'$6_index'_] init$index'$7_index'_] init$index'$8_index'_] init$index'$9_index'_] i] : Π i : DBIndex' Π d : Dec DBIndex'.
let consDecToIndex := λ i : DBIndex' λ d : Dec [[[[[[[[[[[<d Π _ : DBIndex' DBIndex> init$index$0_index'_] init$index$1_index'_] init$index$2_index'_] init$index$3_index'_] init$index$4_index'_] init$index$5_index'_] init$index$6_index'_] init$index$7_index'_] init$index$8_index'_] init$index$9_index'_] i] : Π i : DBIndex' Π d : Dec DBIndex.
let indexToIndex' := λ i : DBIndex [[[[[[[[[[<i DBIndex'> init$index'$0_index'_] init$index'$1_index'_] init$index'$2_index'_] init$index'$3_index'_] init$index'$4_index'_] init$index'$5_index'_] init$index'$6_index'_] init$index'$7_index'_] init$index'$8_index'_] init$index'$9_index'_] : Π i : DBIndex DBIndex'.
let digitListToIndex' := λ l : [List Dec] [[[<<foldl Dec> DBIndex'> consDecToIndex'] l] init$index'$] : Π l : [List Dec] DBIndex'.
let digitListToIndex := [[<<recursionList Dec> DBIndex> [init$index$0_index'_ init$index'$]] λ d : Dec λ ds : [List Dec] λ _ : DBIndex [[consDecToIndex [digitListToIndex' ds]] d]] : Π _ : [List Dec] DBIndex.
let natToIndex := λ n : Nat [digitListToIndex [natToDecList n]] : Π n : Nat DBIndex.
let natToVar := λ n : Nat [iVarTerm [natToIndex n]] : Π n : Nat Term.
let indexEq := λ i1 : DBIndex λ i2 : DBIndex [[natEq [indexToNat i1]] [indexToNat i2]] : Π i1 : DBIndex Π i2 : DBIndex Bool.
let varEq := λ v1 : Var λ v2 : Var [[<v1 Bool> λ n1 : String [[<v2 Bool> λ n2 : String [[stringEq n1] n2]] λ _ : DBIndex false]] λ i1 : DBIndex [[<v2 Bool> λ _ : String false] λ i2 : DBIndex [[indexEq i1] i2]]] : Π v1 : Var Π v2 : Var Bool.
let sortEq := λ s1 : Sort λ s2 : Sort [[<s1 Bool> [[<s2 Bool> true] false]] [[<s2 Bool> false] true]] : Π s1 : Sort Π s2 : Sort Bool.
let binderEq := λ b1 : Binder λ b2 : Binder [[[[<b1 Bool> [[[[<b2 Bool> true] false] false] false]] [[[[<b2 Bool> false] true] false] false]] [[[[<b2 Bool> false] false] true] false]] [[[[<b2 Bool> false] false] false] true]] : Π b1 : Binder Π b2 : Binder Bool.
let termEq := [[[[[[[[<recursionTermsDiag Bool> varEq] sortEq] λ b1 : Binder λ n1 : String λ _ : Term λ _ : Term λ b2 : Binder λ n2 : String λ _ : Term λ _ : Term λ rec1 : Bool λ rec2 : Bool [[and [[binderEq b1] b2]] [[and [[stringEq n1] n2]] [[and rec1] rec2]]]] λ _ : Term λ l1 : [List App] λ _ : Term λ l2 : [List App] λ rect : Bool λ recapp : [List Bool] [[and rect] [[and [[natEq [<length App> l1]] [<length App> l2]]] [[[<<foldl Bool> Bool> and] recapp] true]]]] charEq] true] λ _ : Term λ _ : Term λ rec : Bool rec] λ _ : Term λ _ : Term false] : Π _ : Term Π _ : Term Bool.
let substContextVars := λ s : Π _ : Nat Nat λ t : Term [[[[[[[[<t Π _ : Nat Term> λ v : Var λ k : Nat [[<v Term> λ n : String [sVarTerm n]] λ i : DBIndex [[[<ifthenelse Term> [[natLeq k] [indexToNat i]]] [iVarTerm [natToIndex [[add [s [[sub [indexToNat i]] k]]] k]]]] [iVarTerm i]]]] λ s : Sort λ k : Nat [sortTerm s]] λ b : Binder λ n : String λ recT : Π _ : Nat Term λ rect : Π _ : Nat Term λ k : Nat [[[[binderTerm b] n] [recT k]] [rect [suc k]]]] λ rect : Π _ : Nat Term λ recApp : [List [[Product Bool] Π _ : Nat Term]] λ k : Nat [[appLTerm [rect k]] [[<<map [[Product Bool] Π _ : Nat Term]> [[Product Bool] Term]> [<<<productMap2 Bool> Π _ : Nat Term> Term> λ f : Π _ : Nat Term [f k]]] recApp]]] λ c : Char λ _ : Nat [charTerm c]] λ _ : Nat unknownTerm] λ rect : Π _ : Nat Term λ k : Nat [rect k]] [decListToNat [[<cons Dec> Dec0] <nil Dec>]]] : Π s : Π _ : Nat Nat Π t : Term Term.
let strengthen := [substContextVars pred] : Π _ : Term Term.
let strengthenBy := λ k : Nat [substContextVars λ n : Nat [[sub n] k]] : Π k : Nat Π _ : Term Term.
let weakenBy := λ k : Nat [substContextVars [add k]] : Π k : Nat Π _ : Term Term.