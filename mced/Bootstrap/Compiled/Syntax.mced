let letInfoTermToQuoted := λ i : LetInfo [[[mkLetInfo [[stringApp [[stringCons κq] [[stringCons κT] [[stringCons κe] [[stringCons κr] [[stringCons κm] stringNil]]]]]] [letInfoName i]]] [quoteTerm [letInfoTerm i]]] [<just Term> [[appLTerm [sVarTerm [[stringCons κT] [[stringCons κe] [[stringCons κr] [[stringCons κm] stringNil]]]]]] <nil App>]]] : Π i : LetInfo LetInfo.
let addQuotedLetInfo := λ i : LetInfo [[<<seqEval Unit> LetInfo> [λ i : LetInfo [<voidEval Unit> [letInfoToNewStmt [letInfoTermToQuoted i]]] i]] [<pureEval LetInfo> i]] : ElabLet.
let letInfoToNewStmtMod := λ i : LetInfo [[<<bindEval LetInfo> Unit> [[runEvalLets' [[<cons ElabLet> checkTypeAnn] [[<cons ElabLet> moduleElab] [[<cons ElabLet> debugPrintLetInfo] <nil ElabLet>]]]] i]] letInfoToNewStmt] : Π i : LetInfo [Eval Unit].
let runMetaCommand := λ t : Term [<joinEval Unit> [[checkTerm [Eval Unit]] t]] : Π t : Term [Eval Unit].
let runEcho := λ t : Term [runMetaCommand [[appLTerm [sVarTerm [[stringCons κp] [[stringCons κr] [[stringCons κi] [[stringCons κn] [[stringCons κt] [[stringCons κL] [[stringCons κi] [[stringCons κn] [[stringCons κe] [[stringCons κE] [[stringCons κv] [[stringCons κa] [[stringCons κl] stringNil]]]]]]]]]]]]]]] [[<cons App> [[mkApp false] t]] <nil App>]]] : Π t : Term [Eval Unit].
let reloadMEnv := λ e : EvalEnv λ s : EvalState [[<<bindMeta [[Product EvalState] EvalState]> [[Product Unit] EvalState]> [[getEval e] s]] [<<<recursionProduct EvalState> EvalState> [M [[Product Unit] EvalState]]> λ res1 : EvalState λ res2 : EvalState [[[λ s : EvalState [setEval [λ e : EvalState e s]] res1] e] res2]]] : [Eval Unit].
let showTypeStmt := λ tel : Telescope λ t : Term [[<inContext Unit> [[<<map Param> PreParam> <<pr2 Bool> PreParam>] tel]] [[<<bindEval String> Unit> [[<<bindEval Term> String> [inferType t]] showTermE]] λ x : String [printEval [[stringApp [showTerm t]] [[stringCons κ ] [[stringCons κ:] [[stringCons κ ] [[stringApp x] stringNil]]]]]]]] : Π tel : Telescope Π t : Term [Eval Unit].
let normalizeStmt := λ t : Term [[<<bindEval Term> Unit> [normalize t]] λ t' : Term [printEval [[stringApp [showTerm t]] [[stringCons κ ] [[stringCons κn] [[stringCons κo] [[stringCons κr] [[stringCons κm] [[stringCons κa] [[stringCons κl] [[stringCons κi] [[stringCons κz] [[stringCons κe] [[stringCons κs] [[stringCons κ ] [[stringCons κt] [[stringCons κo] [[stringCons κ:] [[stringCons κ ] [[stringApp [showTerm t']] stringNil]]]]]]]]]]]]]]]]]]]] : Π t : Term [Eval Unit].
let hnfStmt := λ t : Term [[<<bindEval Term> Unit> [headNormalize t]] λ t' : Term [printEval [[stringApp [showTerm t]] [[stringCons κ ] [[stringCons κh] [[stringCons κe] [[stringCons κa] [[stringCons κd] [[stringCons κ-] [[stringCons κn] [[stringCons κo] [[stringCons κr] [[stringCons κm] [[stringCons κa] [[stringCons κl] [[stringCons κi] [[stringCons κz] [[stringCons κe] [[stringCons κs] [[stringCons κ ] [[stringCons κt] [[stringCons κo] [[stringCons κ:] [[stringCons κ ] [[stringApp [showTerm t']] stringNil]]]]]]]]]]]]]]]]]]]]]]]]] : Π t : Term [Eval Unit].
let init$newStmt'$o=minus=_stmt'_ := λ stmt : [M Unit] [<liftMtoEval Unit> stmt] : Π stmt : [M Unit] [Eval Unit].
let init$flag$true := Λ X : * λ t : X λ f : X t : Bool.
let init$flag$false := Λ X : * λ t : X λ f : X f : Bool.
let modifyAndUpdateEvalOpts := λ f : Π _ : EvalOpts EvalOpts [[seqNewStmt [modifyEvalOpts f]] updateMEnv] : Π f : Π _ : EvalOpts EvalOpts [Eval Unit].
let init$setStmt$RequireTypeAnnotations^space^_flag_ := λ b : Bool [modifyAndUpdateEvalOpts [setAnnReq b]] : Π b : Bool [Eval Unit].
let init$setStmt$PrintInfo^space^_flag_ := λ b : Bool [modifyAndUpdateEvalOpts [setPrintInfo b]] : Π b : Bool [Eval Unit].
let init$setStmt$PWD^space^_multiTerm_ := λ dirT : Term [[<<bindEval String> Unit> [[checkTerm String] dirT]] λ dir : String [modifyAndUpdateEvalOpts [setWorkingDir dir]]] : Π dirT : Term [Eval Unit].
let init$setStmt$SetDebug^space^_multiTerm_ := λ optsT : Term [[<<bindEval [List String]> Unit> [[checkTerm [List String]] optsT]] setDebug] : Π optsT : Term [Eval Unit].
let init$newStmt'$set^space^_setStmt_=dot= := λ s : [Eval Unit] s : Π s : [Eval Unit] [Eval Unit].
let init$newStmt'$let^space^_betterLet_ := λ i : LetInfo [[<<bindEval LetInfo> Unit> [[runEvalLets' [[<cons ElabLet> checkTypeAnn] [[<cons ElabLet> moduleElab] [[<cons ElabLet> debugPrintLetInfo] <nil ElabLet>]]]] i]] letInfoToNewStmt] : Π _ : LetInfo [Eval Unit].
let init$newStmt'$qlet^space^_betterLet_ := λ i : LetInfo [[runEvalLets [[<cons ElabLet> checkTypeAnn] [[<cons ElabLet> moduleElab] [[<cons ElabLet> addQuotedLetInfo] <nil ElabLet>]]]] i] : Π i : LetInfo [Eval Unit].
let init$newStmt'$runMeta^space^_multiTerm_=dot= := λ t : Term [<joinEval Unit> [[checkTerm [Eval Unit]] t]] : Π _ : Term [Eval Unit].
let init$newStmt'$echo^space^_multiTerm_=dot= := λ t : Term [[<<bindEval Term> Unit> [modifyTermMod t]] runEcho] : Π t : Term [Eval Unit].
let init$newStmt'$showType^space^_telescope__multiTerm_=dot= := λ tel : Telescope λ t : Term [[<inContext Unit> [[<<map Param> PreParam> <<pr2 Bool> PreParam>] tel]] [[<<bindEval String> Unit> [[<<bindEval Term> String> [inferType t]] showTermE]] λ x : String [printEval [[stringApp [showTerm t]] [[stringCons κ ] [[stringCons κ:] [[stringCons κ ] [[stringApp x] stringNil]]]]]]]] : Π _ : Telescope Π _ : Term [Eval Unit].
let init$newStmt'$normalize^space^_multiTerm_=dot= := λ t : Term [[<<bindEval Term> Unit> [normalize t]] λ t' : Term [printEval [[stringApp [showTerm t]] [[stringCons κ ] [[stringCons κn] [[stringCons κo] [[stringCons κr] [[stringCons κm] [[stringCons κa] [[stringCons κl] [[stringCons κi] [[stringCons κz] [[stringCons κe] [[stringCons κs] [[stringCons κ ] [[stringCons κt] [[stringCons κo] [[stringCons κ:] [[stringCons κ ] [[stringApp [showTerm t']] stringNil]]]]]]]]]]]]]]]]]]]] : Π _ : Term [Eval Unit].
let init$newStmt'$headNormalize^space^_multiTerm_=dot= := λ t : Term [[<<bindEval Term> Unit> [headNormalize t]] λ t' : Term [printEval [[stringApp [showTerm t]] [[stringCons κ ] [[stringCons κh] [[stringCons κe] [[stringCons κa] [[stringCons κd] [[stringCons κ-] [[stringCons κn] [[stringCons κo] [[stringCons κr] [[stringCons κm] [[stringCons κa] [[stringCons κl] [[stringCons κi] [[stringCons κz] [[stringCons κe] [[stringCons κs] [[stringCons κ ] [[stringCons κt] [[stringCons κo] [[stringCons κ:] [[stringCons κ ] [[stringApp [showTerm t']] stringNil]]]]]]]]]]]]]]]]]]]]]]]]] : Π _ : Term [Eval Unit].
let init$newStmt'$import^space^_string_=dot= := λ filename : String [[<<bindEval String> Unit> [[<<mapEval EvalOpts> String> getWorkingDir] getEvalOpts']] λ workingDir : String [[seqNewStmt [<liftMtoEval Unit> [primImport [stringConcat [[<cons String> workingDir] [[<cons String> filename] <nil String>]]]]]] [[<<bindEval Evaluator> Unit> [[<<bindEval Term> Evaluator> getEval'] [checkTerm Evaluator]]] λ ev : Evaluator [[<<bindEval EvalState> Unit> [<liftMtoEval EvalState> [[<<mapMeta [[Product Unit] EvalState]> EvalState> <<pr2 Unit> EvalState>] [ev emptyStmt]]]] setEval]]]] : Π _ : String [Eval Unit].
let init$newStmt'$updateEval=dot= := λ e : EvalEnv λ s : EvalState [[<<bindMeta [[Product EvalState] EvalState]> [[Product Unit] EvalState]> [[getEval e] s]] [<<<recursionProduct EvalState> EvalState> [M [[Product Unit] EvalState]]> λ res1 : EvalState λ res2 : EvalState [[[λ s : EvalState [[[setMEnv [[appSingle [[appLTerm [sVarTerm [[stringCons κe] [[stringCons κv] [[stringCons κa] [[stringCons κl] [[stringCons κN] [[stringCons κe] [[stringCons κw] [[stringCons κS] [[stringCons κt] [[stringCons κm] [[stringCons κt] stringNil]]]]]]]]]]]]] <nil App>]] [quoteEvalState s]]] [[stringCons κi] [[stringCons κn] [[stringCons κi] [[stringCons κt] stringNil]]]]] [[stringCons κn] [[stringCons κe] [[stringCons κw] [[stringCons κS] [[stringCons κt] [[stringCons κm] [[stringCons κt] stringNil]]]]]]]] res1] e] res2]]] : [Eval Unit].
let init$newStmt'$ := λ e : EvalEnv λ s : EvalState [<returnMeta [[Product Unit] EvalState]> [[<<prodPair Unit> EvalState> tt] s]] : [Eval Unit].
let init$newStmt$^space'^_newStmt'_ := λ stmt : [Eval Unit] stmt : Π stmt : [Eval Unit] [Eval Unit].