let monoList := Λ X : * Λ Y : * λ c : [[Cast X] Y] <<<extCast [List X]> [List Y]> [[<<indList X> λ l : [List X] [[View [List Y]] [<beta' [List X]> l]]> [<selfView [List Y]> <nilC Y>]] λ x : X λ xs : [List X] λ pxs : [[View [List Y]] [<beta' [List X]> xs]] [<selfView [List Y]> [[<consC Y> [<<<elimCast X> Y> c> x]] <[<elimView [List Y]> [<beta' [List X]> xs]] pxs>]]]> : [Mono List].
let indHelperList/conv := Λ AP : * Λ A : * Λ c : [[Cast AP] A] <<<elimCast [List AP]> [List A]> [<<monoList AP> A> c]> : ∀ AP : * ∀ A : * ∀ c : [[Cast AP] A] Π _ : [List AP] [List A].
let indHelperList := Λ AP : * Λ A : * Λ c : [[Cast AP] A] Λ P : Π _ : A * λ Pc : Π t : AP [P [<<<elimCast AP> A> c> t]] Λ P' : Π _ : [List A] * λ pn : [P' <nil A>] λ pc : Π t : A Π _ : [P t] Π ts : [List A] Π _ : [P' ts] [P' [[<cons A> t] ts]] [λ convN : Π _ : [P' <nil A>] [P' [<<<indHelperList/conv AP> A> c> <nil AP>]] [[<<indList AP> λ l : [List AP] [P' [<<<indHelperList/conv AP> A> c> l]]> [convN pn]] λ t : AP λ ts : [List AP] λ p' : [P' [<<<indHelperList/conv AP> A> c> ts]] [<<<<<usubst [List A]> [<<<indHelperList/conv AP> A> c> [[<cons AP> t] ts]]> [[<cons A> [<<<elimCast AP> A> c> t]] [<<<indHelperList/conv AP> A> c> ts]]> [<beta [List A]> [<<<indHelperList/conv AP> A> c> [[<cons AP> t] ts]]]> P'> [[[[pc [<<<elimCast AP> A> c> t]] [Pc t]] [<<<indHelperList/conv AP> A> c> ts]] p']]] <<<<<usubst [List A]> [<<<indHelperList/conv AP> A> c> <nil AP>]> <nil A>> [<beta [List A]> <nil A>]> P'>] : ∀ AP : * ∀ A : * ∀ c : [[Cast AP] A] ∀ P : Π _ : A * Π Pc : Π t : AP [P [<<<elimCast AP> A> c> t]] ∀ P' : Π _ : [List A] * Π pn : [P' <nil A>] Π pc : Π t : A Π _ : [P t] Π ts : [List A] Π _ : [P' ts] [P' [[<cons A> t] ts]] Π l : [List AP] [P' [<<<indHelperList/conv AP> A> c> l]].
let BinderF := λ R' : * ∀ P' : * Π lambdaBinderX : P' Π LambdaBinderX : P' Π piBinderX : P' Π forallBinderX : P' P' : Π R' : * *.
let lambdaBinderF := Λ R' : * Λ P' : * λ lambdaBinderX : P' λ LambdaBinderX : P' λ piBinderX : P' λ forallBinderX : P' lambdaBinderX : ∀ R' : * [BinderF R'].
let LambdaBinderF := Λ R' : * Λ P' : * λ lambdaBinderX : P' λ LambdaBinderX : P' λ piBinderX : P' λ forallBinderX : P' LambdaBinderX : ∀ R' : * [BinderF R'].
let piBinderF := Λ R' : * Λ P' : * λ lambdaBinderX : P' λ LambdaBinderX : P' λ piBinderX : P' λ forallBinderX : P' piBinderX : ∀ R' : * [BinderF R'].
let forallBinderF := Λ R' : * Λ P' : * λ lambdaBinderX : P' λ LambdaBinderX : P' λ piBinderX : P' λ forallBinderX : P' forallBinderX : ∀ R' : * [BinderF R'].
let WkIndBinderF := λ R' : * λ r' : [BinderF R'] ∀ Q' : Π _ : [BinderF R'] * Π lambdaBinderP : [Q' <lambdaBinderF R'>] Π LambdaBinderP : [Q' <LambdaBinderF R'>] Π piBinderP : [Q' <piBinderF R'>] Π forallBinderP : [Q' <forallBinderF R'>] [Q' r'] : Π R' : * Π r' : [BinderF R'] *.
let lambdaBinderWkIndF := Λ R' : * Λ Q' : Π _ : [BinderF R'] * λ lambdaBinderP : [Q' <lambdaBinderF R'>] λ LambdaBinderP : [Q' <LambdaBinderF R'>] λ piBinderP : [Q' <piBinderF R'>] λ forallBinderP : [Q' <forallBinderF R'>] lambdaBinderP : ∀ R' : * [[WkIndBinderF R'] <lambdaBinderF R'>].
let LambdaBinderWkIndF := Λ R' : * Λ Q' : Π _ : [BinderF R'] * λ lambdaBinderP : [Q' <lambdaBinderF R'>] λ LambdaBinderP : [Q' <LambdaBinderF R'>] λ piBinderP : [Q' <piBinderF R'>] λ forallBinderP : [Q' <forallBinderF R'>] LambdaBinderP : ∀ R' : * [[WkIndBinderF R'] <LambdaBinderF R'>].
let piBinderWkIndF := Λ R' : * Λ Q' : Π _ : [BinderF R'] * λ lambdaBinderP : [Q' <lambdaBinderF R'>] λ LambdaBinderP : [Q' <LambdaBinderF R'>] λ piBinderP : [Q' <piBinderF R'>] λ forallBinderP : [Q' <forallBinderF R'>] piBinderP : ∀ R' : * [[WkIndBinderF R'] <piBinderF R'>].
let forallBinderWkIndF := Λ R' : * Λ Q' : Π _ : [BinderF R'] * λ lambdaBinderP : [Q' <lambdaBinderF R'>] λ LambdaBinderP : [Q' <LambdaBinderF R'>] λ piBinderP : [Q' <piBinderF R'>] λ forallBinderP : [Q' <forallBinderF R'>] forallBinderP : ∀ R' : * [[WkIndBinderF R'] <forallBinderF R'>].
let monoBinderF := Λ A' : * Λ B' : * λ c' : [[Cast A'] B'] <<<<intrCast [BinderF A']> [BinderF B']> λ x' : [BinderF A'] Λ P' : * λ lambdaBinderX : P' λ LambdaBinderX : P' λ piBinderX : P' λ forallBinderX : P' [[[[<x' P'> lambdaBinderX] LambdaBinderX] piBinderX] forallBinderX]> <beta [BinderF A']>> : [Mono BinderF].
let monoWkIndBinderF := Λ A' : * Λ B' : * λ c' : [[Cast A'] B'] λ y' : [BinderF A'] <<<<intrCast [[WkIndBinderF A'] y']> [[WkIndBinderF B'] [<<<elimCast [BinderF A']> [BinderF B']> [<<monoBinderF A'> B'> c']> y']]> λ x' : [[WkIndBinderF A'] y'] Λ Q' : Π _ : [BinderF B'] * λ lambdaBinderP : [Q' <lambdaBinderF B'>] λ LambdaBinderP : [Q' <LambdaBinderF B'>] λ piBinderP : [Q' <piBinderF B'>] λ forallBinderP : [Q' <forallBinderF B'>] [[[[<x' λ z' : [BinderF A'] [Q' [<<<elimCast [BinderF A']> [BinderF B']> [<<monoBinderF A'> B'> c']> z']]> lambdaBinderP] LambdaBinderP] piBinderP] forallBinderP]> <beta [[WkIndBinderF A'] y']>> : [[[MonoD BinderF] WkIndBinderF] monoBinderF].
let BinderFI := λ R' : * [[Iota [BinderF R']] [WkIndBinderF R']] : Π R' : * *.
let monoBinderFI := [[[[iotaMono BinderF] WkIndBinderF] monoBinderF] monoWkIndBinderF] : [Mono BinderFI].
let Binder := [Rec BinderFI] : *.
let rollBinder := <[roll BinderFI] monoBinderFI> : Π _ : [BinderFI Binder] Binder.
let unrollBinder := <[unroll BinderFI] monoBinderFI> : Π _ : Binder [BinderFI Binder].
let lambdaBinder := [rollBinder [[[<<iPair [BinderF Binder]> [WkIndBinderF Binder]> <lambdaBinderF Binder>] <lambdaBinderWkIndF Binder>] [<beta [BinderF Binder]> <lambdaBinderF Binder>]]] : Binder.
let LambdaBinder := [rollBinder [[[<<iPair [BinderF Binder]> [WkIndBinderF Binder]> <LambdaBinderF Binder>] <LambdaBinderWkIndF Binder>] [<beta [BinderF Binder]> <LambdaBinderF Binder>]]] : Binder.
let piBinder := [rollBinder [[[<<iPair [BinderF Binder]> [WkIndBinderF Binder]> <piBinderF Binder>] <piBinderWkIndF Binder>] [<beta [BinderF Binder]> <piBinderF Binder>]]] : Binder.
let forallBinder := [rollBinder [[[<<iPair [BinderF Binder]> [WkIndBinderF Binder]> <forallBinderF Binder>] <forallBinderWkIndF Binder>] [<beta [BinderF Binder]> <forallBinderF Binder>]]] : Binder.
let BinderRec := λ Q' : Π _ : Binder * λ x' : Binder λ A0 : * λ A1 : * λ A2 : * λ A3 : * Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 [Q' x'] : Π Q' : Π _ : Binder * Π x' : Binder Π A0 : * Π A1 : * Π A2 : * Π A3 : * *.
let lambdaBinderRecF := λ Q' : Π _ : Binder * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 [Q' lambdaBinder] : Π Q' : Π _ : Binder * *.
let LambdaBinderRecF := λ Q' : Π _ : Binder * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 [Q' LambdaBinder] : Π Q' : Π _ : Binder * *.
let piBinderRecF := λ Q' : Π _ : Binder * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 [Q' piBinder] : Π Q' : Π _ : Binder * *.
let forallBinderRecF := λ Q' : Π _ : Binder * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 [Q' forallBinder] : Π Q' : Π _ : Binder * *.
let BinderLRP := λ x' : Binder ∀ Q' : Π _ : Binder * [[[[[[BinderRec Q'] x'] [lambdaBinderRecF Q']] [LambdaBinderRecF Q']] [piBinderRecF Q']] [forallBinderRecF Q']] : Π x' : Binder *.
let BinderLR := [[Iota Binder] BinderLRP] : *.
let BinderCastLRtoLR' := Λ Q' : Π _ : Binder * <<<<intrCast BinderLR> [[Iota Binder] λ x' : Binder [[[[[[BinderRec Q'] x'] [lambdaBinderRecF Q']] [LambdaBinderRecF Q']] [piBinderRecF Q']] [forallBinderRecF Q']]]> λ x' : BinderLR [[[<<iPair Binder> λ x' : Binder [[[[[[BinderRec Q'] x'] [lambdaBinderRecF Q']] [LambdaBinderRecF Q']] [piBinderRecF Q']] [forallBinderRecF Q']]> [<<iPr1 Binder> BinderLRP> x']] <[<<iPr2 Binder> BinderLRP> x'] Q'>] [<beta Binder> [<<iPr1 Binder> BinderLRP> x']]]> <beta BinderLR>> : ∀ Q' : Π _ : Binder * [[Cast BinderLR] [[Iota Binder] λ x' : Binder [[[[[[BinderRec Q'] x'] [lambdaBinderRecF Q']] [LambdaBinderRecF Q']] [piBinderRecF Q']] [forallBinderRecF Q']]]].
let lambdaBinderLR := [[[<<iPair Binder> BinderLRP> lambdaBinder] Λ Q' : Π _ : Binder * λ lambdaBinderX : [lambdaBinderRecF Q'] λ LambdaBinderX : [LambdaBinderRecF Q'] λ piBinderX : [piBinderRecF Q'] λ forallBinderX : [forallBinderRecF Q'] <<<<lambdaBinderX [lambdaBinderRecF Q']> [LambdaBinderRecF Q']> [piBinderRecF Q']> [forallBinderRecF Q']>] [<beta Binder> lambdaBinder]] : BinderLR.
let LambdaBinderLR := [[[<<iPair Binder> BinderLRP> LambdaBinder] Λ Q' : Π _ : Binder * λ lambdaBinderX : [lambdaBinderRecF Q'] λ LambdaBinderX : [LambdaBinderRecF Q'] λ piBinderX : [piBinderRecF Q'] λ forallBinderX : [forallBinderRecF Q'] <<<<LambdaBinderX [lambdaBinderRecF Q']> [LambdaBinderRecF Q']> [piBinderRecF Q']> [forallBinderRecF Q']>] [<beta Binder> LambdaBinder]] : BinderLR.
let piBinderLR := [[[<<iPair Binder> BinderLRP> piBinder] Λ Q' : Π _ : Binder * λ lambdaBinderX : [lambdaBinderRecF Q'] λ LambdaBinderX : [LambdaBinderRecF Q'] λ piBinderX : [piBinderRecF Q'] λ forallBinderX : [forallBinderRecF Q'] <<<<piBinderX [lambdaBinderRecF Q']> [LambdaBinderRecF Q']> [piBinderRecF Q']> [forallBinderRecF Q']>] [<beta Binder> piBinder]] : BinderLR.
let forallBinderLR := [[[<<iPair Binder> BinderLRP> forallBinder] Λ Q' : Π _ : Binder * λ lambdaBinderX : [lambdaBinderRecF Q'] λ LambdaBinderX : [LambdaBinderRecF Q'] λ piBinderX : [piBinderRecF Q'] λ forallBinderX : [forallBinderRecF Q'] <<<<forallBinderX [lambdaBinderRecF Q']> [LambdaBinderRecF Q']> [piBinderRecF Q']> [forallBinderRecF Q']>] [<beta Binder> forallBinder]] : BinderLR.
let rollBinderLR := <<<<intrCast [BinderFI BinderLR]> BinderLR> λ x' : [BinderFI BinderLR] [[[[<[<<iPr1 [BinderF BinderLR]> [WkIndBinderF BinderLR]> x'] BinderLR> lambdaBinderLR] LambdaBinderLR] piBinderLR] forallBinderLR]> λ x' : [BinderFI BinderLR] [[[[<[<<iPr2 [BinderF BinderLR]> [WkIndBinderF BinderLR]> x'] λ x' : [BinderF BinderLR] [[<<UEq BinderLR> [BinderF BinderLR]> [[[[<x' BinderLR> lambdaBinderLR] LambdaBinderLR] piBinderLR] forallBinderLR]] x']> [<beta [BinderF BinderLR]> <lambdaBinderF BinderLR>]] [<beta [BinderF BinderLR]> <LambdaBinderF BinderLR>]] [<beta [BinderF BinderLR]> <piBinderF BinderLR>]] [<beta [BinderF BinderLR]> <forallBinderF BinderLR>]]> : [[Cast [BinderFI BinderLR]] BinderLR].
let toBinderLR := <<[recLB BinderFI] BinderLR> rollBinderLR> : [[Cast Binder] BinderLR].
let recBinderLR := Λ Q' : Π _ : Binder * λ x' : BinderLR λ a0 : [lambdaBinderRecF Q'] λ a1 : [LambdaBinderRecF Q'] λ a2 : [piBinderRecF Q'] λ a3 : [forallBinderRecF Q'] [[[[<[<<iPr2 Binder> BinderLRP> x'] Q'> a0] a1] a2] a3] : ∀ Q' : Π _ : Binder * Π x' : BinderLR Π a0 : [lambdaBinderRecF Q'] Π a1 : [LambdaBinderRecF Q'] Π a2 : [piBinderRecF Q'] Π a3 : [forallBinderRecF Q'] Π a0 : [lambdaBinderRecF Q'] Π a1 : [LambdaBinderRecF Q'] Π a2 : [piBinderRecF Q'] Π a3 : [forallBinderRecF Q'] [Q' [<<iPr1 Binder> BinderLRP> x']].
let lambdaBinderRecFPf := Λ P' : Π _ : Binder * λ hlambdaBinder : [P' lambdaBinder] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 hlambdaBinder : ∀ P' : Π _ : Binder * Π hlambdaBinder : [P' lambdaBinder] [lambdaBinderRecF P'].
let LambdaBinderRecFPf := Λ P' : Π _ : Binder * λ hLambdaBinder : [P' LambdaBinder] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 hLambdaBinder : ∀ P' : Π _ : Binder * Π hLambdaBinder : [P' LambdaBinder] [LambdaBinderRecF P'].
let piBinderRecFPf := Λ P' : Π _ : Binder * λ hpiBinder : [P' piBinder] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 hpiBinder : ∀ P' : Π _ : Binder * Π hpiBinder : [P' piBinder] [piBinderRecF P'].
let forallBinderRecFPf := Λ P' : Π _ : Binder * λ hforallBinder : [P' forallBinder] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 hforallBinder : ∀ P' : Π _ : Binder * Π hforallBinder : [P' forallBinder] [forallBinderRecF P'].
let indBinder := Λ P' : Π _ : Binder * λ hlambdaBinder : [P' lambdaBinder] λ hLambdaBinder : [P' LambdaBinder] λ hpiBinder : [P' piBinder] λ hforallBinder : [P' forallBinder] λ x' : Binder [[[[[[[[[<recBinderLR P'> [<<<elimCast Binder> BinderLR> toBinderLR> x']] [<lambdaBinderRecFPf P'> hlambdaBinder]] [<LambdaBinderRecFPf P'> hLambdaBinder]] [<piBinderRecFPf P'> hpiBinder]] [<forallBinderRecFPf P'> hforallBinder]] [<lambdaBinderRecFPf P'> hlambdaBinder]] [<LambdaBinderRecFPf P'> hLambdaBinder]] [<piBinderRecFPf P'> hpiBinder]] [<forallBinderRecFPf P'> hforallBinder]] : ∀ P' : Π _ : Binder * Π hlambdaBinder : [P' lambdaBinder] Π hLambdaBinder : [P' LambdaBinder] Π hpiBinder : [P' piBinder] Π hforallBinder : [P' forallBinder] Π x' : Binder [P' x'].
let TermF := λ R' : * ∀ P' : * Π varTermX : Π a0 : Var P' Π sortTermX : Π a0 : Sort P' Π binderTermX : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' P' Π appLTerm'X : Π a0 : R' Π a1 : [List R'] P' Π charTermX : Π a0 : Char P' Π unknownTermX : P' Π unquoteTermX : Π a0 : R' P' Π argTermX : Π a0 : Bool Π a1 : R' P' P' : Π R' : * *.
let varTermF := Λ R' : * λ a0 : Var Λ P' : * λ varTermX : Π a0 : Var P' λ sortTermX : Π a0 : Sort P' λ binderTermX : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' P' λ appLTerm'X : Π a0 : R' Π a1 : [List R'] P' λ charTermX : Π a0 : Char P' λ unknownTermX : P' λ unquoteTermX : Π a0 : R' P' λ argTermX : Π a0 : Bool Π a1 : R' P' [varTermX a0] : ∀ R' : * Π a0 : Var [TermF R'].
let sortTermF := Λ R' : * λ a0 : Sort Λ P' : * λ varTermX : Π a0 : Var P' λ sortTermX : Π a0 : Sort P' λ binderTermX : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' P' λ appLTerm'X : Π a0 : R' Π a1 : [List R'] P' λ charTermX : Π a0 : Char P' λ unknownTermX : P' λ unquoteTermX : Π a0 : R' P' λ argTermX : Π a0 : Bool Π a1 : R' P' [sortTermX a0] : ∀ R' : * Π a0 : Sort [TermF R'].
let binderTermF := Λ R' : * λ a0 : Binder λ a1 : String λ a2 : R' λ a3 : R' Λ P' : * λ varTermX : Π a0 : Var P' λ sortTermX : Π a0 : Sort P' λ binderTermX : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' P' λ appLTerm'X : Π a0 : R' Π a1 : [List R'] P' λ charTermX : Π a0 : Char P' λ unknownTermX : P' λ unquoteTermX : Π a0 : R' P' λ argTermX : Π a0 : Bool Π a1 : R' P' [[[[binderTermX a0] a1] a2] a3] : ∀ R' : * Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [TermF R'].
let appLTerm'F := Λ R' : * λ a0 : R' λ a1 : [List R'] Λ P' : * λ varTermX : Π a0 : Var P' λ sortTermX : Π a0 : Sort P' λ binderTermX : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' P' λ appLTerm'X : Π a0 : R' Π a1 : [List R'] P' λ charTermX : Π a0 : Char P' λ unknownTermX : P' λ unquoteTermX : Π a0 : R' P' λ argTermX : Π a0 : Bool Π a1 : R' P' [[appLTerm'X a0] a1] : ∀ R' : * Π a0 : R' Π a1 : [List R'] [TermF R'].
let charTermF := Λ R' : * λ a0 : Char Λ P' : * λ varTermX : Π a0 : Var P' λ sortTermX : Π a0 : Sort P' λ binderTermX : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' P' λ appLTerm'X : Π a0 : R' Π a1 : [List R'] P' λ charTermX : Π a0 : Char P' λ unknownTermX : P' λ unquoteTermX : Π a0 : R' P' λ argTermX : Π a0 : Bool Π a1 : R' P' [charTermX a0] : ∀ R' : * Π a0 : Char [TermF R'].
let unknownTermF := Λ R' : * Λ P' : * λ varTermX : Π a0 : Var P' λ sortTermX : Π a0 : Sort P' λ binderTermX : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' P' λ appLTerm'X : Π a0 : R' Π a1 : [List R'] P' λ charTermX : Π a0 : Char P' λ unknownTermX : P' λ unquoteTermX : Π a0 : R' P' λ argTermX : Π a0 : Bool Π a1 : R' P' unknownTermX : ∀ R' : * [TermF R'].
let unquoteTermF := Λ R' : * λ a0 : R' Λ P' : * λ varTermX : Π a0 : Var P' λ sortTermX : Π a0 : Sort P' λ binderTermX : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' P' λ appLTerm'X : Π a0 : R' Π a1 : [List R'] P' λ charTermX : Π a0 : Char P' λ unknownTermX : P' λ unquoteTermX : Π a0 : R' P' λ argTermX : Π a0 : Bool Π a1 : R' P' [unquoteTermX a0] : ∀ R' : * Π a0 : R' [TermF R'].
let argTermF := Λ R' : * λ a0 : Bool λ a1 : R' Λ P' : * λ varTermX : Π a0 : Var P' λ sortTermX : Π a0 : Sort P' λ binderTermX : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' P' λ appLTerm'X : Π a0 : R' Π a1 : [List R'] P' λ charTermX : Π a0 : Char P' λ unknownTermX : P' λ unquoteTermX : Π a0 : R' P' λ argTermX : Π a0 : Bool Π a1 : R' P' [[argTermX a0] a1] : ∀ R' : * Π a0 : Bool Π a1 : R' [TermF R'].
let WkIndTermF := λ R' : * λ r' : [TermF R'] ∀ Q' : Π _ : [TermF R'] * Π varTermP : Π a0 : Var [Q' [<varTermF R'> a0]] Π sortTermP : Π a0 : Sort [Q' [<sortTermF R'> a0]] Π binderTermP : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [Q' [[[[<binderTermF R'> a0] a1] a2] a3]] Π appLTerm'P : Π a0 : R' Π a1 : [List R'] [Q' [[<appLTerm'F R'> a0] a1]] Π charTermP : Π a0 : Char [Q' [<charTermF R'> a0]] Π unknownTermP : [Q' <unknownTermF R'>] Π unquoteTermP : Π a0 : R' [Q' [<unquoteTermF R'> a0]] Π argTermP : Π a0 : Bool Π a1 : R' [Q' [[<argTermF R'> a0] a1]] [Q' r'] : Π R' : * Π r' : [TermF R'] *.
let varTermWkIndF := Λ R' : * λ a0 : Var Λ Q' : Π _ : [TermF R'] * λ varTermP : Π a0 : Var [Q' [<varTermF R'> a0]] λ sortTermP : Π a0 : Sort [Q' [<sortTermF R'> a0]] λ binderTermP : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [Q' [[[[<binderTermF R'> a0] a1] a2] a3]] λ appLTerm'P : Π a0 : R' Π a1 : [List R'] [Q' [[<appLTerm'F R'> a0] a1]] λ charTermP : Π a0 : Char [Q' [<charTermF R'> a0]] λ unknownTermP : [Q' <unknownTermF R'>] λ unquoteTermP : Π a0 : R' [Q' [<unquoteTermF R'> a0]] λ argTermP : Π a0 : Bool Π a1 : R' [Q' [[<argTermF R'> a0] a1]] [varTermP a0] : ∀ R' : * Π a0 : Var [[WkIndTermF R'] [<varTermF R'> a0]].
let sortTermWkIndF := Λ R' : * λ a0 : Sort Λ Q' : Π _ : [TermF R'] * λ varTermP : Π a0 : Var [Q' [<varTermF R'> a0]] λ sortTermP : Π a0 : Sort [Q' [<sortTermF R'> a0]] λ binderTermP : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [Q' [[[[<binderTermF R'> a0] a1] a2] a3]] λ appLTerm'P : Π a0 : R' Π a1 : [List R'] [Q' [[<appLTerm'F R'> a0] a1]] λ charTermP : Π a0 : Char [Q' [<charTermF R'> a0]] λ unknownTermP : [Q' <unknownTermF R'>] λ unquoteTermP : Π a0 : R' [Q' [<unquoteTermF R'> a0]] λ argTermP : Π a0 : Bool Π a1 : R' [Q' [[<argTermF R'> a0] a1]] [sortTermP a0] : ∀ R' : * Π a0 : Sort [[WkIndTermF R'] [<sortTermF R'> a0]].
let binderTermWkIndF := Λ R' : * λ a0 : Binder λ a1 : String λ a2 : R' λ a3 : R' Λ Q' : Π _ : [TermF R'] * λ varTermP : Π a0 : Var [Q' [<varTermF R'> a0]] λ sortTermP : Π a0 : Sort [Q' [<sortTermF R'> a0]] λ binderTermP : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [Q' [[[[<binderTermF R'> a0] a1] a2] a3]] λ appLTerm'P : Π a0 : R' Π a1 : [List R'] [Q' [[<appLTerm'F R'> a0] a1]] λ charTermP : Π a0 : Char [Q' [<charTermF R'> a0]] λ unknownTermP : [Q' <unknownTermF R'>] λ unquoteTermP : Π a0 : R' [Q' [<unquoteTermF R'> a0]] λ argTermP : Π a0 : Bool Π a1 : R' [Q' [[<argTermF R'> a0] a1]] [[[[binderTermP a0] a1] a2] a3] : ∀ R' : * Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [[WkIndTermF R'] [[[[<binderTermF R'> a0] a1] a2] a3]].
let appLTerm'WkIndF := Λ R' : * λ a0 : R' λ a1 : [List R'] Λ Q' : Π _ : [TermF R'] * λ varTermP : Π a0 : Var [Q' [<varTermF R'> a0]] λ sortTermP : Π a0 : Sort [Q' [<sortTermF R'> a0]] λ binderTermP : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [Q' [[[[<binderTermF R'> a0] a1] a2] a3]] λ appLTerm'P : Π a0 : R' Π a1 : [List R'] [Q' [[<appLTerm'F R'> a0] a1]] λ charTermP : Π a0 : Char [Q' [<charTermF R'> a0]] λ unknownTermP : [Q' <unknownTermF R'>] λ unquoteTermP : Π a0 : R' [Q' [<unquoteTermF R'> a0]] λ argTermP : Π a0 : Bool Π a1 : R' [Q' [[<argTermF R'> a0] a1]] [[appLTerm'P a0] a1] : ∀ R' : * Π a0 : R' Π a1 : [List R'] [[WkIndTermF R'] [[<appLTerm'F R'> a0] a1]].
let charTermWkIndF := Λ R' : * λ a0 : Char Λ Q' : Π _ : [TermF R'] * λ varTermP : Π a0 : Var [Q' [<varTermF R'> a0]] λ sortTermP : Π a0 : Sort [Q' [<sortTermF R'> a0]] λ binderTermP : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [Q' [[[[<binderTermF R'> a0] a1] a2] a3]] λ appLTerm'P : Π a0 : R' Π a1 : [List R'] [Q' [[<appLTerm'F R'> a0] a1]] λ charTermP : Π a0 : Char [Q' [<charTermF R'> a0]] λ unknownTermP : [Q' <unknownTermF R'>] λ unquoteTermP : Π a0 : R' [Q' [<unquoteTermF R'> a0]] λ argTermP : Π a0 : Bool Π a1 : R' [Q' [[<argTermF R'> a0] a1]] [charTermP a0] : ∀ R' : * Π a0 : Char [[WkIndTermF R'] [<charTermF R'> a0]].
let unknownTermWkIndF := Λ R' : * Λ Q' : Π _ : [TermF R'] * λ varTermP : Π a0 : Var [Q' [<varTermF R'> a0]] λ sortTermP : Π a0 : Sort [Q' [<sortTermF R'> a0]] λ binderTermP : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [Q' [[[[<binderTermF R'> a0] a1] a2] a3]] λ appLTerm'P : Π a0 : R' Π a1 : [List R'] [Q' [[<appLTerm'F R'> a0] a1]] λ charTermP : Π a0 : Char [Q' [<charTermF R'> a0]] λ unknownTermP : [Q' <unknownTermF R'>] λ unquoteTermP : Π a0 : R' [Q' [<unquoteTermF R'> a0]] λ argTermP : Π a0 : Bool Π a1 : R' [Q' [[<argTermF R'> a0] a1]] unknownTermP : ∀ R' : * [[WkIndTermF R'] <unknownTermF R'>].
let unquoteTermWkIndF := Λ R' : * λ a0 : R' Λ Q' : Π _ : [TermF R'] * λ varTermP : Π a0 : Var [Q' [<varTermF R'> a0]] λ sortTermP : Π a0 : Sort [Q' [<sortTermF R'> a0]] λ binderTermP : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [Q' [[[[<binderTermF R'> a0] a1] a2] a3]] λ appLTerm'P : Π a0 : R' Π a1 : [List R'] [Q' [[<appLTerm'F R'> a0] a1]] λ charTermP : Π a0 : Char [Q' [<charTermF R'> a0]] λ unknownTermP : [Q' <unknownTermF R'>] λ unquoteTermP : Π a0 : R' [Q' [<unquoteTermF R'> a0]] λ argTermP : Π a0 : Bool Π a1 : R' [Q' [[<argTermF R'> a0] a1]] [unquoteTermP a0] : ∀ R' : * Π a0 : R' [[WkIndTermF R'] [<unquoteTermF R'> a0]].
let argTermWkIndF := Λ R' : * λ a0 : Bool λ a1 : R' Λ Q' : Π _ : [TermF R'] * λ varTermP : Π a0 : Var [Q' [<varTermF R'> a0]] λ sortTermP : Π a0 : Sort [Q' [<sortTermF R'> a0]] λ binderTermP : Π a0 : Binder Π a1 : String Π a2 : R' Π a3 : R' [Q' [[[[<binderTermF R'> a0] a1] a2] a3]] λ appLTerm'P : Π a0 : R' Π a1 : [List R'] [Q' [[<appLTerm'F R'> a0] a1]] λ charTermP : Π a0 : Char [Q' [<charTermF R'> a0]] λ unknownTermP : [Q' <unknownTermF R'>] λ unquoteTermP : Π a0 : R' [Q' [<unquoteTermF R'> a0]] λ argTermP : Π a0 : Bool Π a1 : R' [Q' [[<argTermF R'> a0] a1]] [[argTermP a0] a1] : ∀ R' : * Π a0 : Bool Π a1 : R' [[WkIndTermF R'] [[<argTermF R'> a0] a1]].
let monoTermF := Λ A' : * Λ B' : * λ c' : [[Cast A'] B'] <<<<intrCast [TermF A']> [TermF B']> λ x' : [TermF A'] Λ P' : * λ varTermX : Π a0 : Var P' λ sortTermX : Π a0 : Sort P' λ binderTermX : Π a0 : Binder Π a1 : String Π a2 : B' Π a3 : B' P' λ appLTerm'X : Π a0 : B' Π a1 : [List B'] P' λ charTermX : Π a0 : Char P' λ unknownTermX : P' λ unquoteTermX : Π a0 : B' P' λ argTermX : Π a0 : Bool Π a1 : B' P' [[[[[[[[<x' P'> λ a0 : Var [varTermX [<<<elimCast Var> Var> [<<<monoConst Var> A'> B'> c']> a0]]] λ a0 : Sort [sortTermX [<<<elimCast Sort> Sort> [<<<monoConst Sort> A'> B'> c']> a0]]] λ a0 : Binder λ a1 : String λ a2 : A' λ a3 : A' [[[[binderTermX [<<<elimCast Binder> Binder> [<<<monoConst Binder> A'> B'> c']> a0]] [<<<elimCast String> String> [<<<monoConst String> A'> B'> c']> a1]] [<<<elimCast A'> B'> [<<monoId A'> B'> c']> a2]] [<<<elimCast A'> B'> [<<monoId A'> B'> c']> a3]]] λ a0 : A' λ a1 : [List A'] [[appLTerm'X [<<<elimCast A'> B'> [<<monoId A'> B'> c']> a0]] [<<<elimCast [List A']> [List B']> [<<monoList A'> B'> c']> a1]]] λ a0 : Char [charTermX [<<<elimCast Char> Char> [<<<monoConst Char> A'> B'> c']> a0]]] unknownTermX] λ a0 : A' [unquoteTermX [<<<elimCast A'> B'> [<<monoId A'> B'> c']> a0]]] λ a0 : Bool λ a1 : A' [[argTermX [<<<elimCast Bool> Bool> [<<<monoConst Bool> A'> B'> c']> a0]] [<<<elimCast A'> B'> [<<monoId A'> B'> c']> a1]]]> <beta [TermF A']>> : [Mono TermF].
let monoWkIndTermF := Λ A' : * Λ B' : * λ c' : [[Cast A'] B'] λ y' : [TermF A'] <<<<intrCast [[WkIndTermF A'] y']> [[WkIndTermF B'] [<<<elimCast [TermF A']> [TermF B']> [<<monoTermF A'> B'> c']> y']]> λ x' : [[WkIndTermF A'] y'] Λ Q' : Π _ : [TermF B'] * λ varTermP : Π a0 : Var [Q' [<varTermF B'> a0]] λ sortTermP : Π a0 : Sort [Q' [<sortTermF B'> a0]] λ binderTermP : Π a0 : Binder Π a1 : String Π a2 : B' Π a3 : B' [Q' [[[[<binderTermF B'> a0] a1] a2] a3]] λ appLTerm'P : Π a0 : B' Π a1 : [List B'] [Q' [[<appLTerm'F B'> a0] a1]] λ charTermP : Π a0 : Char [Q' [<charTermF B'> a0]] λ unknownTermP : [Q' <unknownTermF B'>] λ unquoteTermP : Π a0 : B' [Q' [<unquoteTermF B'> a0]] λ argTermP : Π a0 : Bool Π a1 : B' [Q' [[<argTermF B'> a0] a1]] [[[[[[[[<x' λ z' : [TermF A'] [Q' [<<<elimCast [TermF A']> [TermF B']> [<<monoTermF A'> B'> c']> z']]> λ a0 : Var [varTermP [<<<elimCast Var> Var> [<<<monoConst Var> A'> B'> c']> a0]]] λ a0 : Sort [sortTermP [<<<elimCast Sort> Sort> [<<<monoConst Sort> A'> B'> c']> a0]]] λ a0 : Binder λ a1 : String λ a2 : A' λ a3 : A' [[[[binderTermP [<<<elimCast Binder> Binder> [<<<monoConst Binder> A'> B'> c']> a0]] [<<<elimCast String> String> [<<<monoConst String> A'> B'> c']> a1]] [<<<elimCast A'> B'> [<<monoId A'> B'> c']> a2]] [<<<elimCast A'> B'> [<<monoId A'> B'> c']> a3]]] λ a0 : A' λ a1 : [List A'] [[appLTerm'P [<<<elimCast A'> B'> [<<monoId A'> B'> c']> a0]] [<<<elimCast [List A']> [List B']> [<<monoList A'> B'> c']> a1]]] λ a0 : Char [charTermP [<<<elimCast Char> Char> [<<<monoConst Char> A'> B'> c']> a0]]] unknownTermP] λ a0 : A' [unquoteTermP [<<<elimCast A'> B'> [<<monoId A'> B'> c']> a0]]] λ a0 : Bool λ a1 : A' [[argTermP [<<<elimCast Bool> Bool> [<<<monoConst Bool> A'> B'> c']> a0]] [<<<elimCast A'> B'> [<<monoId A'> B'> c']> a1]]]> <beta [[WkIndTermF A'] y']>> : [[[MonoD TermF] WkIndTermF] monoTermF].
let TermFI := λ R' : * [[Iota [TermF R']] [WkIndTermF R']] : Π R' : * *.
let monoTermFI := [[[[iotaMono TermF] WkIndTermF] monoTermF] monoWkIndTermF] : [Mono TermFI].
let Term := [Rec TermFI] : *.
let rollTerm := <[roll TermFI] monoTermFI> : Π _ : [TermFI Term] Term.
let unrollTerm := <[unroll TermFI] monoTermFI> : Π _ : Term [TermFI Term].
let varTerm := λ a0 : Var [rollTerm [[[<<iPair [TermF Term]> [WkIndTermF Term]> [<varTermF Term> a0]] [<varTermWkIndF Term> a0]] [<beta [TermF Term]> [<varTermF Term> a0]]]] : Π a0 : Var Term.
let sortTerm := λ a0 : Sort [rollTerm [[[<<iPair [TermF Term]> [WkIndTermF Term]> [<sortTermF Term> a0]] [<sortTermWkIndF Term> a0]] [<beta [TermF Term]> [<sortTermF Term> a0]]]] : Π a0 : Sort Term.
let binderTerm := λ a0 : Binder λ a1 : String λ a2 : Term λ a3 : Term [rollTerm [[[<<iPair [TermF Term]> [WkIndTermF Term]> [[[[<binderTermF Term> a0] a1] a2] a3]] [[[[<binderTermWkIndF Term> a0] a1] a2] a3]] [<beta [TermF Term]> [[[[<binderTermF Term> a0] a1] a2] a3]]]] : Π a0 : Binder Π a1 : String Π a2 : Term Π a3 : Term Term.
let appLTerm' := λ a0 : Term λ a1 : [List Term] [rollTerm [[[<<iPair [TermF Term]> [WkIndTermF Term]> [[<appLTerm'F Term> a0] a1]] [[<appLTerm'WkIndF Term> a0] a1]] [<beta [TermF Term]> [[<appLTerm'F Term> a0] a1]]]] : Π a0 : Term Π a1 : [List Term] Term.
let charTerm := λ a0 : Char [rollTerm [[[<<iPair [TermF Term]> [WkIndTermF Term]> [<charTermF Term> a0]] [<charTermWkIndF Term> a0]] [<beta [TermF Term]> [<charTermF Term> a0]]]] : Π a0 : Char Term.
let unknownTerm := [rollTerm [[[<<iPair [TermF Term]> [WkIndTermF Term]> <unknownTermF Term>] <unknownTermWkIndF Term>] [<beta [TermF Term]> <unknownTermF Term>]]] : Term.
let unquoteTerm := λ a0 : Term [rollTerm [[[<<iPair [TermF Term]> [WkIndTermF Term]> [<unquoteTermF Term> a0]] [<unquoteTermWkIndF Term> a0]] [<beta [TermF Term]> [<unquoteTermF Term> a0]]]] : Π a0 : Term Term.
let argTerm := λ a0 : Bool λ a1 : Term [rollTerm [[[<<iPair [TermF Term]> [WkIndTermF Term]> [[<argTermF Term> a0] a1]] [[<argTermWkIndF Term> a0] a1]] [<beta [TermF Term]> [[<argTermF Term> a0] a1]]]] : Π a0 : Bool Π a1 : Term Term.
let TermRec := λ Q' : Π _ : Term * λ x' : Term λ A0 : * λ A1 : * λ A2 : * λ A3 : * λ A4 : * λ A5 : * λ A6 : * λ A7 : * Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A4 Π _ : A5 Π _ : A6 Π _ : A7 Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A4 Π _ : A5 Π _ : A6 Π _ : A7 [Q' x'] : Π Q' : Π _ : Term * Π x' : Term Π A0 : * Π A1 : * Π A2 : * Π A3 : * Π A4 : * Π A5 : * Π A6 : * Π A7 : * *.
let varTermRecF := λ Q' : Π _ : Term * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * ∀ A4 : * ∀ A5 : * ∀ A6 : * ∀ A7 : * Π a0 : Var Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A4 Π _ : A5 Π _ : A6 Π _ : A7 [Q' [varTerm [<<<elimCast Var> Var> [<<<monoConst Var> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a0]]] : Π Q' : Π _ : Term * *.
let sortTermRecF := λ Q' : Π _ : Term * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * ∀ A4 : * ∀ A5 : * ∀ A6 : * ∀ A7 : * Π a0 : Sort Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A4 Π _ : A5 Π _ : A6 Π _ : A7 [Q' [sortTerm [<<<elimCast Sort> Sort> [<<<monoConst Sort> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a0]]] : Π Q' : Π _ : Term * *.
let binderTermRecF := λ Q' : Π _ : Term * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * ∀ A4 : * ∀ A5 : * ∀ A6 : * ∀ A7 : * Π a0 : Binder Π a1 : String Π a2 : [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]] Π a3 : [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]] Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A4 Π _ : A5 Π _ : A6 Π _ : A7 [Q' [[[[binderTerm [<<<elimCast Binder> Binder> [<<<monoConst Binder> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a0]] [<<<elimCast String> String> [<<<monoConst String> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a1]] [<<<elimCast [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> [<<monoId [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a2]] [<<<elimCast [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> [<<monoId [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a3]]] : Π Q' : Π _ : Term * *.
let appLTerm'RecF := λ Q' : Π _ : Term * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * ∀ A4 : * ∀ A5 : * ∀ A6 : * ∀ A7 : * Π a0 : [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]] Π a1 : [List [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]] Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A4 Π _ : A5 Π _ : A6 Π _ : A7 [Q' [[appLTerm' [<<<elimCast [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> [<<monoId [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a0]] [<<<elimCast [List [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]]> [List Term]> [<<monoList [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a1]]] : Π Q' : Π _ : Term * *.
let charTermRecF := λ Q' : Π _ : Term * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * ∀ A4 : * ∀ A5 : * ∀ A6 : * ∀ A7 : * Π a0 : Char Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A4 Π _ : A5 Π _ : A6 Π _ : A7 [Q' [charTerm [<<<elimCast Char> Char> [<<<monoConst Char> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a0]]] : Π Q' : Π _ : Term * *.
let unknownTermRecF := λ Q' : Π _ : Term * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * ∀ A4 : * ∀ A5 : * ∀ A6 : * ∀ A7 : * Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A4 Π _ : A5 Π _ : A6 Π _ : A7 [Q' unknownTerm] : Π Q' : Π _ : Term * *.
let unquoteTermRecF := λ Q' : Π _ : Term * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * ∀ A4 : * ∀ A5 : * ∀ A6 : * ∀ A7 : * Π a0 : [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]] Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A4 Π _ : A5 Π _ : A6 Π _ : A7 [Q' [unquoteTerm [<<<elimCast [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> [<<monoId [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a0]]] : Π Q' : Π _ : Term * *.
let argTermRecF := λ Q' : Π _ : Term * ∀ A0 : * ∀ A1 : * ∀ A2 : * ∀ A3 : * ∀ A4 : * ∀ A5 : * ∀ A6 : * ∀ A7 : * Π a0 : Bool Π a1 : [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]] Π _ : A0 Π _ : A1 Π _ : A2 Π _ : A3 Π _ : A4 Π _ : A5 Π _ : A6 Π _ : A7 [Q' [[argTerm [<<<elimCast Bool> Bool> [<<<monoConst Bool> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a0]] [<<<elimCast [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> [<<monoId [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] A0] A1] A2] A3] A4] A5] A6] A7]>]> a1]]] : Π Q' : Π _ : Term * *.
let TermLRP := λ x' : Term ∀ Q' : Π _ : Term * [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']] : Π x' : Term *.
let TermLR := [[Iota Term] TermLRP] : *.
let TermCastLRtoLR' := Λ Q' : Π _ : Term * <<<<intrCast TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> λ x' : TermLR [[[<<iPair Term> λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]> [<<iPr1 Term> TermLRP> x']] <[<<iPr2 Term> TermLRP> x'] Q'>] [<beta Term> [<<iPr1 Term> TermLRP> x']]]> <beta TermLR>> : ∀ Q' : Π _ : Term * [[Cast TermLR] [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]].
let varTermLR := λ a0 : Var [[[<<iPair Term> TermLRP> [varTerm [<<<elimCast Var> Var> [<<<monoConst Var> TermLR> Term> <<castIota Term> TermLRP>]> a0]]] Λ Q' : Π _ : Term * λ varTermX : [varTermRecF Q'] λ sortTermX : [sortTermRecF Q'] λ binderTermX : [binderTermRecF Q'] λ appLTerm'X : [appLTerm'RecF Q'] λ charTermX : [charTermRecF Q'] λ unknownTermX : [unknownTermRecF Q'] λ unquoteTermX : [unquoteTermRecF Q'] λ argTermX : [argTermRecF Q'] [<<<<<<<<varTermX [varTermRecF Q']> [sortTermRecF Q']> [binderTermRecF Q']> [appLTerm'RecF Q']> [charTermRecF Q']> [unknownTermRecF Q']> [unquoteTermRecF Q']> [argTermRecF Q']> [<<<elimCast Var> Var> [<<<monoConst Var> TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a0]]] [<beta Term> [varTerm [<<<elimCast Var> Var> [<<<monoConst Var> TermLR> Term> <<castIota Term> TermLRP>]> a0]]]] : Π a0 : Var TermLR.
let sortTermLR := λ a0 : Sort [[[<<iPair Term> TermLRP> [sortTerm [<<<elimCast Sort> Sort> [<<<monoConst Sort> TermLR> Term> <<castIota Term> TermLRP>]> a0]]] Λ Q' : Π _ : Term * λ varTermX : [varTermRecF Q'] λ sortTermX : [sortTermRecF Q'] λ binderTermX : [binderTermRecF Q'] λ appLTerm'X : [appLTerm'RecF Q'] λ charTermX : [charTermRecF Q'] λ unknownTermX : [unknownTermRecF Q'] λ unquoteTermX : [unquoteTermRecF Q'] λ argTermX : [argTermRecF Q'] [<<<<<<<<sortTermX [varTermRecF Q']> [sortTermRecF Q']> [binderTermRecF Q']> [appLTerm'RecF Q']> [charTermRecF Q']> [unknownTermRecF Q']> [unquoteTermRecF Q']> [argTermRecF Q']> [<<<elimCast Sort> Sort> [<<<monoConst Sort> TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a0]]] [<beta Term> [sortTerm [<<<elimCast Sort> Sort> [<<<monoConst Sort> TermLR> Term> <<castIota Term> TermLRP>]> a0]]]] : Π a0 : Sort TermLR.
let binderTermLR := λ a0 : Binder λ a1 : String λ a2 : TermLR λ a3 : TermLR [[[<<iPair Term> TermLRP> [[[[binderTerm [<<<elimCast Binder> Binder> [<<<monoConst Binder> TermLR> Term> <<castIota Term> TermLRP>]> a0]] [<<<elimCast String> String> [<<<monoConst String> TermLR> Term> <<castIota Term> TermLRP>]> a1]] [<<<elimCast TermLR> Term> [<<monoId TermLR> Term> <<castIota Term> TermLRP>]> a2]] [<<<elimCast TermLR> Term> [<<monoId TermLR> Term> <<castIota Term> TermLRP>]> a3]]] Λ Q' : Π _ : Term * λ varTermX : [varTermRecF Q'] λ sortTermX : [sortTermRecF Q'] λ binderTermX : [binderTermRecF Q'] λ appLTerm'X : [appLTerm'RecF Q'] λ charTermX : [charTermRecF Q'] λ unknownTermX : [unknownTermRecF Q'] λ unquoteTermX : [unquoteTermRecF Q'] λ argTermX : [argTermRecF Q'] [[[[<<<<<<<<binderTermX [varTermRecF Q']> [sortTermRecF Q']> [binderTermRecF Q']> [appLTerm'RecF Q']> [charTermRecF Q']> [unknownTermRecF Q']> [unquoteTermRecF Q']> [argTermRecF Q']> [<<<elimCast Binder> Binder> [<<<monoConst Binder> TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a0]] [<<<elimCast String> String> [<<<monoConst String> TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a1]] [<<<elimCast TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> [<<monoId TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a2]] [<<<elimCast TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> [<<monoId TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a3]]] [<beta Term> [[[[binderTerm [<<<elimCast Binder> Binder> [<<<monoConst Binder> TermLR> Term> <<castIota Term> TermLRP>]> a0]] [<<<elimCast String> String> [<<<monoConst String> TermLR> Term> <<castIota Term> TermLRP>]> a1]] [<<<elimCast TermLR> Term> [<<monoId TermLR> Term> <<castIota Term> TermLRP>]> a2]] [<<<elimCast TermLR> Term> [<<monoId TermLR> Term> <<castIota Term> TermLRP>]> a3]]]] : Π a0 : Binder Π a1 : String Π a2 : TermLR Π a3 : TermLR TermLR.
let appLTerm'LR := λ a0 : TermLR λ a1 : [List TermLR] [[[<<iPair Term> TermLRP> [[appLTerm' [<<<elimCast TermLR> Term> [<<monoId TermLR> Term> <<castIota Term> TermLRP>]> a0]] [<<<elimCast [List TermLR]> [List Term]> [<<monoList TermLR> Term> <<castIota Term> TermLRP>]> a1]]] Λ Q' : Π _ : Term * λ varTermX : [varTermRecF Q'] λ sortTermX : [sortTermRecF Q'] λ binderTermX : [binderTermRecF Q'] λ appLTerm'X : [appLTerm'RecF Q'] λ charTermX : [charTermRecF Q'] λ unknownTermX : [unknownTermRecF Q'] λ unquoteTermX : [unquoteTermRecF Q'] λ argTermX : [argTermRecF Q'] [[<<<<<<<<appLTerm'X [varTermRecF Q']> [sortTermRecF Q']> [binderTermRecF Q']> [appLTerm'RecF Q']> [charTermRecF Q']> [unknownTermRecF Q']> [unquoteTermRecF Q']> [argTermRecF Q']> [<<<elimCast TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> [<<monoId TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a0]] [<<<elimCast [List TermLR]> [List [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]]> [<<monoList TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a1]]] [<beta Term> [[appLTerm' [<<<elimCast TermLR> Term> [<<monoId TermLR> Term> <<castIota Term> TermLRP>]> a0]] [<<<elimCast [List TermLR]> [List Term]> [<<monoList TermLR> Term> <<castIota Term> TermLRP>]> a1]]]] : Π a0 : TermLR Π a1 : [List TermLR] TermLR.
let charTermLR := λ a0 : Char [[[<<iPair Term> TermLRP> [charTerm [<<<elimCast Char> Char> [<<<monoConst Char> TermLR> Term> <<castIota Term> TermLRP>]> a0]]] Λ Q' : Π _ : Term * λ varTermX : [varTermRecF Q'] λ sortTermX : [sortTermRecF Q'] λ binderTermX : [binderTermRecF Q'] λ appLTerm'X : [appLTerm'RecF Q'] λ charTermX : [charTermRecF Q'] λ unknownTermX : [unknownTermRecF Q'] λ unquoteTermX : [unquoteTermRecF Q'] λ argTermX : [argTermRecF Q'] [<<<<<<<<charTermX [varTermRecF Q']> [sortTermRecF Q']> [binderTermRecF Q']> [appLTerm'RecF Q']> [charTermRecF Q']> [unknownTermRecF Q']> [unquoteTermRecF Q']> [argTermRecF Q']> [<<<elimCast Char> Char> [<<<monoConst Char> TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a0]]] [<beta Term> [charTerm [<<<elimCast Char> Char> [<<<monoConst Char> TermLR> Term> <<castIota Term> TermLRP>]> a0]]]] : Π a0 : Char TermLR.
let unknownTermLR := [[[<<iPair Term> TermLRP> unknownTerm] Λ Q' : Π _ : Term * λ varTermX : [varTermRecF Q'] λ sortTermX : [sortTermRecF Q'] λ binderTermX : [binderTermRecF Q'] λ appLTerm'X : [appLTerm'RecF Q'] λ charTermX : [charTermRecF Q'] λ unknownTermX : [unknownTermRecF Q'] λ unquoteTermX : [unquoteTermRecF Q'] λ argTermX : [argTermRecF Q'] <<<<<<<<unknownTermX [varTermRecF Q']> [sortTermRecF Q']> [binderTermRecF Q']> [appLTerm'RecF Q']> [charTermRecF Q']> [unknownTermRecF Q']> [unquoteTermRecF Q']> [argTermRecF Q']>] [<beta Term> unknownTerm]] : TermLR.
let unquoteTermLR := λ a0 : TermLR [[[<<iPair Term> TermLRP> [unquoteTerm [<<<elimCast TermLR> Term> [<<monoId TermLR> Term> <<castIota Term> TermLRP>]> a0]]] Λ Q' : Π _ : Term * λ varTermX : [varTermRecF Q'] λ sortTermX : [sortTermRecF Q'] λ binderTermX : [binderTermRecF Q'] λ appLTerm'X : [appLTerm'RecF Q'] λ charTermX : [charTermRecF Q'] λ unknownTermX : [unknownTermRecF Q'] λ unquoteTermX : [unquoteTermRecF Q'] λ argTermX : [argTermRecF Q'] [<<<<<<<<unquoteTermX [varTermRecF Q']> [sortTermRecF Q']> [binderTermRecF Q']> [appLTerm'RecF Q']> [charTermRecF Q']> [unknownTermRecF Q']> [unquoteTermRecF Q']> [argTermRecF Q']> [<<<elimCast TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> [<<monoId TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a0]]] [<beta Term> [unquoteTerm [<<<elimCast TermLR> Term> [<<monoId TermLR> Term> <<castIota Term> TermLRP>]> a0]]]] : Π a0 : TermLR TermLR.
let argTermLR := λ a0 : Bool λ a1 : TermLR [[[<<iPair Term> TermLRP> [[argTerm [<<<elimCast Bool> Bool> [<<<monoConst Bool> TermLR> Term> <<castIota Term> TermLRP>]> a0]] [<<<elimCast TermLR> Term> [<<monoId TermLR> Term> <<castIota Term> TermLRP>]> a1]]] Λ Q' : Π _ : Term * λ varTermX : [varTermRecF Q'] λ sortTermX : [sortTermRecF Q'] λ binderTermX : [binderTermRecF Q'] λ appLTerm'X : [appLTerm'RecF Q'] λ charTermX : [charTermRecF Q'] λ unknownTermX : [unknownTermRecF Q'] λ unquoteTermX : [unquoteTermRecF Q'] λ argTermX : [argTermRecF Q'] [[<<<<<<<<argTermX [varTermRecF Q']> [sortTermRecF Q']> [binderTermRecF Q']> [appLTerm'RecF Q']> [charTermRecF Q']> [unknownTermRecF Q']> [unquoteTermRecF Q']> [argTermRecF Q']> [<<<elimCast Bool> Bool> [<<<monoConst Bool> TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a0]] [<<<elimCast TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> [<<monoId TermLR> [[Iota Term] λ x' : Term [[[[[[[[[[TermRec Q'] x'] [varTermRecF Q']] [sortTermRecF Q']] [binderTermRecF Q']] [appLTerm'RecF Q']] [charTermRecF Q']] [unknownTermRecF Q']] [unquoteTermRecF Q']] [argTermRecF Q']]]> <TermCastLRtoLR' Q'>]> a1]]] [<beta Term> [[argTerm [<<<elimCast Bool> Bool> [<<<monoConst Bool> TermLR> Term> <<castIota Term> TermLRP>]> a0]] [<<<elimCast TermLR> Term> [<<monoId TermLR> Term> <<castIota Term> TermLRP>]> a1]]]] : Π a0 : Bool Π a1 : TermLR TermLR.
let rollTermLR := <<<<intrCast [TermFI TermLR]> TermLR> λ x' : [TermFI TermLR] [[[[[[[[<[<<iPr1 [TermF TermLR]> [WkIndTermF TermLR]> x'] TermLR> varTermLR] sortTermLR] binderTermLR] appLTerm'LR] charTermLR] unknownTermLR] unquoteTermLR] argTermLR]> λ x' : [TermFI TermLR] [[[[[[[[<[<<iPr2 [TermF TermLR]> [WkIndTermF TermLR]> x'] λ x' : [TermF TermLR] [[<<UEq TermLR> [TermF TermLR]> [[[[[[[[<x' TermLR> varTermLR] sortTermLR] binderTermLR] appLTerm'LR] charTermLR] unknownTermLR] unquoteTermLR] argTermLR]] x']> λ a0 : Var [<beta [TermF TermLR]> [<varTermF TermLR> a0]]] λ a0 : Sort [<beta [TermF TermLR]> [<sortTermF TermLR> a0]]] λ a0 : Binder λ a1 : String λ a2 : TermLR λ a3 : TermLR [<beta [TermF TermLR]> [[[[<binderTermF TermLR> a0] a1] a2] a3]]] λ a0 : TermLR λ a1 : [List TermLR] [<beta [TermF TermLR]> [[<appLTerm'F TermLR> a0] a1]]] λ a0 : Char [<beta [TermF TermLR]> [<charTermF TermLR> a0]]] [<beta [TermF TermLR]> <unknownTermF TermLR>]] λ a0 : TermLR [<beta [TermF TermLR]> [<unquoteTermF TermLR> a0]]] λ a0 : Bool λ a1 : TermLR [<beta [TermF TermLR]> [[<argTermF TermLR> a0] a1]]]> : [[Cast [TermFI TermLR]] TermLR].
let toTermLR := <<[recLB TermFI] TermLR> rollTermLR> : [[Cast Term] TermLR].
let recTermLR := Λ Q' : Π _ : Term * λ x' : TermLR λ a0 : [varTermRecF Q'] λ a1 : [sortTermRecF Q'] λ a2 : [binderTermRecF Q'] λ a3 : [appLTerm'RecF Q'] λ a4 : [charTermRecF Q'] λ a5 : [unknownTermRecF Q'] λ a6 : [unquoteTermRecF Q'] λ a7 : [argTermRecF Q'] [[[[[[[[<[<<iPr2 Term> TermLRP> x'] Q'> a0] a1] a2] a3] a4] a5] a6] a7] : ∀ Q' : Π _ : Term * Π x' : TermLR Π a0 : [varTermRecF Q'] Π a1 : [sortTermRecF Q'] Π a2 : [binderTermRecF Q'] Π a3 : [appLTerm'RecF Q'] Π a4 : [charTermRecF Q'] Π a5 : [unknownTermRecF Q'] Π a6 : [unquoteTermRecF Q'] Π a7 : [argTermRecF Q'] Π a0 : [varTermRecF Q'] Π a1 : [sortTermRecF Q'] Π a2 : [binderTermRecF Q'] Π a3 : [appLTerm'RecF Q'] Π a4 : [charTermRecF Q'] Π a5 : [unknownTermRecF Q'] Π a6 : [unquoteTermRecF Q'] Π a7 : [argTermRecF Q'] [Q' [<<iPr1 Term> TermLRP> x']].
let varTermRecFPf := Λ P' : Π _ : Term * λ hvarTerm : Π a0 : Var [P' [varTerm a0]] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * Λ A4 : * Λ A5 : * Λ A6 : * Λ A7 : * λ x0 : Var λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 λ a4 : A4 λ a5 : A5 λ a6 : A6 λ a7 : A7 [hvarTerm x0] : ∀ P' : Π _ : Term * Π hvarTerm : Π a0 : Var [P' [varTerm a0]] [varTermRecF P'].
let sortTermRecFPf := Λ P' : Π _ : Term * λ hsortTerm : Π a0 : Sort [P' [sortTerm a0]] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * Λ A4 : * Λ A5 : * Λ A6 : * Λ A7 : * λ x0 : Sort λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 λ a4 : A4 λ a5 : A5 λ a6 : A6 λ a7 : A7 [hsortTerm x0] : ∀ P' : Π _ : Term * Π hsortTerm : Π a0 : Sort [P' [sortTerm a0]] [sortTermRecF P'].
let binderTermRecFPf := Λ P' : Π _ : Term * λ hbinderTerm : Π a0 : Binder Π a1 : String Π a2 : Term Π _ : [P' a2] Π a3 : Term Π _ : [P' a3] [P' [[[[binderTerm a0] a1] a2] a3]] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * Λ A4 : * Λ A5 : * Λ A6 : * Λ A7 : * λ x0 : Binder λ x1 : String λ x2 : [[Iota Term] λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]] λ x3 : [[Iota Term] λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]] λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 λ a4 : A4 λ a5 : A5 λ a6 : A6 λ a7 : A7 [[[[[[hbinderTerm x0] x1] [<<iPr1 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> x2]] [[[[[[[[[[[[[[[[[<<iPr2 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> x2] a0] a1] a2] a3] a4] a5] a6] a7] a0] a1] a2] a3] a4] a5] a6] a7]] [<<iPr1 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> x3]] [[[[[[[[[[[[[[[[[<<iPr2 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> x3] a0] a1] a2] a3] a4] a5] a6] a7] a0] a1] a2] a3] a4] a5] a6] a7]] : ∀ P' : Π _ : Term * Π hbinderTerm : Π a0 : Binder Π a1 : String Π a2 : Term Π _ : [P' a2] Π a3 : Term Π _ : [P' a3] [P' [[[[binderTerm a0] a1] a2] a3]] [binderTermRecF P'].
let appLTerm'RecFPf := Λ P' : Π _ : Term * Λ PList : Π _ : [List Term] * λ happLTerm' : Π a0 : Term Π _ : [P' a0] Π a1 : [List Term] Π _ : [PList a1] [P' [[appLTerm' a0] a1]] λ p'n : [PList <nil Term>] λ p'c : Π pc1 : Term Π _ : [P' pc1] Π pc2 : [List Term] Π _ : [PList pc2] [PList [[<cons Term> pc1] pc2]] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * Λ A4 : * Λ A5 : * Λ A6 : * Λ A7 : * λ x0 : [[Iota Term] λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]] λ x1 : [List [[Iota Term] λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]]] λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 λ a4 : A4 λ a5 : A5 λ a6 : A6 λ a7 : A7 [[[[happLTerm' [<<iPr1 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> x0]] [[[[[[[[[[[[[[[[[<<iPr2 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> x0] a0] a1] a2] a3] a4] a5] a6] a7] a0] a1] a2] a3] a4] a5] a6] a7]] [<<<indHelperList/conv [[Iota Term] λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]>> x1]] [[[<[<<<<indHelperList [[Iota Term] λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]]> Term> <<castIota Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]>> P'> λ xi : [[Iota Term] λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]] [[[[[[[[[[[[[[[[[<<iPr2 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> xi] a0] a1] a2] a3] a4] a5] a6] a7] a0] a1] a2] a3] a4] a5] a6] a7]] PList> p'n] p'c] x1]] : ∀ P' : Π _ : Term * ∀ PList : Π _ : [List Term] * Π happLTerm' : Π a0 : Term Π _ : [P' a0] Π a1 : [List Term] Π _ : [PList a1] [P' [[appLTerm' a0] a1]] Π p'n : [PList <nil Term>] Π p'c : Π pc1 : Term Π _ : [P' pc1] Π pc2 : [List Term] Π _ : [PList pc2] [PList [[<cons Term> pc1] pc2]] [appLTerm'RecF P'].
let charTermRecFPf := Λ P' : Π _ : Term * λ hcharTerm : Π a0 : Char [P' [charTerm a0]] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * Λ A4 : * Λ A5 : * Λ A6 : * Λ A7 : * λ x0 : Char λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 λ a4 : A4 λ a5 : A5 λ a6 : A6 λ a7 : A7 [hcharTerm x0] : ∀ P' : Π _ : Term * Π hcharTerm : Π a0 : Char [P' [charTerm a0]] [charTermRecF P'].
let unknownTermRecFPf := Λ P' : Π _ : Term * λ hunknownTerm : [P' unknownTerm] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * Λ A4 : * Λ A5 : * Λ A6 : * Λ A7 : * λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 λ a4 : A4 λ a5 : A5 λ a6 : A6 λ a7 : A7 hunknownTerm : ∀ P' : Π _ : Term * Π hunknownTerm : [P' unknownTerm] [unknownTermRecF P'].
let unquoteTermRecFPf := Λ P' : Π _ : Term * λ hunquoteTerm : Π a0 : Term Π _ : [P' a0] [P' [unquoteTerm a0]] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * Λ A4 : * Λ A5 : * Λ A6 : * Λ A7 : * λ x0 : [[Iota Term] λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]] λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 λ a4 : A4 λ a5 : A5 λ a6 : A6 λ a7 : A7 [[hunquoteTerm [<<iPr1 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> x0]] [[[[[[[[[[[[[[[[[<<iPr2 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> x0] a0] a1] a2] a3] a4] a5] a6] a7] a0] a1] a2] a3] a4] a5] a6] a7]] : ∀ P' : Π _ : Term * Π hunquoteTerm : Π a0 : Term Π _ : [P' a0] [P' [unquoteTerm a0]] [unquoteTermRecF P'].
let argTermRecFPf := Λ P' : Π _ : Term * λ hargTerm : Π a0 : Bool Π a1 : Term Π _ : [P' a1] [P' [[argTerm a0] a1]] Λ A0 : * Λ A1 : * Λ A2 : * Λ A3 : * Λ A4 : * Λ A5 : * Λ A6 : * Λ A7 : * λ x0 : Bool λ x1 : [[Iota Term] λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]] λ a0 : A0 λ a1 : A1 λ a2 : A2 λ a3 : A3 λ a4 : A4 λ a5 : A5 λ a6 : A6 λ a7 : A7 [[[hargTerm x0] [<<iPr1 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> x1]] [[[[[[[[[[[[[[[[[<<iPr2 Term> λ x : Term [[[[[[[[[[TermRec P'] x] A0] A1] A2] A3] A4] A5] A6] A7]> x1] a0] a1] a2] a3] a4] a5] a6] a7] a0] a1] a2] a3] a4] a5] a6] a7]] : ∀ P' : Π _ : Term * Π hargTerm : Π a0 : Bool Π a1 : Term Π _ : [P' a1] [P' [[argTerm a0] a1]] [argTermRecF P'].
let indTerm := Λ P' : Π _ : Term * Λ PList : Π _ : [List Term] * λ hvarTerm : Π a0 : Var [P' [varTerm a0]] λ hsortTerm : Π a0 : Sort [P' [sortTerm a0]] λ hbinderTerm : Π a0 : Binder Π a1 : String Π a2 : Term Π _ : [P' a2] Π a3 : Term Π _ : [P' a3] [P' [[[[binderTerm a0] a1] a2] a3]] λ happLTerm' : Π a0 : Term Π _ : [P' a0] Π a1 : [List Term] Π _ : [PList a1] [P' [[appLTerm' a0] a1]] λ p'n : [PList <nil Term>] λ p'c : Π pc1 : Term Π _ : [P' pc1] Π pc2 : [List Term] Π _ : [PList pc2] [PList [[<cons Term> pc1] pc2]] λ hcharTerm : Π a0 : Char [P' [charTerm a0]] λ hunknownTerm : [P' unknownTerm] λ hunquoteTerm : Π a0 : Term Π _ : [P' a0] [P' [unquoteTerm a0]] λ hargTerm : Π a0 : Bool Π a1 : Term Π _ : [P' a1] [P' [[argTerm a0] a1]] λ x' : Term [[[[[[[[[[[[[[[[[<recTermLR P'> [<<<elimCast Term> TermLR> toTermLR> x']] [<varTermRecFPf P'> hvarTerm]] [<sortTermRecFPf P'> hsortTerm]] [<binderTermRecFPf P'> hbinderTerm]] [[[<<appLTerm'RecFPf P'> PList> happLTerm'] p'n] p'c]] [<charTermRecFPf P'> hcharTerm]] [<unknownTermRecFPf P'> hunknownTerm]] [<unquoteTermRecFPf P'> hunquoteTerm]] [<argTermRecFPf P'> hargTerm]] [<varTermRecFPf P'> hvarTerm]] [<sortTermRecFPf P'> hsortTerm]] [<binderTermRecFPf P'> hbinderTerm]] [[[<<appLTerm'RecFPf P'> PList> happLTerm'] p'n] p'c]] [<charTermRecFPf P'> hcharTerm]] [<unknownTermRecFPf P'> hunknownTerm]] [<unquoteTermRecFPf P'> hunquoteTerm]] [<argTermRecFPf P'> hargTerm]] : ∀ P' : Π _ : Term * ∀ PList : Π _ : [List Term] * Π hvarTerm : Π a0 : Var [P' [varTerm a0]] Π hsortTerm : Π a0 : Sort [P' [sortTerm a0]] Π hbinderTerm : Π a0 : Binder Π a1 : String Π a2 : Term Π _ : [P' a2] Π a3 : Term Π _ : [P' a3] [P' [[[[binderTerm a0] a1] a2] a3]] Π happLTerm' : Π a0 : Term Π _ : [P' a0] Π a1 : [List Term] Π _ : [PList a1] [P' [[appLTerm' a0] a1]] Π p'n : [PList <nil Term>] Π p'c : Π pc1 : Term Π _ : [P' pc1] Π pc2 : [List Term] Π _ : [PList pc2] [PList [[<cons Term> pc1] pc2]] Π hcharTerm : Π a0 : Char [P' [charTerm a0]] Π hunknownTerm : [P' unknownTerm] Π hunquoteTerm : Π a0 : Term Π _ : [P' a0] [P' [unquoteTerm a0]] Π hargTerm : Π a0 : Bool Π a1 : Term Π _ : [P' a1] [P' [[argTerm a0] a1]] Π x' : Term [P' x'].
let getErased := λ t : Term [[[[[[[[<[<<iPr1 [TermF Term]> [WkIndTermF Term]> [unrollTerm t]] Bool> λ _ : Var false] λ _ : Sort false] λ _ : Binder λ _ : String λ _ : Term λ _ : Term false] λ _ : Term λ _ : [List Term] false] λ _ : Char false] false] λ _ : Term false] λ b : Bool λ _ : Term b] : Π t : Term Bool.
let unApp := λ t : Term [[[[[[[[<[<<iPr1 [TermF Term]> [WkIndTermF Term]> [unrollTerm t]] Term> λ _ : Var unknownTerm] λ _ : Sort unknownTerm] λ _ : Binder λ _ : String λ _ : Term λ _ : Term unknownTerm] λ _ : Term λ _ : [List Term] unknownTerm] λ _ : Char unknownTerm] unknownTerm] λ _ : Term unknownTerm] λ _ : Bool λ t' : Term t'] : Π t : Term Term.
let matchTerm := Λ X : * λ fvar : Π _ : Var X λ fsort : Π _ : Sort X λ fbind : Π _ : Binder Π _ : String Π _ : Term Π _ : Term X λ fapp : Π _ : Term Π _ : [List [[Product Bool] Term]] X λ fchar : Π _ : Char X λ funk : X λ funq : Π _ : Term X λ t : Term [[[[[[[[<[<<iPr1 [TermF Term]> [WkIndTermF Term]> [unrollTerm t]] X> fvar] fsort] fbind] λ t' : Term λ ts : [List Term] [λ erased : [List Bool] [[fapp t'] [[<<zip Bool> Term> erased] [[<<map Term> Term> unApp] ts]]] [[<<map Term> Bool> getErased] ts]]] fchar] funk] funq] λ _ : Bool λ _ : Term funk] : ∀ X : * Π fvar : Π _ : Var X Π fsort : Π _ : Sort X Π fbind : Π _ : Binder Π _ : String Π _ : Term Π _ : Term X Π fapp : Π _ : Term Π _ : [List [[Product Bool] Term]] X Π fchar : Π _ : Char X Π funk : X Π funq : Π _ : Term X Π t : Term X.
let recursionTerm := Λ X : * λ fvar : Π _ : Var X λ fsort : Π _ : Sort X λ fbind : Π _ : Binder Π _ : String Π _ : Term Π _ : Term Π _ : X Π _ : X X λ fapp : Π _ : Term Π _ : [List [[Product Bool] Term]] Π _ : X Π _ : [List [[Product Bool] X]] X λ fchar : Π _ : Char X λ funk : X λ funq : Π _ : Term Π _ : X X [[[[[[[[[[<<indTerm λ _ : Term X> λ _ : [List Term] [List X]> fvar] fsort] λ b : Binder λ s : String λ t : Term λ rect : X λ T : Term λ recT : X [[[[[[fbind b] s] t] T] rect] recT]] λ t : Term λ rect : X λ a : [List Term] λ reca : [List X] [λ erased : [List Bool] [[[[fapp t] [[<<zip Bool> Term> erased] [[<<map Term> Term> unApp] a]]] rect] [[<<zip Bool> X> erased] reca]] [[<<map Term> Bool> getErased] a]]] <nil X>] λ _ : Term λ x : X λ _ : [List Term] [<cons X> x]] fchar] funk] funq] λ b : Bool λ t : Term λ rect : X rect] : ∀ X : * Π fvar : Π _ : Var X Π fsort : Π _ : Sort X Π fbind : Π _ : Binder Π _ : String Π _ : Term Π _ : Term Π _ : X Π _ : X X Π fapp : Π _ : Term Π _ : [List [[Product Bool] Term]] Π _ : X Π _ : [List [[Product Bool] X]] X Π fchar : Π _ : Char X Π funk : X Π funq : Π _ : Term Π _ : X X Π _ : Term X.
let foldTerm := Λ X : * λ fvar : Π _ : Var X λ fsort : Π _ : Sort X λ fbind : Π _ : Binder Π _ : String Π _ : X Π _ : X X λ fapp : Π _ : X Π _ : [List [[Product Bool] X]] X λ fchar : Π _ : Char X λ funk : X λ funq : Π _ : X X [[[[[[[<recursionTerm X> fvar] fsort] λ b : Binder λ s : String λ _ : Term λ _ : Term λ t : X λ T : X [[[[fbind b] s] t] T]] λ _ : Term λ _ : [List [[Product Bool] Term]] λ t : X λ a : [List [[Product Bool] X]] [[fapp t] a]] fchar] funk] λ _ : Term funq] : ∀ X : * Π fvar : Π _ : Var X Π fsort : Π _ : Sort X Π fbind : Π _ : Binder Π _ : String Π _ : X Π _ : X X Π fapp : Π _ : X Π _ : [List [[Product Bool] X]] X Π fchar : Π _ : Char X Π funk : X Π funq : Π _ : X X Π _ : Term X.
