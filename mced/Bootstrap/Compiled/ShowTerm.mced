let showIndex' := λ i : init$index' [[[[[[[[[[[<i String> stringNil] [stringApp [[stringCons κ0] stringNil]]] [stringApp [[stringCons κ1] stringNil]]] [stringApp [[stringCons κ2] stringNil]]] [stringApp [[stringCons κ3] stringNil]]] [stringApp [[stringCons κ4] stringNil]]] [stringApp [[stringCons κ5] stringNil]]] [stringApp [[stringCons κ6] stringNil]]] [stringApp [[stringCons κ7] stringNil]]] [stringApp [[stringCons κ8] stringNil]]] [stringApp [[stringCons κ9] stringNil]]] : Π i : init$index' String.
let showIndex := λ i : DBIndex [[[[[[[[[[<i String> λ i' : init$index' [[stringApp [[stringCons κ0] stringNil]] [showIndex' i']]] λ i' : init$index' [[stringApp [[stringCons κ1] stringNil]] [showIndex' i']]] λ i' : init$index' [[stringApp [[stringCons κ2] stringNil]] [showIndex' i']]] λ i' : init$index' [[stringApp [[stringCons κ3] stringNil]] [showIndex' i']]] λ i' : init$index' [[stringApp [[stringCons κ4] stringNil]] [showIndex' i']]] λ i' : init$index' [[stringApp [[stringCons κ5] stringNil]] [showIndex' i']]] λ i' : init$index' [[stringApp [[stringCons κ6] stringNil]] [showIndex' i']]] λ i' : init$index' [[stringApp [[stringCons κ7] stringNil]] [showIndex' i']]] λ i' : init$index' [[stringApp [[stringCons κ8] stringNil]] [showIndex' i']]] λ i' : init$index' [[stringApp [[stringCons κ9] stringNil]] [showIndex' i']]] : Π i : DBIndex String.
let showVar := λ con : [List String] λ v : Var [[<v String> λ s : String s] λ i : DBIndex [[[<lookupDefault String> [indexToNat i]] [showIndex i]] con]] : Π con : [List String] Π v : Var String.
let showSort := λ s : Sort [[<s String> [[stringCons κ*] stringNil]] [[stringCons κ□] stringNil]] : Π s : Sort String.
let showBinder := λ b : Binder [[[[<b String> [[stringCons κλ] stringNil]] [[stringCons κΛ] stringNil]] [[stringCons κΠ] stringNil]] [[stringCons κ∀] stringNil]] : Π b : Binder String.
let isArrow := λ b : Binder [[[[<b Bool> false] false] true] true] : Π b : Binder Bool.
let showBinderArrow := λ b : Binder [[[[<b String> [[stringCons κλ] [[stringCons κ ] [[stringCons κi] [[stringCons κs] [[stringCons κ ] [[stringCons κn] [[stringCons κo] [[stringCons κt] [[stringCons κ ] [[stringCons κa] [[stringCons κn] [[stringCons κ ] [[stringCons κa] [[stringCons κr] [[stringCons κr] [[stringCons κo] [[stringCons κw] [[stringCons κ!] stringNil]]]]]]]]]]]]]]]]]]] [[stringCons κΛ] [[stringCons κ ] [[stringCons κi] [[stringCons κs] [[stringCons κ ] [[stringCons κn] [[stringCons κo] [[stringCons κt] [[stringCons κ ] [[stringCons κa] [[stringCons κn] [[stringCons κ ] [[stringCons κa] [[stringCons κr] [[stringCons κr] [[stringCons κo] [[stringCons κw] [[stringCons κ!] stringNil]]]]]]]]]]]]]]]]]]] [[stringCons κ-] [[stringCons κ>] stringNil]]] [[stringCons κ=] [[stringCons κ>] stringNil]]] : Π b : Binder String.
let needsParens := λ t : Term [[[[[[[<t Bool> λ _ : Var false] λ _ : Sort false] λ _ : Binder λ _ : String λ _ : Bool λ _ : Bool true] λ _ : Bool λ _ : [List [[Product Bool] Bool]] true] λ _ : Char false] false] λ _ : Bool false] : Π t : Term Bool.
let wrapWithParens := λ s : String [stringConcat [[<cons String> [[stringCons κ(] stringNil]] [[<cons String> s] [[<cons String> [[stringCons κ)] stringNil]] <nil String>]]]] : Π s : String String.
let showTermWithContext := λ term : Term [<<pr1 Π con : [List String] String> Term> [[[[[[[<term [[Product Π con : [List String] String] Term]> λ v : Var [[<<prodPair Π con : [List String] String> Term> [λ v : Var λ con : [List String] [[showVar con] v] v]] [varTerm v]]] λ s : Sort [[<<prodPair Π con : [List String] String> Term> [λ s : Sort λ _ : [List String] [showSort s] s]] [sortTerm s]]] λ b : Binder λ n : String [<<<recursionProduct Π con : [List String] String> Term> Π _ : [[Product Π con : [List String] String] Term] [[Product Π con : [List String] String] Term]> λ T1 : Π con : [List String] String λ T2 : Term [<<<recursionProduct Π con : [List String] String> Term> [[Product Π con : [List String] String] Term]> λ t1 : Π con : [List String] String λ t2 : Term [[<<prodPair Π con : [List String] String> Term> [[[[[[λ b : Binder λ n : String λ _ : Term λ _ : Term λ T : Π _ : [List String] String λ t : Π _ : [List String] String λ con : [List String] [[[<ifthenelse String> [[and [[stringEq n] [[stringCons κ_] stringNil]]] [isArrow b]]] [stringConcat [[<cons String> [T con]] [[<cons String> [[stringCons κ ] stringNil]] [[<cons String> [showBinderArrow b]] [[<cons String> [[stringCons κ ] stringNil]] [[<cons String> [t [[<cons String> n] con]]] <nil String>]]]]]]] [stringConcat [[<cons String> [showBinder b]] [[<cons String> [[stringCons κ ] stringNil]] [[<cons String> n] [[<cons String> [[stringCons κ ] [[stringCons κ:] [[stringCons κ ] stringNil]]]] [[<cons String> [T con]] [[<cons String> [[stringCons κ.] [[stringCons κ ] stringNil]]] [[<cons String> [t [[<cons String> n] con]]] <nil String>]]]]]]]]] b] n] T2] t2] T1] t1]] [[[[binderTerm b] n] T2] t2]]]]] [<<<recursionProduct Π con : [List String] String> Term> Π _ : [List [[Product Bool] [[Product Π con : [List String] String] Term]]] [[Product Π con : [List String] String] Term]> λ t1 : Π con : [List String] String λ t2 : Term λ l : [List [[Product Bool] [[Product Π con : [List String] String] Term]]] [[<<<recursionProduct [List [[Product Bool] Π con : [List String] String]]> [List [[Product Bool] Term]]> [[Product Π con : [List String] String] Term]> λ l1 : [List [[Product Bool] Π con : [List String] String]] λ l2 : [List [[Product Bool] Term]] [[<<prodPair Π con : [List String] String> Term> [[[[λ _ : Term λ la : [List App] λ t : Π _ : [List String] String λ l : [List [[Product Bool] Π _ : [List String] String]] λ con : [List String] [stringConcat [[<cons String> [t con]] [[<<map [[Product Bool] [[Product Π _ : [List String] String] Term]]> String> [<<<<recursionTripleProduct Bool> Π _ : [List String] String> Term> String> λ b : Bool λ s : Π _ : [List String] String λ t' : Term [stringConcat [[<cons String> [[[<ifthenelse String> b] [[stringCons κ ] [[stringCons κ?] stringNil]]] [[stringCons κ ] stringNil]]] [[<cons String> [[[<ifthenelse String> [needsParens t']] [wrapWithParens [s con]]] [s con]]] <nil String>]]]]] [[[<<<zipWith [[Product Bool] Π _ : [List String] String]> App> [[Product Bool] [[Product Π _ : [List String] String] Term]]> [<<<recursionProduct Bool> Π _ : [List String] String> Π a : App [[Product Bool] [[Product Π _ : [List String] String] Term]]> λ b : Bool λ s : Π _ : [List String] String λ a : App [[<<prodPair Bool> [[Product Π _ : [List String] String] Term]> b] [[<<prodPair Π _ : [List String] String> Term> s] [appTerm a]]]]] l] la]]]] t2] l2] t1] l1]] [[appLTerm t2] l2]]] [<<<distList Bool> Π con : [List String] String> Term> l]]]] λ c : Char [[<<prodPair Π con : [List String] String> Term> [λ c : Char λ _ : [List String] [stringConcat [[<cons String> [[stringCons κκ] stringNil]] [[<cons String> [[stringCons c] stringNil]] <nil String>]]] c]] [charTerm c]]] [[<<prodPair Π con : [List String] String> Term> λ _ : [List String] [[stringCons κ_] stringNil]] unknownTerm]] [<<<recursionProduct Π con : [List String] String> Term> [[Product Π con : [List String] String] Term]> λ u1 : Π con : [List String] String λ u2 : Term [[<<prodPair Π con : [List String] String> Term> [[λ _ : Term λ t : Π _ : [List String] String λ con : [List String] [stringConcat [[<cons String> [[stringCons κγ] [[stringCons κ{] stringNil]]] [[<cons String> [t con]] [[<cons String> [[stringCons κ}] stringNil]] <nil String>]]]] u2] u1]] [unquoteTerm u2]]]]] : Π _ : Term Π _ : [List String] String.
let showTerm := λ t : Term [[showTermWithContext t] <nil String>] : Π t : Term String.