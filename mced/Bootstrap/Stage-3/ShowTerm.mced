--------------------------------------------------------------------------------
-- Defines showTerm
--
-- TODO: move somewhere else?
--------------------------------------------------------------------------------

b-let showIndex' (i : init$index') : String :=
  i ?String
    ""
    (stringApp "0") (stringApp "1") (stringApp "2") (stringApp "3") (stringApp "4")
    (stringApp "5") (stringApp "6") (stringApp "7") (stringApp "8") (stringApp "9").

b-let showIndex (i : DBIndex) : String :=
  i ?String
    (λ i' : DBIndex'. φ"0${showIndex' i'}")
    (λ i' : DBIndex'. φ"1${showIndex' i'}")
    (λ i' : DBIndex'. φ"2${showIndex' i'}")
    (λ i' : DBIndex'. φ"3${showIndex' i'}")
    (λ i' : DBIndex'. φ"4${showIndex' i'}")
    (λ i' : DBIndex'. φ"5${showIndex' i'}")
    (λ i' : DBIndex'. φ"6${showIndex' i'}")
    (λ i' : DBIndex'. φ"7${showIndex' i'}")
    (λ i' : DBIndex'. φ"8${showIndex' i'}")
    (λ i' : DBIndex'. φ"9${showIndex' i'}").

b-let showVar (con : List String) (v : Var) : String :=
  v ?String (λ s : String. s) (λ i : init$index. lookupDefault ?String (indexToNat i) (showIndex i) con).
b-let showSort (s : Sort) : String := s ?String "*" "□".
b-let showBinder (b : Binder) : String := matchBinder ?String "λ" "Λ" "Π" "∀" b.

b-let emptyName (n : String) : Bool := or (stringEq n "") (stringEq n "_").
b-let isArrow (b : Binder) : Bool := matchBinder ?Bool false false true true b.
b-let showBinderArrow (b : Binder) : String := matchBinder ?String "λ is not an arrow!" "Λ is not an arrow!" "->" "=>" b.

b-let needsParens : Term -> Bool :=
  matchTerm ?Bool
    (λ _ : Var. false)
    (λ _ : Sort. false)
    (λ _ : Binder. λ _ : String. λ _, _ : Term. true)
    (λ _ : Term. λ _ : List (Product Bool Term). true)
    (λ _ : Char. false)
    false
    (λ _ : Term. false).

b-let wrapWithParens (s : String) : String := φ"(${s})".

b-let showTermWithContext (t : Term) : List String -> String := recursionTerm ?(List String -> String)
  (λ v : Var. λ con : List String. showVar con v)
  (λ s : Sort. λ _ : List String. showSort s)
  (λ b : Binder. λ n : String. λ _, _ : Term. λ T, t : List String -> String. λ con : List String.
    ifthenelse ?String (and (isArrow b) (emptyName n))
      φ"${T con} ${showBinderArrow b} ${t (cons ?String n con)}"
      φ"${showBinder b} ${n} : ${T con}. ${t (cons ?String n con)}")
  (λ _ : Term. λ la : List App. λ t : List String -> String.
   λ l : List (Product Bool (List String -> String)). λ con : List String. stringConcat
     (cons ?String (t con)
           (map ?(TripleProduct Bool (List String -> String) Term) ?String
                (recursionTripleProduct ?Bool ?(List String -> String) ?Term ?String
                  (λ b : Bool. λ s : List String -> String. λ t' : Term. stringConcat [String|
                    ifthenelse ?String b " ?" " ";
                    ifthenelse ?String (needsParens t') (wrapWithParens (s con)) (s con)]))
                (zipWith ?(Product Bool (List String -> String)) ?App
                         ?(TripleProduct Bool (List String -> String) Term)
                         (λ bs : Product Bool (List String -> String). λ a : App.
                           mkTripleProduct ?Bool ?(List String -> String) ?Term
                             (pr1 ?Bool ?(List String -> String) bs)
                             (pr2 ?Bool ?(List String -> String) bs)
                             (appTerm a))
                         l la))))
  (λ c : Char. λ _ : List String. φ"κ${stringCons c stringNil}")
  (λ _ : List String. "_")
  (λ _ : Term. λ t : List String -> String. λ con : List String. φ"γ{${t con}}")
  t.

b-let showTerm (t : Term) : String := showTermWithContext t (nil ?String).
