--------------------------------------------------------------------------------
-- The Eval monad
--
-- Computations that interact with the typechecker and carry state and
-- an environment.
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- State: flags, module & some magic
--
-- The state is stored in the meta environment. Specifically, if we
-- want to store the state s with an evaluator f, we actually set the
-- evaluator to (f s). This means that we need to be careful to keep
-- the state in the meta environment in sync with the actual state in
-- computations. Also, since setting the evaluatior like that means we
-- need a term, we need a function that quotes s.
--------------------------------------------------------------------------------

-- Flags that can be used to control the evaluator
b-let EvalOpts : * := Product Bool String.
b-let defaultFlags : EvalOpts := prodPair ?Bool ?String false "".
b-let quoteEvalOpts : EvalOpts -> Term :=
  recursionProduct ?Bool ?String ?Term (λ annReq : Bool. λ workingDir : String.
    θ{prodPair ?Bool ?String γ{quoteBool annReq} γ{quoteString workingDir}}).

-- Controls whether `let` has to have a type annotation at the end to be accepted
b-let getAnnReq            : EvalOpts -> Bool := pr1 ?Bool ?String.
b-let setAnnReq (b : Bool) : EvalOpts -> EvalOpts :=
  productMap1 ?Bool ?String ?Bool (λ _ : Bool. b).

-- Working directory for imports
b-let getWorkingDir                : EvalOpts -> String := pr2 ?Bool ?String.
b-let setWorkingDir (dir : String) : EvalOpts -> EvalOpts :=
  productMap2 ?Bool ?String ?String (λ _ : String. dir).

-- ModuleState contains a module if we are in the process of defining one, as
-- well as the module dictionary. Quoting ModuleState requires the Module and
-- ModuleDict to be defined in the environment.

b-let ModuleState : * := Product (Maybe Module) ModuleDict.
b-let mkModuleState (m : Maybe Module) (d : ModuleDict) : ModuleState := prodPair ?(Maybe Module) ?ModuleDict m d.
b-let ModuleStateModule (s : ModuleState) : Maybe Module := pr1 ?(Maybe Module) ?ModuleDict s.
b-let ModuleStateDict (s : ModuleState) : ModuleDict := pr2 ?(Maybe Module) ?ModuleDict s.
b-let emptyModState : ModuleState := mkModuleState (nothing ?Module) emptyModuleDict.
b-let quoteMaybeModule (x : Maybe Module) : Term :=
  maybe ?Module ?Term
    θ{nothing ?Module}
    (λ m : Module. θ{just ?Module γ{sVarTerm (mkTempModuleName m)}})
    x.
b-let quoteDict (d : ModuleDict) : Term := sVarTerm (mkModuleDictName d).
b-let quoteModuleState (s : ModuleState) : Term :=
  θ{mkModuleState γ{quoteMaybeModule (ModuleStateModule s)} γ{quoteDict (ModuleStateDict s)}}.

-- TermInfoState is a map of names to meta information about that name.

-- File, line and column
b-let SourceLocation : * := TripleProduct String Nat Nat.
b-let mkSourceLocation := mkTripleProduct ?String ?Nat ?Nat.
b-let getFileName := pr31 ?String ?Nat ?Nat.
b-let getLine := pr32 ?String ?Nat ?Nat.
b-let getColumn := pr33 ?String ?Nat ?Nat.

b-let quoteSourceLocation (l : SourceLocation) : Term :=
  θ{mkSourceLocation γ{quoteString (getFileName l)} γ{quoteNat (getLine l)} γ{quoteNat (getColumn l)}}.

-- Location of the definition and the actual definition
b-let TermInfo : * := Product SourceLocation Term.
b-let mkTermInfo := prodPair ?SourceLocation ?Term.
b-let getLocation : TermInfo -> SourceLocation := pr1 ?SourceLocation ?Term.
b-let getDefinition : TermInfo -> Term := pr2 ?SourceLocation ?Term.

b-let quoteTermInfo (i : TermInfo) : Term :=
  θ{mkTermInfo γ{quoteSourceLocation (getLocation i)} γ{quoteTerm (getDefinition i)}}.

b-let TermInfoState : * := List (Product String TermInfo).
b-let addTermInfo (n : String) (i : TermInfo) : TermInfoState -> TermInfoState :=
  cons ?(Product String TermInfo) (prodPair ?String ?TermInfo n i).
b-let lookupTermInfo (st : TermInfoState) (n : String) : Maybe TermInfo :=
  mapMaybe ?(Product String TermInfo) ?TermInfo (pr2 ?String ?TermInfo)
    (findMaybe ?(Product String TermInfo)
      (λ p : Product String TermInfo. stringEq (pr1 ?String ?TermInfo p) n) st).

b-let quoteTermInfoState (st : TermInfoState) : Term := quoteList ?(Product String TermInfo) θ{Product String TermInfo} (quoteProduct ?String ?TermInfo θ{String} θ{TermInfo} quoteString quoteTermInfo) st.
b-let emptyTermInfoState : TermInfoState := [Product String TermInfo|].

-- OtherState is a trick/hack for storing arbitrary things in the state
b-let OtherState := Nat. -- used for counting
b-let quoteOtherState (s : OtherState) := quoteNat s.
b-let emptyOtherState := zero.

-- The additional state in the evaluator contains the ModuleState as well as the flags
b-let EvalState : * := TripleProduct EvalOpts ModuleState (Product TermInfoState OtherState).
b-let mkEvalState (f : EvalOpts) (s : ModuleState) (i : TermInfoState) (o : OtherState) : EvalState :=
  mkTripleProduct ?EvalOpts ?ModuleState ?(Product TermInfoState OtherState) f s
    (prodPair ?TermInfoState ?OtherState i o).
b-let getEvalOpts := pr31 ?EvalOpts ?ModuleState ?(Product TermInfoState OtherState).
b-let getModuleState := pr32 ?EvalOpts ?ModuleState ?(Product TermInfoState OtherState).
b-let getTermInfoState (s : EvalState) := pr1 ?TermInfoState ?OtherState (pr33 ?EvalOpts ?ModuleState ?(Product TermInfoState OtherState) s).
b-let getOtherState (s : EvalState) := pr2 ?TermInfoState ?OtherState (pr33 ?EvalOpts ?ModuleState ?(Product TermInfoState OtherState) s).

b-let quoteEvalState (s : EvalState) : Term :=
  θ{mkEvalState γ{quoteEvalOpts (getEvalOpts s)} γ{quoteModuleState (getModuleState s)} γ{quoteTermInfoState (getTermInfoState s)} γ{quoteOtherState (getOtherState s)}}.

b-let emptyEvalState : EvalState :=
  mkEvalState defaultFlags emptyModState emptyTermInfoState emptyOtherState.

b-let modifyModuleInState (f : Maybe Module -> Maybe Module) (s : EvalState) : EvalState :=
  mkEvalState (getEvalOpts s)
              (mkModuleState (f (ModuleStateModule (getModuleState s))) (ModuleStateDict (getModuleState s)))
              (getTermInfoState s)
              (getOtherState s).

b-let modifyModuleDictInState (f : ModuleDict -> ModuleDict) (s : EvalState) : EvalState :=
  mkEvalState (getEvalOpts s)
              (mkModuleState (ModuleStateModule (getModuleState s)) (f (ModuleStateDict (getModuleState s))))
              (getTermInfoState s)
              (getOtherState s).

b-let incrementStateCounter (s : EvalState) : EvalState :=
  mkEvalState (getEvalOpts s) (getModuleState s) (getTermInfoState s) (suc (getOtherState s)).

--------------------------------------------------------------------------------
-- Environment: local context
--
-- The environment is not stored directly in the meta environment like
-- the state is. Instead, it is computed from the state at the
-- beginning of a computation.
--------------------------------------------------------------------------------

b-let Context : * := List (Product String Term).
b-let EvalEnv : * := Context.

b-let getContext (e : EvalEnv) : List (Product String Term) := e.
b-let appendContext (ctx : Context) (e : EvalEnv) : EvalEnv := app ?PreParam e ctx.

b-let initEvalEnv (s : EvalState) : EvalEnv :=
  nil ?(Product String Term).

--------------------------------------------------------------------------------
-- Eval monad. This is a reader & state monad on top of the meta monad.
--------------------------------------------------------------------------------

b-let Eval : * -> * := λ T : *. EvalEnv -> EvalState -> M (Product T EvalState).
b-let pureEval [T : *] (t : T) : Eval T := λ e : EvalEnv. λ s : EvalState.
  returnMeta ?(Product T EvalState) (prodPair ?T ?EvalState t s).
b-let bindEval [T, T' : *] (x : Eval T) (f : T -> Eval T') : Eval T' :=
  λ e : EvalEnv. λ s : EvalState.
    bindMeta ?(Product T EvalState) ?(Product T' EvalState) (x e s)
      (λ res : Product T EvalState. f (pr1 ?T ?EvalState res) e (pr2 ?T ?EvalState res)).

-- Basic monad functions
b-let joinEval [T : *] (t : Eval (Eval T)) :=
  bindEval ?(Eval T) ?T t (λ t' : Eval T. t').
b-let mapEval [T, T' : *] (f : T -> T') (t : Eval T) : Eval T' :=
  bindEval ?T ?T' t (λ x : T. pureEval ?T' (f x)).
b-let seqEval [T, T' : *] (t : Eval T) (t' : Eval T') : Eval T' :=
  bindEval ?T ?T' t (λ _ : T. t').
b-let sequenceEval [T : *] (l : List (Eval T)) : Eval (List T) :=
  foldl ?(Eval T) ?(Eval (List T)) (λ l' : Eval (List T). λ x : Eval T.
    bindEval ?T ?(List T) x (λ x' : T. mapEval ?(List T) ?(List T) (cons ?T x') l'))
    l (pureEval ?(List T) (nil ?T)).
b-let voidEval [T : *] (x : Eval T) : Eval Unit :=
  seqEval ?T ?Unit x (pureEval ?Unit tt).

b-let liftMtoEval [T : *] (t : M T) : Eval T :=
  λ _ : EvalEnv. λ s : EvalState.
    bindMeta ?T ?(Product T EvalState) t
      (λ x : T. returnMeta ?(Product T EvalState) (prodPair ?T ?EvalState x s)).

-- State monad functions
b-let getEval : Eval EvalState := λ _ : EvalEnv. λ s : EvalState.
  returnMeta ?(Product EvalState EvalState) (prodPair ?EvalState ?EvalState s s).
b-let setEval (s : EvalState) : Eval Unit := λ _ : EvalEnv. λ _ : EvalState.
  returnMeta ?(Product Unit EvalState) (prodPair ?Unit ?EvalState tt s).
b-let modifyEval (f : EvalState -> EvalState) : Eval Unit :=
  bindEval ?EvalState ?Unit getEval (λ s : EvalState. setEval (f s)).

b-let getModuleState' : Eval ModuleState := mapEval ?EvalState ?ModuleState getModuleState getEval.
b-let modifyModuleState (f : ModuleState -> ModuleState) : Eval Unit :=
  modifyEval (λ s : EvalState. mkEvalState (getEvalOpts s) (f (getModuleState s)) (getTermInfoState s) (getOtherState s)).
b-let setModuleState (s : ModuleState) : Eval Unit :=
  bindEval ?EvalState ?Unit getEval
    (λ s' : EvalState. setEval (mkEvalState (getEvalOpts s') s (getTermInfoState s') (getOtherState s'))).

b-let getEvalOpts' : Eval EvalOpts :=
  mapEval ?EvalState ?EvalOpts getEvalOpts getEval.
b-let modifyEvalOpts (f : EvalOpts -> EvalOpts) : Eval Unit :=
  modifyEval (λ s : EvalState. mkEvalState (f (getEvalOpts s)) (getModuleState s) (getTermInfoState s) (getOtherState s)).
b-let modifyOtherState (f : OtherState -> OtherState) : Eval Unit :=
  modifyEval (λ s : EvalState. mkEvalState (getEvalOpts s) (getModuleState s) (getTermInfoState s) (f (getOtherState s))).

-- Reader monad functions
b-let askEval : Eval EvalEnv := λ e : EvalEnv. λ s : EvalState.
  returnMeta ?(Product EvalEnv EvalState) (prodPair ?EvalEnv ?EvalState e s).
b-let readerEval [T : *] (p : EvalEnv -> T) : Eval T :=
  mapEval ?EvalEnv ?T p askEval.
b-let localEval [T : *] (f : EvalEnv -> EvalEnv) (x : Eval T) : Eval T :=
  λ e : EvalEnv. x (f e).

b-let askContext : Eval Context := readerEval ?Context getContext.
b-let inContext [T : *] (ctx : Context) : Eval T -> Eval T :=
  localEval ?T (appendContext ctx).

--------------------------------------------------------------------------------
-- Lift the primitives into Eval
--------------------------------------------------------------------------------
b-let let (n : String) (t : Term) : Eval Unit :=
  liftMtoEval ?Unit (primLet n (TermToInitTerm t)).
b-let annLet (n : String) (t, T : Term) : Eval Unit :=
  liftMtoEval ?Unit (primAnnLet n (TermToInitTerm t) (TermToInitTerm T)).
b-let setMEnv (eval : Term) (NT, ns : String) : Eval Unit :=
  liftMtoEval ?Unit (primSetEval (TermToInitTerm eval) NT ns).
b-let shellCmd (cmd : String) (args : List String) : Eval String :=
  liftMtoEval ?String (primShellCmd cmd args).
b-let checkTerm (T : *) (t : Term) : Eval T :=
  liftMtoEval ?T (primCheckTerm T (TermToInitTerm t)).
b-let parse (nt : String) (T : *) (text : String) : Eval (Product T String) :=
  liftMtoEval ?(Product T String) (primParse nt T text).
b-let normalize (t : Term) : Eval Term :=
  liftMtoEval ?Term (mapMeta ?init$term ?Term initTermToTerm (primNormalize (TermToInitTerm t))).
b-let headNormalize (t : Term) : Eval Term :=
  liftMtoEval ?Term (mapMeta ?init$term ?Term initTermToTerm (primHeadNormalize (TermToInitTerm t))).

-- inferType should also respect the context, use inferType below
b-let inferTypeBasic (t : Term) : Eval Term :=
  liftMtoEval ?Term (mapMeta ?init$term ?Term initTermToTerm (primInferType (TermToInitTerm t))).

-- Importing is special, see below
-- b-let import (s : String) : Eval Unit :=
--   liftMtoEval ?Unit (primImport s).

b-let getEval' : Eval Term :=
  liftMtoEval ?Term (mapMeta ?init$term ?Term initTermToTerm primGetEval).

b-let printEval (s : String) : Eval Unit :=
  liftMtoEval ?Unit (primPrint s).

b-let writeFile (fName, s : String) : Eval Unit :=
  liftMtoEval ?Unit (primWriteFile fName s).

b-let commandLine : Eval (List String) :=
  liftMtoEval ?(List String) primCommandLine.

b-let printLineEval (s : String) : Eval Unit :=
  printEval (stringApp s newline).

-- NOTE: this doesn't currently return the actual definition, just something equivalent
b-let getDef (n : String) : Eval Term := headNormalize (sVarTerm n).

--------------------------------------------------------------------------------
-- Statements are just special Eval computations that run at the top level
--------------------------------------------------------------------------------
b-let init$newStmt : * := Eval Unit.

-- Useful functions for working with statements
b-let emptyStmt : init$newStmt := pureEval ?Unit tt.

b-let seqNewStmt (s, s' : init$newStmt) : init$newStmt :=
  seqEval ?Unit ?Unit s s'.

b-let seqNewStmts (l : List init$newStmt) : init$newStmt :=
  foldl ?init$newStmt ?init$newStmt seqNewStmt (reverse ?init$newStmt l) emptyStmt.

-- Lift old statements
b-let stmtToNewStmt (stmt : M Unit) : init$newStmt :=
  liftMtoEval ?Unit stmt.

b-let updateMEnv : init$newStmt :=
  bindEval ?EvalState ?Unit getEval (λ s : EvalState.
    setMEnv (appSingle θ{evalNewStmt} (quoteEvalState s)) "init" "newStmt").

b-let echoStmt (s : String) : init$newStmt :=
  mapEval ?String ?Unit (λ _ : String. tt) (shellCmd "echo" [String | s]).

b-let echoStmtL (l : List String) : init$newStmt := echoStmt (stringConcat l).

b-let echoStmtE (s : Eval String) : init$newStmt :=
  bindEval ?String ?Unit s echoStmt.

b-let readFile (filename : String) : Eval String := shellCmd "cat" [String| filename].

b-let getPWD : Eval String := shellCmd "pwd" [String|].

b-let letInfoToNewStmt (i : LetInfo) : init$newStmt :=
  bindEval ?EvalOpts ?Unit getEvalOpts' (λ f : EvalOpts.
    ifthenelse ?init$newStmt (or (not (getAnnReq f)) (letInfoHasAnn i))
      (stmtToNewStmt (convertLetInfo i))
      (echoStmt "The provided command has no type annotation!")).

b-let catchEval [T : *] (x : Eval T) (f : String -> Eval T) : Eval T :=
  λ e : EvalEnv. λ s : EvalState.
    catchErr ?(Product T EvalState) (x e s) (λ res : String. f res e s).

b-let throwEval [T : *] (s : String) : Eval T :=
  seqEval ?Unit ?T (printEval s) (checkTerm T θ{□}).

b-let showTermE (t : Term) : Eval String :=
  mapEval ?Context ?String
    (λ ctx : Context. showTermWithContext t (reverse ?String (map ?PreParam ?String (pr1 ?String ?Term) ctx)))
    askContext.

--------------------------------------------------------------------------------
-- Elaborate let
--
-- To elaborate a let, we chain Eval computations that modify it.
--------------------------------------------------------------------------------

b-let ElabLet : * := LetInfo -> Eval LetInfo.

b-let runEvalLets' : List ElabLet -> ElabLet :=
  recursionList ?ElabLet ?ElabLet
    (pureEval ?LetInfo)
    (λ el : ElabLet. λ _ : List ElabLet. λ rec : ElabLet.
      λ i : LetInfo. bindEval ?LetInfo ?LetInfo (el i) rec).

b-let runEvalLets (els : List ElabLet) (i : LetInfo) : init$newStmt :=
  bindEval ?LetInfo ?Unit (runEvalLets' els i) letInfoToNewStmt.

-- Run a computation without modifying the LetInfo
b-let liftElabLet (x : LetInfo -> Eval Unit) : ElabLet :=
  λ i : LetInfo. seqEval ?Unit ?LetInfo (x i) (pureEval ?LetInfo i).

b-let checkTypeAnn : ElabLet :=
  liftElabLet (λ i : LetInfo. bindEval ?EvalState ?Unit getEval (λ s : EvalState.
    ifthenelse ?(Eval Unit) (or (not (getAnnReq (getEvalOpts s))) (letInfoHasAnn i))
      (pureEval ?Unit tt)
      (throwEval ?Unit "The provided command has no type annotation!"))).

--------------------------------------------------------------------------------
-- Importing
--
-- We need to make sure the state in the meta environment is tracked
-- correctly accross imports. We could either have some mechanism to
-- get the state from the import primitive, or we can just make our
-- own. Also, importing needs to respect the working directory.
--------------------------------------------------------------------------------

b-let Evaluator : * := init$newStmt -> M (Product Unit EvalState).
b-let import (filename : String) : init$newStmt :=
  bindEval ?String ?Unit (mapEval ?EvalOpts ?String getWorkingDir getEvalOpts')
    (λ workingDir : String. seqNewStmt
      (liftMtoEval ?Unit (primImport (stringConcat [String| workingDir, filename])))
      (bindEval ?Evaluator ?Unit (bindEval ?Term ?Evaluator getEval' (checkTerm Evaluator))
        (λ ev : Evaluator. bindEval ?EvalState ?Unit
          (liftMtoEval ?EvalState (mapMeta ?(Product Unit EvalState) ?EvalState
                                           (pr2 ?Unit ?EvalState) (ev emptyStmt)))
          setEval))).

--------------------------------------------------------------------------------
-- inferType
--
-- inferType should respect the current environment. This is done by
-- wrapping the term in lambdas, infering the type and then throwing
-- away the pi's.
--------------------------------------------------------------------------------

b-let stripPi : Term -> Maybe Term :=
  recursionTerm ?(Maybe Term)
    (λ _ : Var. nothing ?Term)
    (λ _ : Sort. nothing ?Term)
    (λ b : Binder. λ _ : String. λ T, t : Term. λ _, _ : Maybe Term.
      b ?(Maybe Term) (nothing ?Term) (nothing ?Term) (just ?Term t) (nothing ?Term))
    (λ _ : Term. λ _ : List App. λ _ : Maybe Term. λ _ : List (Product Bool (Maybe Term)). nothing ?Term)
    (λ _ : Char. nothing ?Term)
    (nothing ?Term)
    (λ _ : Term. λ _ : Maybe Term. nothing ?Term).

b-let stripPis : Nat -> Term -> Maybe Term :=
  recursionNat ?(Term -> Maybe Term)
    (just ?Term)
    (λ _ : Nat. λ rec : Term -> Maybe Term. λ t : Term. bindMaybe ?Term ?Term (stripPi t) rec).

b-let inferType (t : Term) : Eval Term :=
  bindEval ?Context ?Term askContext
    (λ ctx : Context. bindEval ?Term ?Term (inferTypeBasic (applyMultiBinder lambdaBinder ctx t))
      (λ T : Term. maybe ?Term ?(Eval Term) (throwEval ?Term "inferType': BUG!") (pureEval ?Term)
                         (stripPis (length ?PreParam ctx) T))).

--------------------------------------------------------------------------------
-- Invoking Eval computations.
--------------------------------------------------------------------------------

b-let runEval [T : *] (eval : Eval T) (s : EvalState) : M (Product T EvalState) :=
  (bindEval ?T ?T eval (λ t : T. seqEval ?Unit ?T updateMEnv (pureEval ?T t))) (initEvalEnv s) s.
