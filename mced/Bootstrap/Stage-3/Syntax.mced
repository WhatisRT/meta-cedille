--------------------------------------------------------------------------------
-- Base of the new syntax
--
-- We define some basic statements and the new syntax here
--------------------------------------------------------------------------------

b-let letInfoTermToQuoted (i : LetInfo) : LetInfo :=
  mkLetInfo (stringApp "qTerm" (letInfoName i)) (quoteTerm (letInfoTerm i)) (just ?Term θ{Term}).

b-let addQuotedLetInfo : ElabLet :=
  liftElabLet (λ i : LetInfo. voidEval ?Unit (letInfoToNewStmt (letInfoTermToQuoted i))).

b-let letInfoToNewStmtMod := runEvalLets [ElabLet| checkTypeAnn, moduleElab, debugPrintLetInfo].

b-let runMetaCommand (t : Term) : init$newStmt := joinEval ?Unit (checkTerm init$newStmt t).

b-let runEcho (t : Term) : init$newStmt := runMetaCommand θ{printLineEval γ{t}}.

b-let reloadMEnv : init$newStmt := modifyEval (λ e : EvalState. e).

b-let showTypeStmt (tel : Telescope) (t : Term) : init$newStmt :=
  inContext ?Unit (map ?Param ?PreParam (pr2 ?Bool ?PreParam) tel)
    (bindEval ?String ?Unit (bindEval ?Term ?String (inferType t) showTermE) (λ x : String.
      printConcatEval [String|showTerm t, " : ", x])).

b-let normalizeStmt (t : Term) : Eval Unit :=
  bindEval ?Term ?Unit (normalize t) (λ t' : Term.
    printConcatEval [String|showTerm t, " normalizes to: ", showTerm t']).

b-let hnfStmt (t : Term) : Eval Unit :=
  bindEval ?Term ?Unit (headNormalize t) (λ t' : Term.
    printConcatEval [String|showTerm t, " head-normalizes to: ", showTerm t']).

-- Syntax

-- statements from the old syntax
b-let init$newStmt'$o=minus=_stmt'_ (stmt : M Unit) : init$newStmt := stmtToNewStmt stmt.

-- flags

b-let init$flag$true := true.
b-let init$flag$false := false.

-- set statements

b-let modifyAndUpdateEvalOpts (f : EvalOpts -> EvalOpts) : init$newStmt :=
  seqNewStmt (modifyEvalOpts f) updateMEnv.

b-let init$setStmt$RequireTypeAnnotations^space^_flag_ (b : Bool) :=
  modifyAndUpdateEvalOpts (setAnnReq b).
b-let init$setStmt$PrintInfo^space^_flag_ (b : Bool) :=
  modifyAndUpdateEvalOpts (setPrintInfo b).
b-let init$setStmt$PWD^space^_term_ (dirT : Term) :=
  bindEval ?String ?Unit (checkTerm String dirT)
    (λ dir : String. modifyAndUpdateEvalOpts (setWorkingDir dir)).

-- "native" statements in the new syntax
b-let init$newStmt'$set^space^_setStmt_=dot= (s : init$newStmt) := s.
b-let init$newStmt'$let^space^_betterLet_ : LetInfo -> init$newStmt := letInfoToNewStmtMod.
b-let init$newStmt'$qlet^space^_betterLet_ (i : LetInfo) : init$newStmt :=
  runEvalLets [ElabLet| checkTypeAnn, moduleElab, addQuotedLetInfo] i.
b-let init$newStmt'$runMeta^space^_multiTerm_=dot= : Term -> init$newStmt := runMetaCommand.
b-let init$newStmt'$echo^space^_multiTerm_=dot= (t : Term) : init$newStmt :=
  bindEval ?Term ?Unit (modifyTermMod t) runEcho.
b-let init$newStmt'$showType^space^_telescope__multiTerm_=dot= : Telescope -> Term -> init$newStmt := showTypeStmt.
b-let init$newStmt'$normalize^space^_multiTerm_=dot= : Term -> init$newStmt := normalizeStmt.
b-let init$newStmt'$headNormalize^space^_multiTerm_=dot= : Term -> init$newStmt := hnfStmt.
b-let init$newStmt'$import^space^_string_=dot= : String -> init$newStmt := import.
b-let init$newStmt'$updateEval=dot= : init$newStmt := updateMEnv.
b-let init$newStmt'$ : init$newStmt := emptyStmt.

b-let init$newStmt$^space'^_newStmt'_ (stmt : init$newStmt) : init$newStmt := stmt.

-- new evaluator
b-let evalNewStmt (s : EvalState) (stmt : init$newStmt) : M (Product Unit EvalState) :=
  runEval ?Unit stmt s.

seteval [evalNewStmt emptyEvalState] init newStmt.

-- this defines the initial dictionary
runMeta stmtToNewStmt (convertLetInfo (mkLetInfo (mkModuleDictName emptyModuleDict) θ{emptyModuleDict} (just ?Term θ{ModuleDict}))).

-- Test parse:
--runMeta bindEval ?Term ?Unit (inferType' θ{evalNewStmt}) (λ x : Term. printLineEval (showTerm x)).
--showType filter.
