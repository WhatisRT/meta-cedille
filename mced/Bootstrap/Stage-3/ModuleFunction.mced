b-let renameVar (boundNames : List String) (f : String -> String) (v : Var) : Var :=
  v ?Var
    (λ s : String. init$var$_string_ (ifthenelse ?String (isMember ?String stringEq boundNames s) s (f s)))
    init$var$_index_.

b-let renameNamesInTermHelper (f : String -> String) (t : Term) : List String -> Term :=
  t ?(List String -> Term)
    (λ v : Var. λ boundNames : List String. varTerm (renameVar boundNames f v))
    (λ s : Sort. λ _ : List String. sortTerm s)
    (λ b : Binder. λ n : String. λ T, t : List String -> Term. λ boundNames : List String.
      binderTerm b n (T boundNames) (t (cons ?String n boundNames)))
    (λ t : List String -> Term. λ l : List (Product Bool (List String -> Term)). λ bn : List String.
      appLTerm (t bn) (map ?(Product Bool (List String -> Term)) ?(Product Bool Term)
        (recursionProduct ?Bool ?(List String -> Term) ?(Product Bool Term)
          λ b : Bool. λ tm : List String -> Term. prodPair ?Bool ?Term b (tm bn)) l))
    (λ c : Char. λ _ : List String. charTerm c)
    (λ _ : List String. unknownTerm)
    (λ u : List String -> Term. λ bn : List String. unquoteTerm (u bn)).

b-let renameNamesInTerm (f : String -> String) (t : Term) : Term :=
  renameNamesInTermHelper f t [String|].

b-let quoteParam (p : Param) : Term :=
  θ{mkParam γ{quoteBool (paramErased p)} (mkPreParam γ{quoteString (paramName p)} γ{quoteTerm (paramType p)})}.

b-let quoteTelescope (t : Telescope) : Term := quoteTermList θ{Param} (map ?Param ?Term quoteParam t).

b-let findModule (n : ModuleName) : Eval (Maybe (Product Bool Module)) :=
  mapEval ?ModuleState ?(Maybe (Product Bool Module))
    (λ s : ModuleState. lookupModuleDict n (ModuleStateDict s)) getModuleState'.

-- find module only if it is active
b-let findLoadedModule (n : ModuleName) : Eval (Maybe Module) :=
  bindEval ?(Maybe (Product Bool Module)) ?(Maybe Module) (findModule n)
    λ x : Maybe (Product Bool Module).
    pureEval ?(Maybe Module) (maybe ?(Product Bool Module) ?(Maybe Module) (nothing ?Module)
                               (recursionProduct ?Bool ?Module ?(Maybe Module)
      λ loaded : Bool. λ m : Module. ifthenelse ?(Maybe Module) loaded (just ?Module m) (nothing ?Module)) x).

b-let moduleIsLoaded (n : ModuleName) : Eval Bool :=
  bindEval ?(Maybe (Product Bool Module)) ?Bool (findModule n)
    (λ x : Maybe (Product Bool Module). pureEval ?Bool
      (maybe ?(Product Bool Module) ?Bool false (pr1 ?Bool ?Module) x)).

b-let getNewModuleVersion (n : ModuleName) : Eval Nat :=
  bindEval ?(Maybe (Product Bool Module)) ?Nat (findModule n)
    (λ x : Maybe (Product Bool Module). pureEval ?Nat
      (maybe ?(Product Bool Module) ?Nat
        zero
        (λ p : Product Bool Module.
            suc (ModuleVersion (pr2 ?Bool ?Module p))) x)).

--------------------------------------------------------------------------------
-- Defining a new module
--------------------------------------------------------------------------------

-- reload a module if it is loaded already
b-let initModule (n : ModuleName) (t : Telescope) : Eval Unit :=
  bindEval ?Nat ?Unit (getNewModuleVersion n) λ v : Nat.
    (λ m : Module.
      seqNewStmt
        (letInfoToNewStmt
          (mkLetInfo (mkTempModuleName m)
            θ{mkInitModule γ{quoteModuleName n} γ{quoteNat v} γ{quoteTelescope t}}
            (just ?Term θ{Module})))
        (modifyEval (modifyModuleInState (cons ?Module m))))
    (mkInitModule n v t).

b-let consModule (n : String) (m : Module) : Module :=
  mkModule (ModuleModuleName m) (ModuleVersion m) (ModuleTelescope m) (cons ?String n (ModuleContents m)).

b-let updateTempModule (n : String) (m : Module) : Eval Unit :=
  seqNewStmt
    (letInfoToNewStmt
      (mkLetInfo (mkTempModuleNameSuc m)
        θ{consModule γ{quoteString n} γ{sVarTerm (mkTempModuleName m)}}
        (just ?Term θ{Module})))
    (modifyEval (modifyModuleInState (mapHead ?Module (λ _ : Maybe Module. just ?Module (consModule n m))))).

b-let nameToModuleName (m : Module) (n : String) : String := stringApp (mkModuleContentPrefix (ModuleModuleInfo m)) n.
b-let nameToMaybeModuleName (x : Maybe Module) (n : String) : String :=
  maybe ?Module ?String n (λ m : Module. nameToModuleName m n) x.

b-let importExternalLetInfo (name : String) (m : Module) : LetInfo :=
  mkLetInfo (nameToModuleName m name) (sVarTerm name) (nothing ?Term).

b-let modifyTerm (t : Term) (m : Module) : Term :=
  renameNamesInTerm (stringApp (mkModuleContentPrefix (ModuleModuleInfo m))) t.

b-let modifyTermMod (t : Term) : Eval Term :=
  bindEval ?EvalState ?Term getEval (λ s : EvalState.
    pureEval ?Term (maybe ?Module ?Term t (λ m : Module. modifyTerm t m) (ModuleStateCurrentModule (getModuleState s)))).

b-let modifyLetInfo (i : LetInfo) (m : Module) : LetInfo :=
  recursionTripleProduct ?String ?Term ?(Maybe Term) ?LetInfo (λ n : String. λ t : Term. λ T : Maybe Term.
    mkLetInfo
      (nameToModuleName m n)
      (modifyTerm (foldWithLambdas (ModuleTelescope m) t) m)
      (maybe ?Term ?(Maybe Term)
        (nothing ?Term) (λ t : Term. just ?Term (modifyTerm (foldWithPi (ModuleTelescope m) t) m))
        T)) i.

b-let letInModule (i : LetInfo) (m : Module) : Eval LetInfo :=
  (recursionTripleProduct ?String ?Term ?(Maybe Term) ?(Eval LetInfo)
    λ n : String. λ t : Term. λ T : Maybe Term.
      seqEval ?Unit ?LetInfo
        (updateTempModule n m)
        (pureEval ?LetInfo (modifyLetInfo (mkLetInfo n t T) m))) i.

b-let letInMaybeModule (i : LetInfo) (x : Maybe Module) : Eval LetInfo :=
  maybe ?Module ?(Eval LetInfo)
    (pureEval ?LetInfo i)
    (letInModule i)
    x.

b-let moduleElab : ElabLet :=
  λ i : LetInfo. bindEval ?EvalState ?LetInfo getEval
    (λ s : EvalState. letInMaybeModule i (ModuleStateCurrentModule (getModuleState s))).

b-let importExternalStmt (name : String) : Eval Unit :=
  bindEval ?EvalState ?Unit getEval (λ s : EvalState.
    maybe ?Module ?(Eval Unit)
      (throwEval ?Unit "External imports are only possible in modules!")
      (λ m : Module. stmtToNewStmt (convertLetInfo (importExternalLetInfo name m)))
      (ModuleStateCurrentModule (getModuleState s))).

b-let updateModuleDict (m : Module) (d : ModuleDict) : Eval Unit :=
  letInfoToNewStmt (mkLetInfo
    (mkModuleDictNameSuc d)
    θ{insertModuleDict γ{sVarTerm (mkModuleName m)} γ{sVarTerm (mkModuleDictName d)}}
    (just ?Term θ{ModuleDict})).

b-let unloadModuleDictStmt (n : ModuleName) (d : ModuleDict) : Eval Unit :=
  bindEval ?Bool ?Unit (moduleIsLoaded n) λ loaded : Bool.
    ifthenelse ?(Eval Unit) loaded
      (seqNewStmt
        (letInfoToNewStmt (mkLetInfo
          (mkModuleDictNameSuc d)
          θ{unloadModuleFromDict γ{quoteModuleName n} γ{sVarTerm (mkModuleDictName d)}}
          (just ?Term θ{ModuleDict})))
        (modifyModuleState (λ s : ModuleState.
          (mkModuleState (ModuleStateModuleStack s) (unloadModuleFromDict n d)))))
      (throwEval ?Unit "Module isn't loaded!").

b-let finishModuleDef (m : Module) (d : ModuleDict) : Eval Unit :=
  seqNewStmts [Eval Unit|
    letInfoToNewStmt (mkLetInfo
      (mkModuleName m)
      (sVarTerm (mkTempModuleName m))
      (just ?Term θ{Module}));
    updateModuleDict m d;
    modifyModuleState (λ s : ModuleState.
      mkModuleState (tail ?Module (ModuleStateModuleStack s)) (insertModuleDict m d))].

b-let endModule : Eval Unit :=
  bindEval ?ModuleState ?Unit getModuleState'
    (λ s : ModuleState.
      maybe ?Module ?(Eval Unit)
        (throwEval ?Unit "Currently not in a module!")
        (λ m : Module. finishModuleDef m (ModuleStateDict s))
        (ModuleStateCurrentModule s)).

--------------------------------------------------------------------------------
-- Importing
--------------------------------------------------------------------------------

b-let importModule (m : Module) (l : List App) : Eval Unit :=
  bindEval ?ModuleState ?Unit getModuleState' (λ s : ModuleState.
    seqNewStmts (map ?String ?(Eval Unit)
      (λ n : String. letInfoToNewStmt (mkLetInfo
        (nameToMaybeModuleName (ModuleStateCurrentModule s) n)
        (appLTerm (sVarTerm (nameToModuleName m n)) l)
        (nothing ?Term)))
      (ModuleContents m))).

b-let moduleNameToPath (n : ModuleName) : String := stringConcat (intersperse ?String "/" n).

b-let loadModule (n : ModuleName) (prefix : String) : Eval Unit :=
  seqEval ?Unit ?Unit
    (debugPrint LogTypeDebug zero φ"Loading module: ${ModuleNameToName n}")
    (import (stringApp prefix (moduleNameToPath n))).

b-let importModuleWithLoad (n : ModuleName) (l : List App) : Eval Unit :=
  bindEval ?Bool ?Unit (moduleIsLoaded n) λ loaded : Bool.
  seqNewStmt (ifthenelse ?(Eval Unit) loaded emptyStmt (loadModule n ""))
    (bindEval ?(Maybe Module) ?Unit (findLoadedModule n) (maybe ?Module ?(Eval Unit)
      (throwEval ?Unit "importModuleWithLoad: error")
      (λ m : Module. importModule m l))).

--------------------------------------------------------------------------------
-- Parsers
--------------------------------------------------------------------------------

b-let init$moduleName'$=colon=_string__moduleName'_ (s : String) (n : ModuleName) := cons ?String s n.
b-let init$moduleName'$ := nil ?String.

b-let init$moduleName$_string__moduleName'_ (s : String) (n : ModuleName) := cons ?String s n.

-- Top-level statements

b-let init$givenArgs$=dot= := [String|].
b-let init$givenArgs$^space^_string__givenArgs_ (s : String) (l : List String) := cons ?String s l.

b-let init$newStmt'$module^space^_moduleName__telescope'_=dot=
  (m : ModuleName) (t : Telescope) : Eval Unit :=
  initModule m t.
b-let init$newStmt'$endModule=dot= : Eval Unit := endModule.
b-let init$newStmt'$importModule^space^_moduleName__maybeApplist_=dot=
  (n : ModuleName) (l : List App) : Eval Unit :=
  importModuleWithLoad n l.
b-let init$newStmt'$Given_givenArgs_ (args : List String) : Eval Unit :=
  seqNewStmts (map ?String ?(Eval Unit) importExternalStmt args).
b-let init$newStmt'$Unload^space^_moduleName_=dot= (n : ModuleName) : Eval Unit :=
  bindEval ?ModuleState ?Unit getModuleState'
    (λ s : ModuleState. unloadModuleDictStmt n (ModuleStateDict s)).
