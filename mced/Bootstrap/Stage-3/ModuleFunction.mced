b-let renameVar (f : String -> String) (v : Var) : Var :=
  v ?Var
    (λ s : String. init$var$_string_ (f s))
    init$var$_index_.

b-let renameNamesInTerm (f : String -> String) (t : Term) : Term :=
  t ?Term
    (λ v : Var. varTerm (renameVar f v))
    sortTerm
    (λ b : Binder. λ n : String. λ T : Term. λ t : Term. binderTerm b (f n) T t)
    (λ t : Term. λ l : List App. appLTerm t l)
    (λ c : Char. charTerm c)
    (unknownTerm)
    (λ u : Term. unquoteTerm u).

b-let quoteParam (p : Param) : Term :=
  θ{mkParam γ{quoteBool (paramErased p)} (mkPreParam γ{quoteString (paramName p)} γ{quoteTerm (paramType p)})}.

b-let quoteTelescope (t : Telescope) : Term := quoteTermList θ{Param} (map ?Param ?Term quoteParam t).

b-let findModule (n : ModuleName) : Eval (Maybe (Product Bool Module)) :=
  mapEval ?ModuleState ?(Maybe (Product Bool Module))
    (λ s : ModuleState. lookupModuleDict n (ModuleStateDict s)) getModuleState'.

b-let moduleIsLoaded (n : ModuleName) : Eval Bool :=
  bindEval ?(Maybe (Product Bool Module)) ?Bool (findModule n)
    (λ x : Maybe (Product Bool Module). pureEval ?Bool
      (maybe ?(Product Bool Module) ?Bool false (pr1 ?Bool ?Module) x)).

b-let getNewModuleVersion (n : ModuleName) : Eval (Maybe Nat) :=
  bindEval ?(Maybe (Product Bool Module)) ?(Maybe Nat) (findModule n)
    (λ x : Maybe (Product Bool Module). pureEval ?(Maybe Nat)
      (maybe ?(Product Bool Module) ?(Maybe Nat)
        (just ?Nat zero)
        (λ p : Product Bool Module.
          ifthenelse ?(Maybe Nat) (pr1 ?Bool ?Module p)
            (nothing ?Nat)
            (just ?Nat (suc (ModuleVersion (pr2 ?Bool ?Module p))))) x)).

b-let initModule (n : ModuleName) (t : Telescope) : init$newStmt :=
  bindEval ?(Maybe Nat) ?Unit (getNewModuleVersion n)
    (maybe ?Nat ?init$newStmt
      (throwEval ?Unit (stringConcat [String| "The module ", ModuleNameToName n , " is already loaded!"]))
      (λ v : Nat.
        (λ m : Module.
          seqNewStmt
            (letInfoToNewStmt
              (mkLetInfo (mkTempModuleName m)
                θ{mkInitModule γ{quoteModuleName n} γ{quoteNat v} γ{quoteTelescope t}}
                (just ?Term θ{Module})))
            (modifyEval (modifyModuleInState (λ _ : Maybe Module. just ?Module m))))
        (mkInitModule n v t))).

b-let consModule (n : String) (m : Module) : Module :=
  mkModule (ModuleModuleName m) (ModuleVersion m) (ModuleTelescope m) (cons ?String n (ModuleContents m)).

b-let setModule (m : Maybe Module) : init$newStmt := modifyEval (modifyModuleInState (λ _ : Maybe Module. m)).

b-let updateTempModule (n : String) (m : Module) : init$newStmt :=
  seqNewStmt
    (letInfoToNewStmt
      (mkLetInfo (mkTempModuleNameSuc m)
        θ{consModule γ{quoteString n} γ{sVarTerm (mkTempModuleName m)}}
        (just ?Term θ{Module})))
    (setModule (just ?Module (consModule n m))).

b-let nameToModuleName (m : Module) (n : String) : String := stringApp (mkModuleContentPrefix (ModuleModuleInfo m)) n.
b-let nameToMaybeModuleName (x : Maybe Module) (n : String) : String :=
  maybe ?Module ?String n (λ m : Module. nameToModuleName m n) x.

b-let importExternalLetInfo (name : String) (m : Module) : LetInfo :=
  mkLetInfo (nameToModuleName m name) (sVarTerm name) (nothing ?Term).

b-let modifyTerm (t : Term) (m : Module) : Term :=
  renameNamesInTerm (stringApp (mkModuleContentPrefix (ModuleModuleInfo m))) t.

b-let modifyTermMod (t : Term) : Eval Term :=
  bindEval ?EvalState ?Term getEval (λ s : EvalState.
    pureEval ?Term (maybe ?Module ?Term t (λ m : Module. modifyTerm t m) (ModuleStateModule (getModuleState s)))).

b-let modifyLetInfo (i : LetInfo) (m : Module) : LetInfo :=
  mkLetInfo
    (nameToModuleName m (letInfoName i))
    (modifyTerm (foldWithLambdas (ModuleTelescope m) (letInfoTerm i)) m)
    (maybe ?Term ?(Maybe Term)
      (nothing ?Term) (λ t : Term. just ?Term (modifyTerm (foldWithPi (ModuleTelescope m) t) m))
      (letInfoType i)).

b-let letInModule (i : LetInfo) (m : Module) : Eval LetInfo :=
  seqEval ?Unit ?LetInfo
    (updateTempModule (letInfoName i) m)
    (pureEval ?LetInfo (modifyLetInfo i m)).

b-let letInMaybeModule (i : LetInfo) (x : Maybe Module) : Eval LetInfo :=
  maybe ?Module ?(Eval LetInfo)
    (pureEval ?LetInfo i)
    (letInModule i)
    x.

b-let moduleElab : ElabLet :=
  λ i : LetInfo. bindEval ?EvalState ?LetInfo getEval
    (λ s : EvalState. letInMaybeModule i (ModuleStateModule (getModuleState s))).

b-let importExternalStmt (name : String) : init$newStmt :=
  bindEval ?EvalState ?Unit getEval (λ s : EvalState.
    maybe ?Module ?init$newStmt
      (throwEval ?Unit "External imports are only possible in modules!")
      (λ m : Module. stmtToNewStmt (convertLetInfo (importExternalLetInfo name m)))
      (ModuleStateModule (getModuleState s))).

b-let updateModuleDict (m : Module) (d : ModuleDict) : init$newStmt :=
  letInfoToNewStmt (mkLetInfo
    (mkModuleDictNameSuc d)
    θ{insertModuleDict γ{sVarTerm (mkModuleName m)} γ{sVarTerm (mkModuleDictName d)}}
    (just ?Term θ{ModuleDict})).

b-let unloadModuleDictStmt (n : ModuleName) (d : ModuleDict) : init$newStmt :=
  bindEval ?Bool ?Unit (moduleIsLoaded n) λ loaded : Bool.
    ifthenelse ?(Eval Unit) loaded
      (seqNewStmt
        (letInfoToNewStmt (mkLetInfo
          (mkModuleDictNameSuc d)
          θ{unloadModuleFromDict γ{quoteModuleName n} γ{sVarTerm (mkModuleDictName d)}}
          (just ?Term θ{ModuleDict})))
        (modifyModuleState (λ s : ModuleState.
          (mkModuleState (ModuleStateModule s) (unloadModuleFromDict n d)))))
      (throwEval ?Unit "Module isn't loaded!").

b-let finishModuleDef (m : Module) (d : ModuleDict) : init$newStmt :=
  seqNewStmts [init$newStmt|
    letInfoToNewStmt (mkLetInfo
      (mkModuleName m)
      (sVarTerm (mkTempModuleName m))
      (just ?Term θ{Module})),
    updateModuleDict m d,
    setModuleState (mkModuleState (nothing ?Module) (insertModuleDict m d)),
    debugPrint LogTypeDebug zero (stringConcat [String|"Loaded module: ", ModuleNameToName (ModuleModuleName m)])].

b-let endModule : init$newStmt :=
  bindEval ?ModuleState ?Unit getModuleState'
    (λ s : ModuleState.
      maybe ?Module ?init$newStmt
        (throwEval ?Unit "Currently not in a module!")
        (λ m : Module. finishModuleDef m (ModuleStateDict s))
        (ModuleStateModule s)).

b-let importModule (m : Module) (l : List App) : init$newStmt :=
  bindEval ?ModuleState ?Unit getModuleState' (λ s : ModuleState.
    seqNewStmts (map ?String ?init$newStmt
      (λ n : String. letInfoToNewStmt (mkLetInfo
        (nameToMaybeModuleName (ModuleStateModule s) n)
        (appLTerm (sVarTerm (nameToModuleName m n)) l)
        (nothing ?Term)))
      (ModuleContents m))).

b-let importFile (file : String) : init$newStmt := import file.
b-let moduleNameToPath (n : ModuleName) : String := stringConcat (intersperse ?String "/" n).

b-let importModuleOrStmt (n : ModuleName) (l : List App) (stmt : init$newStmt) : init$newStmt :=
  bindEval ?(Maybe (Product Bool Module)) ?Unit (findModule n)
    (maybe ?(Product Bool Module) ?init$newStmt stmt
      (λ m : Product Bool Module.
        ifthenelse ?init$newStmt (pr1 ?Bool ?Module m)
          (importModule (pr2 ?Bool ?Module m) l)
          (throwEval ?Unit "Module currently not loaded!"))).

b-let loadModule (n : ModuleName) (prefix : String) : init$newStmt :=
  importFile (moduleNameToPath n).

b-let importModule' (n : ModuleName) (l : List App) : init$newStmt :=
  importModuleOrStmt n l (throwEval ?Unit "Could not find module!").

b-let init$moduleName'$=colon=_string__moduleName'_ (s : String) (n : ModuleName) := cons ?String s n.
b-let init$moduleName'$ := nil ?String.

b-let init$moduleName$_string__moduleName'_ (s : String) (n : ModuleName) := cons ?String s n.

-- Top-level statements

b-let init$givenArgs$=dot= := [String|].
b-let init$givenArgs$^space^_string__givenArgs_ (s : String) (l : List String) := cons ?String s l.

b-let init$newStmt'$module^space^_moduleName__telescope'_=dot=
  (m : ModuleName) (t : Telescope) : init$newStmt :=
  initModule m t.
b-let init$newStmt'$endModule=dot= : init$newStmt := endModule.
b-let init$newStmt'$loadModule^space^_moduleName_=dot= (n : ModuleName) : init$newStmt := loadModule n "test/".
b-let init$newStmt'$importModule^space^_moduleName__maybeApplist_=dot= (n : ModuleName) (l : List App) : init$newStmt :=
  importModule' n l.
b-let init$newStmt'$Given_givenArgs_ (args : List String) : init$newStmt :=
  seqNewStmts (map ?String ?init$newStmt importExternalStmt args).
b-let init$newStmt'$Unload^space^_moduleName_=dot= (n : ModuleName) : init$newStmt :=
  bindEval ?ModuleState ?Unit getModuleState'
    (λ s : ModuleState. unloadModuleDictStmt n (ModuleStateDict s)).
