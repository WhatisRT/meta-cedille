--------------------------------------------------------------------------------
-- Defines a convenient syntax to register binary infix symbols
--------------------------------------------------------------------------------

let mkInfixData' (s, s' : String) := mkInfixData s (λ t, t' : Term. θ{γ{sVarTerm s'} γ{t} γ{t'}}).
let mkMacroInfixData (s, n1, n2 : String) (subst : Term) := mkInfixData s
  (λ t, t' : Term. θ{γ{lambdaTerm n1 θ{Term} (lambdaTerm n2 θ{Term} subst)} γ{t} γ{t'}}).

let defineInfix (symbol, n1, n2 : String) (macro : Term) : Eval Unit :=
  seqNewStmt
    (letInfoToNewStmt (mkLetInfo
      (stringApp "init$infix$" symbol)
      θ{mkInfixData γ{quoteString symbol}
          γ{lambdaTerm n1 θ{Term} (lambdaTerm n2 θ{Term} macro)}}
      (just ?Term θ{InfixData})))
    reloadMEnv.

let defineInfix' (symbol, macro : String) : Eval Unit :=
  seqNewStmt
    (letInfoToNewStmt (mkLetInfo
      (stringApp "init$infix$" symbol)
      θ{mkInfixData' γ{quoteString symbol} γ{quoteString macro}}
      (just ?Term θ{InfixData})))
    reloadMEnv.

let init$newStmt'$infix^space^=doublequote=_newstring_=doublequote=^space^=colon==equal=^space^_string_=dot=
  (s, s' : String) : Eval Unit := defineInfix' s s'.

let init$newStmt'$infixMacro^space^_string_^space^=doublequote=_newstring_=doublequote=^space^_string_^space^=colon==equal=^space^_multiTerm_=dot=
  (n1, s, n2 : String) (subst : Term) : Eval Unit :=
  defineInfix s n1 n2 (quoteTerm subst).

updateEval.

infix "×" := Product.

-- TODO: do the quoting stuff automatically
infixMacro f "=dollar=" x := γ{f} γ{x}.

-- Note: this requires elet until the regular let supports elaboration
infixMacro x "=rangle==rangle=" y := seqEval ?_ ?_ γ{x} γ{y}.
infixMacro x "=rangle==rangle==equal=" y := bindEval ?_ ?_ γ{x} γ{y}.
infixMacro x "=semicolon=" y := prodPair ?_ ?_ γ{x} γ{y}.
infixMacro x "∷" y := cons ?_ γ{x} γ{y}.
