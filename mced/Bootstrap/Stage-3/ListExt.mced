--------------------------------------------------------------------------------
-- List functions that are more pleasantly written now
--------------------------------------------------------------------------------

b-let replicate [A : *] (a : A) (n : Nat) : List A :=
  n ?(List A) (nil ?A) (cons ?A a).

b-let showList [X : *] (showX : X -> String) (l : List X) : String :=
  φ"[${stringConcat (intersperse ?String ", " (map ?X ?String showX l))}]".

b-let lookupDefault [A : *] (n : Nat) (d : A) (l : List A) : A :=
  l ?(Nat -> A)
    (λ _ : Nat. d)
    (λ a : A. λ rec : Nat -> A.
      recursionNat ?A a (λ k : Nat. λ _ : A. rec k))
    n.

b-let head [A : *] (l : List A) : Maybe A :=
  l ?(Maybe A) (nothing ?A) (λ a : A. λ _ : Maybe A. just ?A a).

b-let tail [A : *] (l : List A) : List A :=
  recursionList ?A ?(List A) [A|] (λ a : A. λ l' : List A. λ _ : List A. l') l.

b-let findMaybe [A : *] (P : A -> Bool) (l : List A) : Maybe A :=
  head ?A (filter ?A P l).

b-let exists [A : *] (P : A -> Bool) (l : List A) : Bool :=
  not (isNil ?A (filter ?A P l)).

b-let isMember [A : *] (Aeq : A -> A -> Bool) (l : List A) (a : A) : Bool :=
  exists ?A (Aeq a) l.

b-let maybeToList [A : *] : Maybe A -> List A :=
  maybe ?A ?(List A) [A|] (λ a : A. [A|a]).

b-let mapHead [A : *] (f : Maybe A -> Maybe A) : List A -> List A :=
  recursionList ?A ?(List A) (maybeToList ?A (f (nothing ?A)))
    (λ a : A. λ as, _ : List A. app ?A (maybeToList ?A (f (just ?A a))) as).

b-let initsNonEmpty [A : *] (l : List A) : List (Product A (List A)) :=
  recursionList ?A ?(List (Product A (List A)))
    [Product A (List A)|]
    (λ a : A. λ as : List A. λ rec : List (Product A (List A)).
      cons ?(Product A (List A)) (prodPair ?A ?(List A) a as) rec)
    l.

b-let tailsNonEmpty [A : *] (l : List A) : List (Product A (List A)) :=
  reverse ?(Product A (List A)) (initsNonEmpty ?A (reverse ?A l)).

b-let countToZero (n : Nat) :=
  recursionNat ?(List Nat)
    [Nat| zero]
    (λ m : Nat. λ rec : List Nat. cons ?Nat (suc m) rec)
    n.

b-let countToZeroExc (n : Nat) :=
  recursionNat ?(List Nat)
    [Nat|]
    (λ m : Nat. λ rec : List Nat. cons ?Nat m rec)
    n.

b-let zipWith [A, B, C : *] (f : A -> B -> C) (l : List A) (l' : List B) : List C :=
  l ?(List B -> List C)
    (λ _ : List B. [C|])
    (λ a : A. λ rec : List B -> List C.
      recursionList ?B ?(List C) [C|] (λ b : B. λ bs : List B. λ _ : List C. cons ?C (f a b) (rec bs)))
    l'.

b-let zip [A, B : *] (l : List A) (l' : List B) : List (Product A B) := zipWith ?A ?B ?(Product A B) (prodPair ?A ?B) l l'.

b-let zipWith3 [A, B, C, D : *] (f : A -> B -> C -> D) (l : List A) (l' : List B) (l'' : List C) : List D :=
  zipWith ?A ?(Product B C) ?D (λ a : A. λ bc : Product B C. f a (pr1 ?B ?C bc) (pr2 ?B ?C bc)) l (zip ?B ?C l' l'').

b-let zip3 [A, B, C : *] (l : List A) (l' : List B) (l'' : List C) : List (TripleProduct A B C) :=
  zipWith3 ?A ?B ?C ?(TripleProduct A B C) (mkTripleProduct ?A ?B ?C) l l' l''.

b-let zipWith4 [A, B, C, D, E : *] (f : A -> B -> C -> D -> E)
  (l : List A) (l' : List B) (l'' : List C) (l''' : List D) : List E :=
  zipWith ?A ?(TripleProduct B C D) ?E
    (λ a : A. λ bcd : TripleProduct B C D.
      f a (pr31 ?B ?C ?D bcd) (pr32 ?B ?C ?D bcd) (pr33 ?B ?C ?D bcd)) l (zip3 ?B ?C ?D l' l'' l''').

b-let concat [A : *] (l : List (List A)) : List A :=
  l ?(List A) [A|] (λ l' : List A. λ rec : List A. app ?A l' rec).

b-let drop [A : *] (n : Nat) (l : List A) : List A :=
  n ?(List A) l (tail ?A).

b-let take [A : *] (n : Nat) (l : List A) : List A :=
  zipWith ?A ?Nat ?A (λ a : A. λ _ : Nat. a) l (countToZeroExc n).

b-let dropWhile [A : *] (P : A -> Bool) (l : List A) : List A :=
  recursionList ?A ?(List A) [A|]
    (λ a : A. λ as, rec : List A. ifthenelse ?(List A) (P a) rec (cons ?A a as)) l.
