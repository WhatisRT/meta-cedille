--------------------------------------------------------------------------------
-- Providing conversions for the built-in types to more natural ones
--
-- Maybe this should be moved elsewhere?
--------------------------------------------------------------------------------

b-let nothingTerm := θ{□}.
b-let nothingTerm1 (_ : Term) := nothingTerm.
b-let nothingTerm2 (_, _ : Term) := nothingTerm.
b-let nothingTerm3 (_, _, _ : Term) := nothingTerm.

b-let cedilleTerm  (s : String) := sVarTerm s.
b-let cedilleTerm1 (s : String) (t : Term) := appSingle (sVarTerm s) t.
b-let cedilleTerm2 (s : String) (t, t' : Term) := appDouble (sVarTerm s) t t'.
b-let cedilleTerm3 (s : String) (t, t', t'' : Term) := appSingle (appDouble (sVarTerm s) t t') t''.

b-let initTermToTerm (t : iTerm) : Term := t ?Term
  varTerm sortTerm
    (λ c : Const. c ?Term (sVarTerm "Char") charTerm (sVarTerm "charEq")
      (sVarTerm "M") (sVarTerm "bindM") (sVarTerm "pureM") (sVarTerm "catchErr") (sVarTerm "fix"))
    (cedilleTerm1 "π1") (cedilleTerm1 "π2") (cedilleTerm2 "β") (cedilleTerm2 "δ")
    (cedilleTerm1 "σ") (cedilleTerm3 "φ") (cedilleTerm2 "=")
    appSingle appSingleE
    (λ t : Term. λ _ : String. λ t', t'' : Term. cedilleTerm3 "ρ" t t' t'')
    (binderTerm forallBinder) (binderTerm piBinder)
    (binderTerm lambdaBinder) (binderTerm LambdaBinder)
    (λ _ : String. cedilleTerm2 "ι")
    (λ t, t' : Term. λ _ : String. λ _ : Term. cedilleTerm2 "ςPair" t t')
    nothingTerm1 nothingTerm2 nothingTerm1
    -- Zetas
    nothingTerm2 nothingTerm3 nothingTerm3 nothingTerm2 nothingTerm2
    nothingTerm3 nothingTerm1 nothingTerm1 nothingTerm1 nothingTerm1
    nothingTerm nothingTerm1 nothingTerm2 nothingTerm nothingTerm1 nothingTerm1.

-- assuming no unknowns in f and no recursive unknowns in app, infer
-- unknowns in app and return the applied term

b-let telescopeFromTypeHelper (t : Term) : Product Telescope Term :=
  prodPair ?Telescope ?Term telNil t.

b-let telCons  (n : String) (T : Term) := cons ?Param (mkParam false (mkPreParam n T)).
b-let telConsE (n : String) (T : Term) := cons ?Param (mkParam true  (mkPreParam n T)).

b-let telescopeFromType : Term -> Product Telescope Term :=
  recursionTerm ?(Product Telescope Term)
    (λ v : Var. telescopeFromTypeHelper (varTerm v))
    (λ s : Sort. telescopeFromTypeHelper (sortTerm s))
    (λ b : Binder. λ n : String. λ t, t' : Term. λ rect, rect' : Product Telescope Term.
      matchBinder ?(Product Telescope Term)
        (telescopeFromTypeHelper (lambdaTerm n t t'))
        (telescopeFromTypeHelper (LambdaTerm n t t'))
        (productMap1 ?Telescope ?Term ?Telescope (telCons n t) rect')
        (productMap1 ?Telescope ?Term ?Telescope (telConsE n t) rect')
        b)
    (λ t : Term. λ app : List App.
     λ _ : Product Telescope Term. λ _ : List (Product Bool (Product Telescope Term)).
       telescopeFromTypeHelper (appLTerm t app))
    (λ c : Char. telescopeFromTypeHelper (charTerm c))
    (telescopeFromTypeHelper unknownTerm)
    (λ u : Term. λ _ : Product Telescope Term. telescopeFromTypeHelper (unquoteTerm u)).
