--------------------------------------------------------------------------------
-- Functions for quoting strings and syntax to use with the new terms
--------------------------------------------------------------------------------

b-let quote$stringNil : Term := sVarTerm (stringCons κs (stringCons κt (stringCons κr (stringCons κi (stringCons κn (stringCons κg (stringCons κN (stringCons κi (stringCons κl stringNil))))))))).
b-let quote$stringCons : Term := sVarTerm (stringCons κs (stringCons κt (stringCons κr (stringCons κi (stringCons κn (stringCons κg (stringCons κC (stringCons κo (stringCons κn (stringCons κs stringNil)))))))))).

b-let quoteChar (c : Char) : Term := charTerm c.

b-let quoteString (s : String) : Term :=
  s ?Term
    (λ c : Char. λ rec : Term. appSingle (appSingle quote$stringCons (quoteChar c)) rec)
    quote$stringNil.

-- Syntax

b-let init$stringchar$!=doublequote=! (c : Char) : Char := c.

let init$newstring$ := stringNil : String.
let init$newstring$_stringchar__newstring_ := stringCons : Π _ : Char Π _ : String String.

--let init$singleTerm$=quote=_stringchar_=quote= := quoteChar : Π _ : Char Term.
let init$singleTerm$=doublequote=_newstring_=doublequote= := quoteString : Π _ : String Term.
let init$term$=doublequote=_newstring_=doublequote= := quoteString : Π _ : String Term.

seteval eval init stmt.

b-let newline := "
".

b-let showBool (b : Bool) := ifthenelse ?String b "true" "false".
