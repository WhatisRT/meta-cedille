let iTerm := init$term.
let Var := init$var.
let Sort := init$sort.
let DBIndex := init$index.

let SortAst := init$sort$=ast=.
let SortSq  := init$sort$=sq=.

let M := λ X : * ω X : Π _ : * *.

let returnMeta := Λ X : * λ x : X ε x : ∀ X : * Π _ : X [M X].
let bindMeta := Λ X : * Λ Y : * λ x : [M X] λ f : Π _ : X [M Y] μ x f : ∀ X : * ∀ Y : * Π _ : [M X] Π f : Π _ : X [M Y] [M Y].
let mapMeta := Λ X : * Λ Y : * λ f : Π _ : X Y λ x : [M X] [[<<bindMeta X> Y> x] λ x' : X [<returnMeta Y> [f x']]] : ∀ X : * ∀ Y : * Π f : Π _ : X Y Π _ : [M X] [M Y].
let joinMeta := Λ X : * λ x : [M [M X]] [[<<bindMeta [M X]> X> x] λ a : [M X] a] : ∀ X : * Π x : [M [M X]] [M X].

let primLet := λ s : String λ t : iTerm ζLet s t.
let primAnnLet := λ s : String λ t : iTerm λ T : iTerm ζAnnLet s t T.
let primSetEval := λ eval : iTerm λ NT : String λ ns : String ζSetEval eval NT ns.
let primShellCmd := λ s : String λ args : init$stringList ζShellCmd s args : Π _ : String Π _ : init$stringList [M String].
let primCheckTerm := λ X : * λ t : iTerm ζCheckTerm X t : Π X : * Π _ : iTerm [M X].
let primParse := λ nt : String λ T : * λ text : String ζParse nt T text.
let primNormalize := λ t : iTerm ζNormalize t.
let primHeadNormalize := λ t : iTerm ζHeadNormalize t.
let primInferType := λ t : iTerm ζInferType t.
let primImport := λ s : String ζImport s.
let primGetEval := ζGetEval.
let primPrint := λ s : String ζPrint s.
let primWriteFile := λ fName : String λ s : String ζWriteFile fName s.
let primCommandLine := ζCommandLine.
let primToggleProf := ζToggleProf.

let catchErr := Λ X : * λ run : [M X] λ catch : Π _ : String [M X] ζCatchErr run catch : ∀ X : * Π _ : [M X] Π _ : Π _ : init$err [M X] [M X].
