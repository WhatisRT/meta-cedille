import Bootstrap/Compiled/ListC.

let List := ListC : Π _ : * *.

let nil  := φ (β nilC  nilC)  nilC                   λ n : * λ c : * n
  : ∀ A : * [ListC A].
let cons := φ (β consC consC) consC λ x : * λ xs : * λ n : * λ c : * [[c x] xs]
  : ∀ A : * Π _ : A Π _ : [ListC A] [ListC A].

let matchList' := φ (β matchList matchList) matchList λ n : * λ c : * λ l : * [[l n] c]
  : ∀ A : * ∀ X : * Π _ : X Π _ : Π _ : A Π _ : [List A] X Π _ : [List A] X.

--------------------------------------------------------------------------------
-- Recursion using the y-combinator

let yRecList' := Λ A : * Λ X : * λ n : X λ c : (Π _ : A Π _ : [List A] Π _ : X X) λ l : [List A]
  β idTop
    [[ycomb λ rec : Π _ : [List A] X
        λ l : [List A] [[l n] λ a : A λ as : [List A] [[[c a] as] [rec as]]]]
      l]
  : ∀ A : * ∀ X : * Π _ : X Π _ : Π _ : A Π _ : [List A] Π _ : X X Π _ : [List A] Top.

let yRecListBeta := Λ A : * Λ X : * λ n : X λ c : (Π _ : A Π _ : [List A] Π _ : X X)
  [[<<indList A> λ l : [List A] (= [[[<<yRecList' A> X> n] c] l] [[[<<recList A> X> n] c] l])>
    β n idTop]
    λ a : A λ as : [List A] λ h : (= [[[<<yRecList' A> X> n] c] as] [[[<<recList A> X> n] c] as])
      ρ h x. (= [[[c a] as] x] [[[c a] as] [[[<<recList A> X> n] c] as]])
        β [[[c a] as] [[[<<recList A> X> n] c] as]] idTop]
  : ∀ A : * ∀ X : * Π n : X Π c : (Π _ : A Π _ : [List A] Π _ : X X) Π l : [List A]
    (= [[[<<yRecList' A> X> n] c] l] [[[<<recList A> X> n] c] l]).

let yRecList := Λ A : * Λ X : * λ n : X λ c : (Π _ : A Π _ : [List A] Π _ : X X) λ l : [List A]
  φ σ [[[<<yRecListBeta A> X> n] c] l] [[[<<recList A> X> n] c] l] [[[<<yRecList' A> X> n] c] l]
  : ∀ A : * ∀ X : * Π _ : X Π _ : Π _ : A Π _ : [List A] Π _ : X X Π _ : [List A] X.

--------------------------------------------------------------------------------
-- Recursion using the builtin fixpoint operator

-- let fixRecList' := Λ A : * Λ X : * λ n : X λ c : (Π _ : A Π _ : [List A] Π _ : X X) λ l : [List A]
--   β idTop
--     [[<fix Π _ : [List A] X>
--       λ rec : Π _ : [List A] X [[<<matchList' A> X> n] λ a : A λ as : [List A] [[[c a] as] [rec as]]]]
--       l]
--   : ∀ A : * ∀ X : * Π _ : X Π _ : Π _ : A Π _ : [List A] Π _ : X X Π _ : [List A] Top.

-- let fixRecListBeta := Λ A : * Λ X : * λ n : X λ c : (Π _ : A Π _ : [List A] Π _ : X X)
--   [[<<indList A> λ l : [List A] (= [[[<<fixRecList' A> X> n] c] l] [[[<<recList A> X> n] c] l])>
--     β n idTop]
--     λ a : A λ as : [List A] λ h : (= [[[<<fixRecList' A> X> n] c] as] [[[<<recList A> X> n] c] as])
--       ρ h x. (= [[[c a] as] x] [[[c a] as] [[[<<recList A> X> n] c] as]])
--         β [[[c a] as] [[[<<recList A> X> n] c] as]] idTop]
--   : ∀ A : * ∀ X : * Π n : X Π c : (Π _ : A Π _ : [List A] Π _ : X X) Π l : [List A]
--     (= [[[<<fixRecList' A> X> n] c] l] [[[<<recList A> X> n] c] l]).

-- let fixRecList := Λ A : * Λ X : * λ n : X λ c : (Π _ : A Π _ : [List A] Π _ : X X) λ l : [List A]
--   φ σ [[[<<fixRecListBeta A> X> n] c] l] [[[<<recList A> X> n] c] l] [[[<<fixRecList' A> X> n] c] l]
--   : ∀ A : * ∀ X : * Π _ : X Π _ : Π _ : A Π _ : [List A] Π _ : X X Π _ : [List A] X.

--------------------------------------------------------------------------------
-- Recursion

let recursionList := yRecList
  : ∀ A : * ∀ X : * Π _ : X Π _ : Π _ : A Π _ : [List A] Π _ : X X Π _ : [List A] X.

let recursionList' := Λ A : * Λ X : * λ rn : X λ rc : Π _ : A Π _ : X X λ l : [List A]
  [[[<<recursionList A> X> rn] λ a : A λ _ : [List A] [rc a]] l]
  : ∀ A : * ∀ X : * Π rn : X Π rc : Π _ : A Π _ : X X Π l : [List A] X.

--------------------------------------------------------------------------------
-- Church lists

-- let List := λ A : * ∀ X : *
--   Π _ : X
--   Π _ : (Π _ : A Π _ : X X)
--     X.

-- let nil := Λ A : * Λ X : *
--   λ n : X
--   λ c : (Π _ : A Π _ : X X)
--     n
--   : ∀ A : * [List A].

-- let cons := Λ A : * λ x : A λ xs : [List A] Λ X : *
--   λ n : X
--   λ c : (Π _ : A Π _ : X X)
--     [[c x] [[<xs X> n] c]]
--   : ∀ A : * Π _ : A Π _ : [List A] [List A].

-- let recursionList := Λ A : * Λ X : * λ rn : X λ rc : Π _ : A Π _ : [List A] Π _ : X X λ l : [List A]
--   [<<pr2 [List A]> X>
--     [[<l [[Product [List A]] X]>
--       [[<<prodPair [List A]> X> <nil A>] rn]]
--       λ a : A λ p : [[Product [List A]] X]
--         [[<<prodPair [List A]> X>
--           [[<cons A> a] [<<pr1 [List A]> X> p]]]
--           [[[rc a] [<<pr1 [List A]> X> p]] [<<pr2 [List A]> X> p]]]]].

-- let recursionList' := Λ A : * Λ X : * λ rn : X λ rc : Π _ : A Π _ : X X λ l : [List A]
--   [[<l X> rn] rc]
--   : ∀ A : * ∀ X : * Π rn : X Π rc : Π _ : A Π _ : X X Π l : [List A] X.

-- let matchList' := Λ A : * Λ X : * λ rn : X λ rc : Π _ : A Π _ : [List A] X
--   [[<<recursionList A> X> rn] λ a : A λ as : [List A] λ _ : X [[rc a] as]]
--   : ∀ A : * ∀ X : * Π _ : X Π _ : Π _ : A Π _ : [List A] X Π _ : [List A] X.

--------------------------------------------------------------------------------

let length := Λ X : *
  [[<<recursionList' X> Nat> zero] λ x : X λ n : Nat [suc n]]
  : ∀ X : * Π _ : [List X] Nat.

let nilLength := Λ X : * β zero zero : ∀ X : * = zero [<length X> <nil X>].

let isNil := Λ X : *
  [[<<matchList' X> Bool> true] λ _ : X λ _ : [List X] false]
  : ∀ X : * Π _ : [List X] Bool.

let listEq := Λ X : * λ eqX : Π _ : X Π _ : X Bool
  [[<<recursionList' X> Π _ : [List X] Bool> <isNil X>]
    λ x : X λ rec : Π _ : [List X] Bool
      [[<<recursionList X> Bool> false] λ y : X λ ys : [List X] λ _ : Bool [[and [[eqX x] y]] [rec ys]]]]
  : ∀ X : * Π eqX : Π _ : X Π _ : X Bool Π _ : [List X] Π _ : [List X] Bool.

let pureList := Λ X : * λ x : X [[<cons X> x] <nil X>] : ∀ X : * Π _ : X [List X].

let app := Λ X : * λ l1 : [List X] λ l2 : [List X]
  [[[<<recursionList' X> [List X]> l2] λ x : X λ rec : [List X] [[<cons X> x] rec]] l1]
  : ∀ X : * Π _ : [List X] Π _ : [List X] [List X].

let snoc := Λ X : * λ xs : [List X] λ x : X [[<app X> xs] [<pureList X> x]]
  : ∀ X : * Π _ : [List X] Π _ : X [List X].

let filter := Λ X : * λ f : Π _ : X Bool
  [[<<recursionList' X> [List X]> <nil X>]
    λ x : X λ rec : [List X] [[[<ifthenelse [List X]> [f x]] [[<cons X> x] rec]] rec]]
  : ∀ X : * Π f : Π _ : X Bool Π _ : [List X] [List X].

let foldl := Λ A : * Λ B : * λ f : (Π _ : B Π _ : A B)
  [[<<recursionList' A> Π _ : B B>
  λ b : B b]
  λ a : A λ rec : Π _ : B B λ b : B [[f [rec b]] a]].

let foldr := Λ A : * Λ B : * λ f : (Π _ : A Π _ : B B) λ l : [List A] λ b : B
  [[[<<recursionList' A> B> b] λ a : A λ rec : B [[f a] rec]] l].

let reverseAcc := Λ X : *
  [[<<recursionList' X> Π _ : [List X] [List X]>
    λ acc : [List X] acc]
    λ x : X λ rec : Π _ : [List X] [List X] λ acc : [List X] [rec [[<cons X> x] acc]]].

let reverse := Λ X : * λ l : [List X] [[<reverseAcc X> l] <nil X>]
  : ∀ X : * Π _ : [List X] [List X].

let scanl := Λ A : * Λ B : * λ f : (Π _ : B Π _ : A B) λ b : B
  [[<<recursionList A> [List B]>
  [<pureList B> b]]
  λ a : A λ as : [List A] λ rec : [List B] [[<cons B> [[[<<foldl A> B> f] [[<cons A> a] as]] b]] rec]].

let map := Λ X : * Λ Y : * λ f : Π _ : X Y
  [[<<recursionList' X> [List Y]> <nil Y>] λ x : X λ rec : [List Y] [[<cons Y> [f x]] rec]].

let intersperse :=
  Λ X : * λ x : X λ l : [List X] [[[<<recursionList X> [List X]> <nil X>]
    λ x' : X λ l' : [List X] λ rec : [List X]
      [[[<ifthenelse [List X]> [<isNil X> l']] [<pureList X> x']] [[<cons X> x'] [[<cons X> x] rec]]]] l].

let zipWith := Λ A : * Λ B : * Λ C : * λ f : Π _ : A Π _ : B C λ l : [List A] λ l' : [List B]
  [[[[<<recursionList' A> Π _ : [List B] [List C]> λ _ : [List B]
    <nil C>] λ a : A λ rec : Π _ : [List B] [List C]
    [[<<recursionList B> [List C]> <nil C>] λ b : B λ bs : [List B] λ _ : [List C] [[<cons C> [[f a] b]] [rec bs]]]] l] l']
  : ∀ A : * ∀ B : * ∀ C : * Π f : Π _ : A Π _ : B C Π l : [List A] Π l' : [List B] [List C].

let zip := Λ A : * Λ B : * [<<<zipWith A> B> [[Product A] B]> <<prodPair A> B>] : ∀ A : * ∀ B : * Π _ : [List A] Π _ : [List B] [List [[Product A] B]].
