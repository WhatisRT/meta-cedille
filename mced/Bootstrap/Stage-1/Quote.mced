--------------------------------------------------------------------------------
-- This file exports functions for writing terms with less overhead
--
-- Please use the quotation mechanism defined in `QuoteTerm` whenever possible.
--------------------------------------------------------------------------------

let quote$ast := [init$term$_sort_ init$sort$=ast=] : iTerm.
let quote$sq := [init$term$_sort_ init$sort$=sq=] : iTerm.

let quote$var := λ n : String [init$term$_var_ [init$var$_string_ n]] : Π _ : String iTerm.

let quote$pi := init$term$=pi=^space^_term_ : Π _ : iTerm iTerm.
let quote$psi := init$term$=psi=^space^_term_ : Π _ : iTerm iTerm.

let quote$beta := λ t : iTerm [init$term$=beta=^space^_term_^space^_term_ t] : Π _ : iTerm Π _ : iTerm iTerm.

let quote$delta := λ t : iTerm [init$term$=delta=^space^_term_^space^_term_ t] : Π _ : iTerm Π _ : iTerm iTerm.

let quote$sigma := init$term$=sigma=^space^_term_ : Π _ : iTerm iTerm.

let quote$square := λ t : iTerm λ t' : iTerm [[init$term$=lsquare=^space'^_term_^space^_term_^space'^=rsquare= t] t'] : Π _ : iTerm Π _ : iTerm iTerm.

let quote$angle := λ t : iTerm λ t' : iTerm [[init$term$=langle=^space'^_term_^space^_term_^space'^=rangle= t] t'] : Π _ : iTerm Π _ : iTerm iTerm.

let quote$rho := λ t : iTerm λ n : String λ t' : iTerm λ t'' : iTerm [[[[init$term$=rho=^space^_term_^space^_string_^space'^=dot=^space'^_term_^space^_term_ t] n] t'] t''].

let quote$forall := λ name : String λ t : iTerm λ t' : iTerm [[[init$term$=forall=^space^_string_^space'^=colon=^space'^_term_^space^_term_ name] t] t'] : Π _ : String Π _ : iTerm Π _ : iTerm iTerm.

let quote$Pi := λ name : String λ t : iTerm λ t' : iTerm [[[init$term$=Pi=^space^_string_^space'^=colon=^space'^_term_^space^_term_ name] t] t'] : Π _ : String Π _ : iTerm Π _ : iTerm iTerm.

let quote$iota := λ name : String λ t : iTerm λ t' : iTerm [[[init$term$=iota=^space^_string_^space'^=colon=^space'^_term_^space^_term_ name] t] t'] : Π _ : String Π _ : iTerm Π _ : iTerm iTerm.

let quote$lambda := λ name : String λ t : iTerm λ t' : iTerm [[[init$term$=lambda=^space^_string_^space'^=colon=^space'^_term_^space^_term_ name] t] t'] : Π _ : String Π _ : iTerm Π _ : iTerm iTerm.

let quote$Lambda := λ name : String λ t : iTerm λ t' : iTerm [[[init$term$=Lambda=^space^_string_^space'^=colon=^space'^_term_^space^_term_ name] t] t'] : Π _ : String Π _ : iTerm Π _ : iTerm iTerm.

let quote$brace := λ t : iTerm λ t' : iTerm λ n : String λ t'' : iTerm [[[[init$term$=lbrace=^space'^_term_^space'^=comma=^space'^_term_^space^_string_^space'^=dot=^space'^_term_^space'^=rbrace= t] t'] n] t''].

let quote$phi := λ t : iTerm λ t' : iTerm λ t'' : iTerm [[[init$term$=phi=^space^_term_^space^_term_^space^_term_ t] t] t].

let quote$equal := λ t : iTerm λ t' : iTerm [[init$term$=equal=^space^_term_^space^_term_ t] t'].

let quote$omega := λ t : iTerm [init$term$=omega=^space^_term_ t].

let quote$mu := λ t : iTerm λ t' : iTerm [[init$term$=mu=^space^_term_^space^_term_ t] t'].

let quote$epsilon := λ t : iTerm [init$term$=epsilon=^space^_term_ t].

let quote$constChar := init$const$CharT.
let quote$Kappa := λ c : init$const [init$term$=Kappa=_const_ c].

let quote$kappa := λ c : Char [quote$Kappa [init$const$=kappa=_char_ c]].
