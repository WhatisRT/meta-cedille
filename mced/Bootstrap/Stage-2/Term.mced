--------------------------------------------------------------------------------
-- A more convenient term datatype and corresponding syntax
--
-- Application: use f x1 ... xn where erased arguments are prefixed with a '?'
-- Others: use *, □, "...", (...), {Π ∀ λ Λ} x1, ..., xn : T. t,
--------------------------------------------------------------------------------

let Binder := ∀ X : * Π _ : X Π _ : X Π _ : X Π _ : X X.
let lambdaBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X lambda.
let LambdaBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X Lambda.
let piBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X pi.
let forallBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X forall.

let Term := ∀ X : *
  Π _ : (Π _ : Var X)
  Π _ : (Π _ : Sort X)
  Π _ : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  Π _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  Π _ : (Π _ : Char X)
  Π _ : X
  Π _ : (Π _ : X X) X.

let varTerm := λ var : Var Λ X : *
  λ v : (Π _ : Var X)
  λ _ : (Π _ : Sort X)
  λ _ : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ _ : (Π _ : Char X)
  λ _ : X
  λ _ : (Π _ : X X) [v var] : Π _ : Var Term.

let sortTerm := λ sort : Sort Λ X : *
  λ _ : (Π _ : Var X)
  λ s : (Π _ : Sort X)
  λ _ : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ _ : (Π _ : Char X)
  λ _ : X
  λ _ : (Π _ : X X) [s sort] : Π _ : Sort Term.

let binderTerm := λ binder : Binder λ name : String λ T : Term λ t : Term Λ X : *
  λ v : (Π _ : Var X)
  λ s : (Π _ : Sort X)
  λ b : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ a : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ k : (Π _ : Char X)
  λ x : X
  λ u : (Π _ : X X) [[[[b binder] name] [[[[[[[<T X> v] s] b] a] k] x] u]] [[[[[[[<t X> v] s] b] a] k] x] u]]
    : Π _ : Binder Π _ : String Π _ : Term Π _ : Term Term.

let appLTerm := λ t : Term λ l : [List [[Product Bool] Term]] Λ X : *
  λ v : (Π _ : Var X)
  λ s : (Π _ : Sort X)
  λ b : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ a : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ k : (Π _ : Char X)
  λ x : X
  λ u : (Π _ : X X)
    [[a [[[[[[[<t X> v] s] b] a] k] x] u]]
        [[<<map [[Product Bool] Term]> [[Product Bool] X]>
          [<<<recursionProduct Bool> Term> [[Product Bool] X]>
            λ b' : Bool λ t : Term [[<<prodPair Bool> X> b'] [[[[[[[<t X> v] s] b] a] k] x] u]]]]
          l]]
      : Π _ : Term Π _ : [List [[Product Bool] Term]] Term.

let charTerm := λ c : Char Λ X : *
  λ _ : (Π _ : Var X)
  λ _ : (Π _ : Sort X)
  λ _ : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ k : (Π _ : Char X)
  λ _ : X
  λ _ : (Π _ : X X) [k c] : Π _ : Char Term.

let unknownTerm := Λ X : *
  λ v : (Π _ : Var X)
  λ s : (Π _ : Sort X)
  λ b : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ a : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ k : (Π _ : Char X)
  λ x : X
  λ u : (Π _ : X X) x : Term.

let unquoteTerm := λ t : Term Λ X : *
  λ v : (Π _ : Var X)
  λ s : (Π _ : Sort X)
  λ b : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ a : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ k : (Π _ : Char X)
  λ x : X
  λ u : (Π _ : X X) [u [[[[[[[<t X> v] s] b] a] k] x] u]] : Π _ : Term Term.

let sVarTerm := λ s : String [varTerm [init$var$_string_ s]].
let iVarTerm := λ i : init$index [varTerm [init$var$_index_ i]].
let lambdaTerm := [binderTerm lambdaBinder].
let LambdaTerm := [binderTerm LambdaBinder].
let piTerm := [binderTerm piBinder].
let forallTerm := [binderTerm forallBinder].

let App' := [[Product Bool] init$term].
let appErased' := <<pr1 Bool> init$term>.
let appTerm' := <<pr2 Bool> init$term>.

let appToQuotedApp :=
  λ t : init$term λ a : App'
    [[[[
      [<ifthenelse Π _ : init$term Π _ : init$term init$term> [appErased' a]]
        quote$angle]
        quote$square]
      t] [appTerm' a]].

let foldWithApp := [<<foldl App'> init$term> appToQuotedApp] : Π _ : [List App'] Π _ : init$term init$term.

let TermToInitTerm := λ t : Term
  [[[[[[[<t init$term>
    λ v : Var [init$term$_var_ v]]
    λ s : Sort [init$term$_sort_ s]]
    λ b : Binder λ n : String λ T : init$term λ t : init$term
      [[[[[[[<b Π _ : String Π _ : init$term Π _ : init$term init$term>
        quote$lambda]
        quote$Lambda]
        quote$Pi]
        quote$forall] n] T] t]]
    λ t : init$term λ l : [List App'] [[foldWithApp [<reverse App'> l]] t]]
    λ c : Char [quote$kappa c]]
    quote$sq]
    λ u : init$term quote$sq]
  : Π _ : Term init$term.

let App := [[Product Bool] Term].
let mkApp := <<prodPair Bool> Term>.
let mkAppU := [<<prodPair Bool> Term> false].
let mkAppE := [<<prodPair Bool> Term> true].
let appErased := <<pr1 Bool> Term>.
let appTerm := <<pr2 Bool> Term>.

let appSingle := λ t : Term λ t' : Term [[appLTerm t] [<pureList App> [mkAppU t']]].
let appSingleE := λ t : Term λ t' : Term [[appLTerm t] [<pureList App> [mkAppE t']]].

let toAppU := [<<map Term> App> mkAppU].

--------------------------------------------------------------------------------
-- Parameters and telescopes
--------------------------------------------------------------------------------

-- A parameter without erasure information
let PreParam := [[Product String] Term].
let mkPreParam := <<prodPair String> Term>.

let preParamName := λ p : PreParam [<<pr1 String> Term> p] : Π _ : PreParam String.
let preParamType := λ p : PreParam [<<pr2 String> Term> p] : Π _ : PreParam Term.

-- If the first entry in the product is `true` the argument is erased
let Param := [[Product Bool] PreParam].
let mkParam := <<prodPair Bool> PreParam>.

let paramErased := <<pr1 Bool> PreParam> : Π _ : Param Bool.
let paramName := λ p : Param [<<pr1 String> Term> [<<pr2 Bool> PreParam> p]] : Π _ : Param String.
let paramType := λ p : Param [<<pr2 String> Term> [<<pr2 Bool> PreParam> p]] : Π _ : Param Term.

-- Constructs a `List PreParam` from some names and a type
let namesToPreParams :=
  λ ns : [List String] λ t : Term [[<<map String> PreParam> (λ n : String [[mkPreParam n] t])] ns].

let Telescope := [List Param].
let telApp := λ p : [List PreParam] [<app Param> [[<<map PreParam> Param> [mkParam false]] p]].
let telAppE := λ p : [List PreParam] [<app Param> [[<<map PreParam> Param> [mkParam true]] p]].
let telNil := <nil Param>.

let preParamToBinder := λ b : Binder λ t : Term λ p : PreParam
  [[[[binderTerm b] [preParamName p]] [preParamType p]] t].

let applyMultiBinder := λ b : Binder [<<foldl PreParam> Term> [preParamToBinder b]].

let telescopeToApp := λ tel : Telescope [[<<map Param> App> λ p : Param [[mkApp [paramErased p]] [sVarTerm [paramName p]]]] tel].

--------------------------------------------------------------------------------
-- Parsing rules for telescopes
--------------------------------------------------------------------------------

let init$nameparams'$ := <nil String>.
let init$nameparams'$=comma=^space'^_string__nameparams'_ := <cons String>.

let init$nameparams$_string__nameparams'_ := <cons String>.

let init$params$_nameparams_^space^=colon=^space^_multiTerm_ :=
  λ ns : [List String] λ t : Term [[namesToPreParams ns] t].

let init$telescope'$ := telNil.
let init$telescope'$^space^_telescope_ := λ t : Telescope t.

let init$telescope$=lparen=_params_=rparen=_telescope'_ := λ p : [List PreParam] [telApp p].
let init$telescope$=lsquare=_params_=rsquare=_telescope'_ := λ p : [List PreParam] [telAppE p].
let init$telescope$ := telNil.

--------------------------------------------------------------------------------
-- Multi-terms (Terms with infix notations)
--------------------------------------------------------------------------------

let InfixData := [[Product String] Π _ : Term Π _ : Term Term]. -- add assoc and binding later
let mkInfixData := <<prodPair String> Π _ : Term Π _ : Term Term>
  : Π _ : String Π _ : Π _ : Term Π _ : Term Term InfixData.

let appInfixData := <<pr2 String> Π _ : Term Π _ : Term Term>
  : Π _ : InfixData Π _ : Term Π _ : Term Term.

let appToTerm := λ i : [[Product Term] InfixData] λ t : Term
  [[[appInfixData [<<pr2 Term> InfixData> i]] t] [<<pr1 Term> InfixData> i]].

-- The single term is the leftmost, and every cons adds a term at the right
let MultiTerm := [[Product Term] [List [[Product Term] InfixData]]].

let singleMultiTerm := λ t : Term
  [[<<prodPair Term> [List [[Product Term] InfixData]]> t] <nil [[Product Term] InfixData]>]
    : Π _ : Term MultiTerm.

let consMultiTerm := λ t : Term λ i : InfixData
  [<<<productMap2 Term> [List [[Product Term] InfixData]]> [List [[Product Term] InfixData]]>
    [<cons [[Product Term] InfixData]> [[<<prodPair Term> InfixData> t] i]]]
    : Π _ : Term Π _ : InfixData Π _ : MultiTerm MultiTerm.

let multiTermSingle := <<pr1 Term> [List [[Product Term] InfixData]]>
  : Π _ : MultiTerm Term.

let multiTermRest := <<pr2 Term> [List [[Product Term] InfixData]]>
  : Π _ : MultiTerm [List [[Product Term] InfixData]].

-- let multiTermToTermLeft := λ m : MultiTerm
--   [<m Term> λ t : Term λ l : List [[Product Term] InfixData]
--     [[[<<foldl [[Product Term] InfixData]> Term> λ t' : Term λ p : [[Product Term] InfixData]
--       ]
--       t] l]]
--   [[<m Term> λ t : Term t] λ t : Term λ i : InfixData λ t' : Term [[i t'] t]]
--     : Π _ : MultiTerm Term.

let multiTermToTermRight := λ m : MultiTerm
  [[[<<recursionList [[Product Term] InfixData]> Term>
    [multiTermSingle m]]
    λ h : [[Product Term] InfixData] λ t : [List [[Product Term] InfixData]] λ _ : Term
      [[appToTerm
        [[[<<foldr [[Product Term] InfixData]> [[Product Term] InfixData]>
          λ acc : [[Product Term] InfixData] λ x : [[Product Term] InfixData]
            [[<<prodPair Term> InfixData>
              [[appToTerm acc] [<<pr1 Term> InfixData> x]]]
              [<<pr2 Term> InfixData> x]]] t] h]]
        [multiTermSingle m]]]
    [multiTermRest m]].

-- Currently, all infix symbols associate to the right
let multiTermToTerm := multiTermToTermRight.

--------------------------------------------------------------------------------
-- Syntax for new terms
--------------------------------------------------------------------------------

-- Syntax for application

let init$app$_singleTerm_ := mkAppU.
let init$app$=question=_singleTerm_ := mkAppE.

let init$applist$ := <nil App>.
let init$applist$_app__maybeApplist_ := λ a : App λ as : [List App] [[<cons App> a] as].

let init$maybeApplist$ := <nil App>.
let init$maybeApplist$^space^_applist_ := λ l : [List App] l.

-- A term applied to some arguments
let init$appTerm$_singleTerm__maybeApplist_ := appLTerm.

-- Syntax for terms in general
-- multiTerm is a potential application of multiple terms and infix notations
-- singleTerm is for anything else

-- We need one infix definition to please the parser generation
let init$infix$=minus==rangle= := [[mkInfixData init$string$nil] [piTerm init$string$nil]].

let init$multiTerm'$ := λ m : MultiTerm m : Π _ : MultiTerm MultiTerm.
let init$multiTerm'$_infix_^space^_appTerm_^space'^_multiTerm'_ :=
  λ inf : InfixData λ t : Term λ trans : Π _ : MultiTerm MultiTerm
    λ m : MultiTerm [trans [[[consMultiTerm t] inf] m]].

let init$multiTerm$_appTerm_^space'^_multiTerm'_ :=
  λ t : Term λ trans : Π _ : MultiTerm MultiTerm
    [multiTermToTerm [trans [singleMultiTerm t]]].

let init$singleTerm$=ast= := [sortTerm SortAst].
let init$singleTerm$=sq= := [sortTerm SortSq].
let init$singleTerm$=underscore= := unknownTerm.

let init$singleTerm$_string_ := λ n : String [varTerm [init$var$_string_ n]].
let init$singleTerm$=lparen=_multiTerm_=rparen= := λ t : Term t.

let init$binder$=lambda= := lambdaBinder.
let init$binder$=Lambda= := LambdaBinder.
let init$binder$=Pi= := piBinder.
let init$binder$=forall= := forallBinder.

let init$singleTerm$_binder_^space^_params_=dot=^space^_multiTerm_ :=
  λ b : Binder λ p : [List PreParam] λ t : Term [[[applyMultiBinder b] p] t].
