--------------------------------------------------------------------------------
-- ML-style let syntax
--
-- Use `b-let f (x1, ..., xn : T1) ... (... : Tn) : T := t.` to define a term
--------------------------------------------------------------------------------

-- Functions to turn a Telescope into an actual telescope that can be applied to
-- a term.

let paramToLambda := λ t : Term [<<<<recursionTripleProduct Bool> String> Term> Term>
  λ erased : Bool λ name : String λ type : Term
    [[[[[[<ifthenelse Π name : String Π T : Term Π t : Term Term> erased]
             LambdaTerm]
             lambdaTerm]
           name] type] t]]
  : Π t : Term Π _ : Param Term.

let foldWithLambdas := [<<foldl Param> Term> paramToLambda] : Π _ : Telescope Π _ : Term Term.

let paramToPi := λ t : Term [<<<<recursionTripleProduct Bool> String> Term> Term>
  λ erased : Bool λ name : String λ type : Term
    [[[[[[<ifthenelse Π name : String Π T : Term Π t : Term Term> erased]
             forallTerm]
             piTerm]
           name] type] t]]
  : Π t : Term Π _ : Param Term.

let foldWithPi := [<<foldl Param> Term> paramToPi] : Π _ : Telescope Π _ : Term Term.

-- LetInfo contains all the data associated to a `let`

let LetInfo := [[[TripleProduct String] Term] [Maybe Term]].
let mkLetInfo := <<<mkTripleProduct String> Term> [Maybe Term]>
  : Π _ : String Π _ : Term Π _ : [Maybe Term] LetInfo.
let letInfoName := λ i : LetInfo [<<<pr31 String> Term> [Maybe Term]> i].
let letInfoTerm := λ i : LetInfo [<<<pr32 String> Term> [Maybe Term]> i].
let letInfoType := λ i : LetInfo [<<<pr33 String> Term> [Maybe Term]> i].
let letInfoHasAnn := λ i : LetInfo [[[<<maybe Term> Bool> false] λ _ : Term true] [letInfoType i]].

let appendTelToLetInfo := λ tel : Telescope
  [<<<<recursionTripleProduct String> Term> [Maybe Term]> LetInfo>
    λ n : String λ t : Term λ T : [Maybe Term]
      [[[mkLetInfo n]
        [[foldWithLambdas tel] t]]
        [[<<mapMaybe Term> Term> [foldWithPi tel]] T]]].

-- converts a `LetInfo` to a let `init$stmt'`

let convertLetInfo :=
  [<<<<recursionTripleProduct String> Term> [Maybe Term]> [M Unit]>
    λ n : String λ t : Term λ T : [Maybe Term]
      [[[<<maybe Term> [M Unit]>
        [[primLet n] [TermToInitTerm t]]]
        λ type : Term [[[primAnnLet n] [TermToInitTerm t]] [TermToInitTerm type]]]
        T]].

-- Syntax for `let`

let init$betterLetType$ := [<<inr Term> Unit> tt].
let init$betterLetType$^space^_multiTerm_=colon= := λ t : Term [<<inl Term> Unit> t].

let init$betterLet$_string_^space^_telescope_=colon=_betterLetType_=equal=^space'^_multiTerm_=dot= :=
  λ n : String λ tel : Telescope λ maybeType : [Maybe Term] λ term : Term
    [[appendTelToLetInfo tel] [[[mkLetInfo n] term] maybeType]].

let init$stmt'$b=minus=let^space^_betterLet_ := convertLetInfo.

seteval eval init stmt.
