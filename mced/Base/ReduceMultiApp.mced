let fueledFix [A : *] (n : Nat) (a : A) (f : A -> A) : A := n ?A a f.

-- recursively rewrite: (f x1 ... xn) y1 ... yk -> f x1 ... xn y1 ... yk
let reduceMultiApp : Term -> Term :=
  fueledFix ?(Term -> Term) 20 (λ t : Term. t) λ reduceMultiApp : Term -> Term.
    matchTerm ?Term
      varTerm
      sortTerm
      (λ b : Binder. λ n : String. λ T, t : Term.
        binderTerm b n (reduceMultiApp T) (reduceMultiApp t))
      (λ t1 : Term. λ app1 : List App.
        ψ reduceAppL = map ?App ?App $ productMap2 ?Bool ?Term ?Term reduceMultiApp
                      : List App -> List App.
        ψ t1r        = reduceMultiApp t1 : Term.
        ψ app1r      = reduceAppL app1 : List App.
        ψ t          = appLTerm t1r app1r : Term. matchTerm ?Term
          (λ _ : Var. t)
          (λ _ : Sort. t)
          (λ _ : Binder. λ _ : String. λ _, _ : Term. t)
          (λ t2 : Term. λ app2 : List App. appLTerm t2 (app ?App app2 app1r))
          (λ _ : Char. t)
          t
          (λ _ : Term. t)
          t1r)
      charTerm
      unknownTerm
      (λ t : Term. unquoteTerm (reduceMultiApp t)).

assertEq θ{a b c (d e f g h)} = reduceMultiApp θ{(a b c) ((d e f) g h)} : Term.
