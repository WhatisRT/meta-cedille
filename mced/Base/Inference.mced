let applyDownFrom [A : *] (f : Nat -> A) : Nat -> List A :=
  recursionNat ?(List A) [A|] (λ i : Nat. λ rec : List A. cons ?A (f i) rec).
let downFrom : Nat -> List Nat := applyDownFrom ?Nat (λ n : Nat. n).

let applyUpTo [A : *] (f : Nat -> A) (n : Nat) : List A :=
  reverse ?A (applyDownFrom ?A f n).
let upTo : Nat -> List Nat := applyUpTo ?Nat (λ n : Nat. n).

let zipWithIndex [A, B : *] (f : Nat -> A -> B) (l : List A) : List B :=
  zipWith ?Nat ?A ?B f (upTo (length ?A l)) l.

let collectMapMaybe [A, B : *] (f : A -> Maybe B) (l : List A) : List B :=
  foldl ?A ?(List B)
    (λ acc : List B. λ a : A. maybe ?B ?(List B) acc (λ b : B. cons ?B b acc) $ f a)
    l [B|].

let pairWithIndex : Telescope -> List (Nat × Param) := zipWithIndex ?Param ?(Nat × Param) (prodPair ?Nat ?Param).

let Variable := String × Nat.
let InferenceInfo := Variable × Term × Term × Maybe Term.

let inferenceInfoVariable : InferenceInfo -> Variable := pr1 ?Variable ?(Term × Term × Maybe Term).
let inferenceInfoName (i : InferenceInfo) : String := pr1 ?String ?Nat $ inferenceInfoVariable i.
let inferenceInfoTerm (i : InferenceInfo) : Term :=
  pr1 ?Term ?(Term × Maybe Term) $ pr2 ?Variable ?(Term × Term × Maybe Term) i.
let inferenceInfoType1 (i : InferenceInfo) : Term :=
  pr1 ?Term ?(Maybe Term) $ pr2 ?Term ?(Term × Maybe Term) $ pr2 ?Variable ?(Term × Term × Maybe Term) i.
let inferenceInfoType2 (i : InferenceInfo) : Maybe Term :=
  pr2 ?Term ?(Maybe Term) $ pr2 ?Term ?(Term × Maybe Term) $ pr2 ?Variable ?(Term × Term × Maybe Term) i.

let pairWithApp (tel : Telescope) : List (App × Maybe Term) -> List InferenceInfo :=
  zipWith ?(Nat × Param) ?(App × Maybe Term) ?InferenceInfo (recursionProduct ?Nat ?Param ?((App × Maybe Term) -> InferenceInfo)
    λ n : Nat. λ p : Param. recursionProduct ?App ?(Maybe Term) ?InferenceInfo
    λ a : App. λ t : Maybe Term.
    prodPair ?Variable ?(Term × Term × Maybe Term)
      (prodPair ?String ?Nat (paramName p) n) $
      prodPair ?Term ?(Term × Maybe Term) (appTerm a) $ prodPair ?Term ?(Maybe Term) (paramType p) t)
    (pairWithIndex tel).

let genInferenceInfo (T : Term) (app : List (App × Maybe Term)) : List InferenceInfo :=
  pairWithApp (pr1 ?Telescope ?Term $ telescopeFromType T) app.

let isUnknown (t : Term) : Bool :=
  t ?Bool
    (λ _ : Var. false)
    (λ _ : Sort. false)
    (λ _ : Binder. λ _ : String. λ _ : Bool. λ _ : Bool. false)
    (λ _ : Bool. λ _ : List (Bool × Bool). false)
    (λ _ : Char. false)
    true
    (λ _ : Bool. false).

let isSolved (l : List App) : Bool :=
  isNil ?App (filter ?App (λ a : App. isUnknown $ appTerm a) l).

let sequenceRecApp (recapp : List (Bool × Eval Term)) : Eval (List App) :=
  sequenceEval ?App $
    map ?(Bool × Eval Term) ?(Eval App)
      (recursionProduct ?Bool ?(Eval Term) ?(Eval App) λ b : Bool. λ t : Eval Term.
        mapEval ?Term ?App (mkApp b) t)
    recapp.

-- apply f to all applications in a term
let applyToApp (f : Term -> List App -> Eval Term) (t : Term) : Eval Term :=
  t ?(Eval Term)
    (λ v : Var. pureEval ?Term $ varTerm v)
    (λ s : Sort. pureEval ?Term $ sortTerm s)
    (λ b : Binder. λ n : String. λ recT, rect : Eval Term.
      bindEval ?Term ?Term recT (λ T : Term. inContext ?Term [String × Term| prodPair ?String ?Term n T] $
        bindEval ?Term ?Term rect (λ t : Term.
          pureEval ?Term $ binderTerm b n T t)))
    (λ rect : Eval Term. λ recapp : List (Bool × Eval Term).
       bindEval ?Term ?Term rect (λ t : Term.
         bindEval ?(List App) ?Term (sequenceRecApp recapp) (λ app : List App.
           f t app)))
    (λ c : Char. pureEval ?Term $ charTerm c)
    (pureEval ?Term unknownTerm)
    (λ u : Eval Term. mapEval ?Term ?Term unquoteTerm u).

let showInferenceInfo (i : InferenceInfo) : String :=
  (λ withColor : String -> String.
    stringConcat [String|
      inferenceInfoName i; withColor " := "; showTerm $ inferenceInfoTerm i;
      withColor " : "; showTerm $ inferenceInfoType1 i; withColor " = ";
      maybe ?Term ?String "_" showTerm $ inferenceInfoType2 i])
--  (withColor8 ANSI8Cyan).
  (withColor256 $ mkByte false true false true false false true false).

let inferTypeIfNotUnknown (t : Term) : Eval (Maybe Term) :=
  ifthenelse ?(Eval (Maybe Term)) (isUnknown t)
    (pureEval ?(Maybe Term) $ nothing ?Term)
    (mapEval ?Term ?(Maybe Term) (just ?Term) (inferType t)).

let inferAppTypes (app : List App) : Eval (List (App × Maybe Term)) :=
  sequenceEval ?(App × Maybe Term) $ map ?App ?(Eval (App × Maybe Term))
    (recursionProduct ?Bool ?Term ?(Eval (App × Maybe Term)) λ b : Bool. λ t : Term.
      mapEval ?(Maybe Term) ?(App × Maybe Term)
        (prodPair ?App ?(Maybe Term) (mkApp b t)) (inferTypeIfNotUnknown t))
    app.

-- Unsolved equations of terms behind some number of binders
let UnsEqn : * := Nat × Term × Term.

let mkUnsEqn' (ctx : Nat) (t1, t2 : Term) : UnsEqn :=
  prodPair ?Nat ?(Term × Term) ctx $ prodPair ?Term ?Term t1 t2.

let mkUnsEqn : Term -> Term -> UnsEqn := mkUnsEqn' 0.

let deriveEqnsHelperSuc : List UnsEqn -> List UnsEqn :=
  map ?UnsEqn ?UnsEqn (productMap1 ?Nat ?(Term × Term) ?Nat suc).

let incUnsEqnCtx (n : Nat) : List UnsEqn -> List UnsEqn :=
  n ?(List UnsEqn -> List UnsEqn)
    (λ l : List UnsEqn. l)
    (λ f : List UnsEqn -> List UnsEqn. λ l : List UnsEqn. deriveEqnsHelperSuc (f l)).

let showUnsEqn : UnsEqn -> String :=
  recursionTripleProduct ?Nat ?Term ?Term ?String (λ n : Nat. λ t, t' : Term.
    φ"${showTerm t} = ${showTerm t'} in ctx: ${showNatDecimal n}").

-- given two terms, return equations by matching on their structure
-- doesn't do any reductions
let deriveEqns' : Term -> Term -> List UnsEqn :=
  -- Note: we treat α-equivalent terms as equial
  recursionTermsDiag ?(List UnsEqn)
    (λ v1, v2 : Var. [UnsEqn| mkUnsEqn (varTerm v1) (varTerm v2)])
    (λ s1, s2 : Sort. [UnsEqn| mkUnsEqn (sortTerm s1) (sortTerm s2)])
    (λ b1 : Binder. λ n1 : String. λ T1, t1 : Term. λ b2 : Binder. λ n2 : String. λ T2, t2 : Term.
     λ rec1, rec2 : List (UnsEqn). binderEq b1 b2 ?(List UnsEqn)
      (app ?UnsEqn rec1 (deriveEqnsHelperSuc rec2))
      [UnsEqn| mkUnsEqn (binderTerm b1 n1 T1 t1) (binderTerm b2 n2 T2 t2)])
    (λ t1 : Term. λ app1 : List App. λ t2 : Term. λ app2 : List App.
     λ rect : List UnsEqn. λ recapp : List (List UnsEqn).
     and (termEq t1 t2)
         (listEq ?(Bool × Term)
                 (λ p1, p2 : Bool × Term. boolEq (pr1 ?Bool ?Term p1) (pr1 ?Bool ?Term p2)) app1 app2)
        ?(List (UnsEqn))
      (app ?UnsEqn rect $ concat ?UnsEqn recapp)
      [UnsEqn| mkUnsEqn (appLTerm t1 app1) (appLTerm t2 app2)])
    (λ c1, c2 : Char. [UnsEqn| mkUnsEqn (charTerm c1) (charTerm c2)])
    [UnsEqn|]
    (λ t1, t2 : Term. λ rec : List UnsEqn. rec)
    (λ t1, t2 : Term. [UnsEqn| mkUnsEqn t1 t2]).

let deriveEqns : UnsEqn -> List UnsEqn :=
  recursionTripleProduct ?Nat ?Term ?Term ?(List UnsEqn) λ eqnC : Nat. λ eqnL, eqnR : Term.
    incUnsEqnCtx eqnC $ deriveEqns' (reduceMultiApp eqnL) (reduceMultiApp eqnR).

-- Solved equation
let SEqn : * := Nat × Term.

-- if LHS is an index, return that index together with the appropriate RHS
let solveEqn (ctx : Nat) : UnsEqn -> Maybe SEqn :=
  recursionTripleProduct ?Nat ?Term ?Term ?(Maybe SEqn) λ eqnC : Nat. λ eqnL, eqnR : Term.
  eqnL ?(Maybe SEqn)
    (λ v : Var. v ?(Maybe SEqn)
      (λ _ : String. nothing ?SEqn)
      (λ i : init$index. just ?SEqn $
        prodPair ?Nat ?Term (sub (add ctx eqnC) (suc $ indexToNat i))
          (strengthenBy eqnC eqnR)))
    (λ _ : Sort. nothing ?SEqn)
    (λ _ : Binder. λ _ : String. λ _, _ : Maybe SEqn. nothing ?SEqn)
    (λ _ : Maybe SEqn. λ _ : List (Bool × (Maybe SEqn)). nothing ?SEqn)
    (λ _ : Char. nothing ?SEqn)
    (nothing ?SEqn)
    (λ _ : Maybe SEqn. nothing ?SEqn).

let tryHNFEqn : UnsEqn -> Eval UnsEqn :=
  recursionTripleProduct ?Nat ?Term ?Term ?(Eval UnsEqn) λ eqnC : Nat. λ eqnL, eqnR : Term.
    bindEval ?Term ?UnsEqn (headNormalize eqnL) λ t1 : Term.
    bindEval ?Term ?UnsEqn (headNormalize eqnR) λ t2 : Term.
    pureEval ?UnsEqn $ mkUnsEqn' eqnC t1 t2.

-- partition equations into solved and unsolved
let partitionSolved (ctx : Nat) (eqns : List UnsEqn) : List SEqn × List UnsEqn :=
  eqns ?(List SEqn × List UnsEqn)
    (prodPair ?(List SEqn) ?(List UnsEqn) [SEqn|] [UnsEqn|])
    (λ eq : UnsEqn. λ rec : List SEqn × List UnsEqn.
      maybe ?SEqn ?(List SEqn × List UnsEqn)
        (productMap2 ?(List SEqn) ?(List UnsEqn) ?(List UnsEqn) (cons ?UnsEqn eq) rec)
        (λ seqn : SEqn. productMap1 ?(List SEqn) ?(List UnsEqn) ?(List SEqn) (cons ?SEqn seqn) rec)
        (solveEqn ctx eq)).

-- if possible, return a starting equation
let toUnsEqn (i : InferenceInfo) : Maybe UnsEqn :=
  mapMaybe ?Term ?UnsEqn
    (λ T : Term. mkUnsEqn (inferenceInfoType1 i) T)
    (inferenceInfoType2 i).

let allUnsEqns (l : List InferenceInfo) : List UnsEqn :=
  concat ?UnsEqn $ zipWithIndex ?InferenceInfo ?(List UnsEqn)
    (λ ctx : Nat. λ i : InferenceInfo.
      maybe ?UnsEqn ?(List UnsEqn) [UnsEqn|] (deriveEqns) (toUnsEqn i)) l.

let progressEqns (ctx : Nat) (eqns : List UnsEqn) : List SEqn × List UnsEqn :=
  partitionSolved ctx $ concat ?UnsEqn $ map ?UnsEqn ?(List UnsEqn) deriveEqns eqns.

-- fueledFix
let progressEqnsN (ctx : Nat) (eqns : List UnsEqn) : Eval (List SEqn × List UnsEqn) :=
  recursionProduct ?(List SEqn) ?(List UnsEqn) ?(Eval (List SEqn × List UnsEqn))
    (λ seqns : List SEqn. λ unseqns : List UnsEqn.
      bindEval ?(List UnsEqn) ?(List SEqn × List UnsEqn)
        (traverseEval ?UnsEqn ?UnsEqn tryHNFEqn unseqns) λ eqns' : List UnsEqn.
        pureEval ?(List SEqn × List UnsEqn) $
          productMap1 ?(List SEqn) ?(List UnsEqn) ?(List SEqn) (app ?SEqn seqns) $
            progressEqns ctx eqns')
    (partitionSolved ctx $ concat ?UnsEqn $ map ?UnsEqn ?(List UnsEqn) deriveEqns eqns).

let allSolutions (l : List InferenceInfo) : Eval (List SEqn) :=
  mapEval ?(List $ List SEqn) ?(List SEqn) (concat ?SEqn) $
    sequenceEval ?(List SEqn) $ zipWithIndex ?InferenceInfo ?(Eval $ List SEqn)
      (λ ctx : Nat. λ i : InferenceInfo. mapEval ?(List SEqn × List UnsEqn) ?(List SEqn)
        (pr1 ?(List SEqn) ?(List UnsEqn))
        (progressEqnsN ctx (maybeToList ?UnsEqn $ toUnsEqn i))) l.

let showSolution (s : SEqn) : String :=
  φ"${showNatDecimal $ pr1 ?Nat ?Term s} = ${showTerm $ pr2 ?Nat ?Term s}".

let solveApp (app : List App) (s : List SEqn) : List App :=
  zipWithIndex ?App ?App
    (λ i : Nat. λ a : App. ifthenelse ?App (isUnknown $ appTerm a)
      (foldl ?SEqn ?App
        (λ a : App. recursionProduct ?Nat ?Term ?App λ eqnC : Nat. λ eqnT : Term.
          ifthenelse ?App (and (isUnknown $ appTerm a) (natEq i eqnC))
            (mkApp (appErased a) eqnT)
            a) s a) a) app.

let debugPrintElabStep (l : List InferenceInfo) : Eval Unit :=
  ifthenelse ?(Eval Unit) (isNil ?InferenceInfo l) (pureEval ?Unit tt) $
    bindEval ?(List SEqn) ?Unit (allSolutions l) λ s : List SEqn.
    printLineEval φ"Equations:  ${showList ?InferenceInfo showInferenceInfo l}\n
                    Derived 1:  ${showList ?UnsEqn showUnsEqn $
                                    collectMapMaybe ?InferenceInfo ?UnsEqn toUnsEqn l}\n
                    Derived 2:  ${showList ?UnsEqn showUnsEqn $ allUnsEqns l}\n
                    Solutions:  ${showList ?(Nat × Term) showSolution s}\n".

let solveAppWithErr (f : Term) (app : List App) (s : List InferenceInfo) : Eval Term :=
  bindEval ?(List App) ?Term (mapEval ?(List SEqn) ?(List App) (solveApp app) $ allSolutions s)
  (λ l : List App. (λ ok : Bool.
    -- FIXME: strangely, we can print the value of ok to the terminal
    -- just fine, but branching on it loops infinitely at inferenceTest4

    -- debugWrap ?Term (showBool ok) $
    -- ok ?(Eval Term)
    (pureEval ?Term (appLTerm f l))
    -- (seqEval ?Unit ?Term (debugPrintElabStep s) (throwEval ?Term
    --   φ"Could not infer all holes in: ${showTerm (appLTerm f l)}!\n"))
      )
    (isSolved l)).

let elabLocally (doDebugPrinting : Bool) (f : Term) (app : List App) : Eval Term :=
  ifthenelse ?(Eval Term) (isNil ?App app)
    (pureEval ?Term (appLTerm f app)) $
    bindEval ?Term ?Term (catchEval ?Term (inferType f) (λ e : String.
      throwEval ?Term
        φ"Elaboration failure: Failed to infer the type of ${showTerm f}!\nReason: ${e}"))
      (λ T : Term.
        bindEval ?(List (App × Maybe Term)) ?Term (inferAppTypes app) (λ app' : List (App × Maybe Term).
          seqEval ?Unit ?Term
            (ifthenelse ?(Eval Unit) doDebugPrinting
              (debugPrintElabStep $ genInferenceInfo T app')
              (pureEval ?Unit tt)) $
            solveAppWithErr f app $ genInferenceInfo T app')).

let elabLocalInference (doDebugPrinting : Bool) (t : Term) : Eval Term :=
  seqEval ?Unit ?Term
    (ifthenelse ?(Eval Unit) doDebugPrinting
      (printLineEval φ"\nElaborating: ${showTerm t}\n")
      (pureEval ?Unit tt))
    (applyToApp (elabLocally doDebugPrinting) t).

let elabLetInfo (doDebugPrinting : Bool) : LetInfo -> Eval LetInfo :=
  recursionTripleProduct ?String ?Term ?(Maybe Term) ?(Eval LetInfo)
    λ n : String. λ t : Term. λ T : Maybe Term.
      mapEval ?Term ?LetInfo (λ t : Term. mkLetInfo n t T)
        (elabLocalInference doDebugPrinting $ reduceMultiApp t).

-- let that uses this elaborator
-- this will be added to the regular let, once it works a little better
let init$newStmt'$elet^space^_betterLet_ (i : LetInfo) : Eval Unit :=
  runEvalLets [ElabLet| checkTypeAnn; moduleElab; elabLetInfo false; debugPrintLetInfo] i.

updateEval.

-- Issues:
--
-- there's no reduction
--
-- don't do anything on terms that don't contain holes

elet inferenceTest1 := λ x : Nat × Term. pr1 ?_ ?_ x.
elet inferenceTest1' := λ x : Nat × Term. pr1 ?_ ?_ $ x.
elet inferenceTest1'' := λ x : Nat × Term. (pr1 ?_ ?_) x.

elet inferenceTest2 (t : Term) : Eval Unit :=
  (elabLocalInference false t) >>= (λ t' : Term.
    (printEval $ showTerm t') >> emptyStmt).

elet inferenceTest3 (i : LetInfo) : Eval Unit :=
  elabLocalInference false (letInfoTerm i) >>= λ t : Term. pureEval ?_ tt.

elet inferenceTest4 [A, B : *] (f : Nat -> A -> B) (l : List A) : List B :=
  zipWith ?_ ?_ ?_ f (upTo (length ?_ l)) l.

elet inferenceTest5 [A, B : *] (f : A -> Maybe B) (l : List A) : List B :=
  foldl ?_ ?_ (λ acc : List B. λ a : A. maybe ?_ ?_ acc (λ b : B. cons ?_ b acc) (f a)) l [B|].

elet inferenceTest6 [A, B : *] (default : B) (f : A -> B) (x : Maybe A) :=
  recursionSum ?_ ?_ ?_ (λ a : A. f a) (λ _ : Unit. default) x.

elet inferenceTest7 [A : *] (a : A) : Maybe A := inl ?_ ?Unit a.
