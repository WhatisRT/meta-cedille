--------------------------------------------------------------------------------
-- Helper functions for compiling
--------------------------------------------------------------------------------

let modSeparator : Char := κ|.

elet stripModPrefix : Term -> Term := renameNamesInTerm (λ s : String.
  ifthenelse ?_ (isPrefix modulePrefix s)
    (stringFromList $ drop ?_ 1 $ dropWhile ?_ (λ c : Char. not $ charEq modSeparator c) $
       drop ?_ (stringLength modulePrefix) $ stringToList s)
    s).

elet nameToLetInfo (prefix, n : String) : Eval LetInfo :=
  getDef (stringApp prefix n) >>= λ t : Term.
  inferType (sVarTerm (stringApp prefix n)) >>= λ T : Term.
    pureEval ?_ $ mkLetInfo n (stripModPrefix t) (just ?_ $ stripModPrefix T).

elet moduleToLetInfos (m : Module) : Eval (List LetInfo) :=
  sequenceEval ?_ $
    map ?_ ?_ (nameToLetInfo $ mkModuleContentPrefix $ ModuleModuleInfo m)
              (reverse ?_ $ ModuleContents m).

elet getModule (modName : ModuleName) : Eval Module :=
  findModule modName >>= maybe ?_ ?_
    (throwEval ?Module $ φ"Module ${ModuleNameToName modName} doesn't exist!")
    (λ m : Bool × Module. pureEval ?_ $ pr2 ?_ ?_ m).

-- TODO: run this automatically as part of writeDefinitionsToFile
elet ensureDirExists (dir : String) :=
  voidEval ?String $ shellCmd "mkdir" [String|"-p"; dir].

elet writeDefinitionsToFile (printDef : LetInfo -> Eval String)
    (fname : String) (defs : List LetInfo) : Eval Unit :=
  traverseEval ?_ ?_ printDef defs >>= λ defs' : List String.
    writeFile fname (stringConcat $ intersperse ?_ "\n" defs').

elet compileModule (printDef : LetInfo -> Eval String) (genName : ModuleName -> String)
    (modName : ModuleName) : Eval Unit :=
  evalWithProgress ?_ (φ"Compiling: ${ModuleNameToName modName}")
                      (φ"Compiled:  ${ModuleNameToName modName}\n")
    ((getModule modName >>= moduleToLetInfos) >>= writeDefinitionsToFile printDef (genName modName)).

elet compileModules (printDef : LetInfo -> Eval String) (genName : ModuleName -> String)
    (modNames : List ModuleName) : Eval Unit :=
  voidEval ?_ $ sequenceEval ?_ $ map ?_ ?_ (compileModule printDef genName) modNames.
