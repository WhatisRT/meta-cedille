--------------------------------------------------------------------------------
-- Functions for printing to the terminal
--------------------------------------------------------------------------------

-- let ANSI8Color : * := âˆ€ X : *. X -> X -> X -> X -> X -> X -> X -> X -> X.

-- let ANSI8Black   := Î› X : *. Î» black, red, green, yellow, blue, magenta, cyan, white : X. black.
-- let ANSI8Red     := Î› X : *. Î» black, red, green, yellow, blue, magenta, cyan, white : X. red.
-- let ANSI8Green   := Î› X : *. Î» black, red, green, yellow, blue, magenta, cyan, white : X. green.
-- let ANSI8Yellow  := Î› X : *. Î» black, red, green, yellow, blue, magenta, cyan, white : X. yellow.
-- let ANSI8Blue    := Î› X : *. Î» black, red, green, yellow, blue, magenta, cyan, white : X. blue.
-- let ANSI8Magenta := Î› X : *. Î» black, red, green, yellow, blue, magenta, cyan, white : X. magenta.
-- let ANSI8Cyan    := Î› X : *. Î» black, red, green, yellow, blue, magenta, cyan, white : X. cyan.
-- let ANSI8White   := Î› X : *. Î» black, red, green, yellow, blue, magenta, cyan, white : X. white.

-- let genEscapeCode (s : String) : String :=
--   stringConcat [String|"[", s, "m"].

-- let resetCode : String :=
--   genEscapeCode "0".

-- let toColorCode8 (c : ANSI8Color) : String :=
--   genEscapeCode (c ?String "30" "31" "32" "33" "34" "35" "36" "37").

-- let toBrightColorCode8 (c : ANSI8Color) : String :=
--   genEscapeCode (stringApp (c ?String "30" "31" "32" "33" "34" "35" "36" "37") ";1").

-- let toBGColorCode8 (c : ANSI8Color) : String :=
--   genEscapeCode (c ?String "40" "41" "42" "43" "44" "45" "46" "47").

-- let withColor8 (c : ANSI8Color) (s : String) : String :=
--   stringConcat [String|toBrightColorCode8 c, s, resetCode].

-- let withColors8 (fg, bg : ANSI8Color) (s : String) : String :=
--   stringConcat [String|toColorCode8 fg, toBGColorCode8 bg, s, resetCode].

let toColorCode256 (c : Byte) : String :=
  genEscapeCode (stringApp "38;5;" $ showByte c).

let toBGColorCode256 (c : Byte) : String :=
  genEscapeCode (stringApp "48;5;" $ showByte c).

let withColor256 (c : Byte) (s : String) : String :=
  stringConcat [String|toColorCode256 c, s, resetCode].

let withColors256 (fg, bg : Byte) (s : String) : String :=
  stringConcat [String|toColorCode256 fg, toBGColorCode256 bg, s, resetCode].

--------------------------------------------------------------------------------
-- Verbosity
--------------------------------------------------------------------------------

-- let LogType : * := âˆ€ X : *. X -> X -> X -> X -> X.

-- let LogTypeDebug := Î› X : *. Î» debug, info, warn, error : X. debug.
-- let LogTypeInfo  := Î› X : *. Î» debug, info, warn, error : X. info.
-- let LogTypeWarn  := Î› X : *. Î» debug, info, warn, error : X. warn.
-- let LogTypeError := Î› X : *. Î» debug, info, warn, error : X. error.

-- let currentLogType : Eval LogType := pureEval ?LogType LogTypeDebug.

-- let debugPrint (v : LogType) (level : Nat) (m : String) : Eval Unit :=
--   bindEval ?LogType ?Unit currentLogType
--     (Î» v' : LogType. ifthenelse ?(Eval Unit) (geqLogType v v')
--       (printLineEval m)
--       (pureEval ?Unit tt)).

-- let debugPrintLetInfo : ElabLet := Î» i : LetInfo.
--   seqEval ?Unit ?LetInfo
--     (debugPrint LogTypeInfo (stringConcat [String |"Defined: ", showLetInfo i])) (pureEval ?LetInfo i).

let debugWrap [T : *] (s : String) (x : Eval T) : Eval T :=
  seqEval ?Unit ?T (printLineEval Ï†"Start: ${s}") $ bindEval ?T ?T x Î» x' : T.
  seqEval ?Unit ?T (printLineEval Ï†"Done:  ${s}") $ pureEval ?T x'.
