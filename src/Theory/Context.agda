module Theory.Context where

open import Prelude
open import Prelude.Nat
open import Theory.Terms

open import Class.Map
open import Data.HSTrie
open import Data.Word using (to‚Ñï; from‚Ñï)

record Def : Set where
  field def   : Maybe AnnTerm
        type  : AnnTerm
        extra : Maybe (PureTerm true)

instance
  Def-Show : Show Def
  Def-Show .show record { def = (just d) ; type = t } = " :=" <+> show d <+> ":" <+> show t
  Def-Show .show record { def = nothing  ; type = t } = " :" <+> show t

pattern ‚âî d = record { def = just d }
pattern ‚à∂ t = record { type = t }

GlobalContext : Set
GlobalContext = HSTrie Def

emptyGlobalContext : GlobalContext
emptyGlobalContext = emptyMap

Context : Set
Context = GlobalContext √ó List (String √ó Def)

instance
  Context-Show : Show Context
  Context-Show .show (fst , snd) = (show $ length snd) <+> "local variables:" <+> show snd

globalToContext : GlobalContext ‚Üí Context
globalToContext Œì = Œì , []

contextToGlobal : Context ‚Üí GlobalContext
contextToGlobal (fst , snd) = fst

pushDef : Context ‚Üí String √ó Def ‚Üí Context
pushDef (fst , snd) v = fst , v ‚à∑ snd

pushType : Context ‚Üí String √ó AnnTerm ‚Üí Context
pushType Œì (n , t) = pushDef Œì (n , record { def = nothing ; type = t ; extra = nothing })

private
  localContextLength : Context ‚Üí ‚Ñï
  localContextLength (fst , snd) = length snd

lookupInContext : Name ‚Üí Context ‚Üí Maybe Def
lookupInContext (Bound x) (fst , snd) =
  proj‚ÇÇ <$> lookupMaybe (to‚Ñï x) snd
lookupInContext (Free x) (fst , snd) = lookup x fst

lookupTypeInContext : Name ‚Üí Context ‚Üí Maybe AnnTerm
lookupTypeInContext n@(Bound x) Œì with lookupInContext n Œì
... | just (‚à∂ T) = just $ weakenBy (sucùïÄ x) T
... | _ = nothing
lookupTypeInContext n Œì = Def.type <$> lookupInContext n Œì

{-# TERMINATING #-}
validInContext : ‚àÄ {a} ‚Üí Term a false ‚Üí Context ‚Üí Bool
validInContext {a} = helper 0
  where
    -- instead of modifying the context here, we just count how many variables we would have added if we did
    helper : ùïÄ ‚Üí Term a false ‚Üí Context ‚Üí Bool
    helper k (Var (Bound x))  Œì = x <ùïÄ (from‚Ñï (localContextLength Œì) +ùïÄ k)
    helper k (Var n@(Free x)) Œì = maybe (Œª _ ‚Üí true) false $ lookupInContext n Œì
    helper k (Sort-T x)       Œì = true
    helper k (Const-T x)      Œì = true
    helper k (App _ t t‚ÇÅ)     Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì
    helper k (Lam-P _ _ t)    Œì = helper (sucùïÄ k) t Œì
    helper k (Lam-A _ _ t t‚ÇÅ) Œì = helper k t Œì ‚àß helper (sucùïÄ k) t‚ÇÅ Œì
    helper k (Pi _ _ t t‚ÇÅ)    Œì = helper k t Œì ‚àß helper (sucùïÄ k) t‚ÇÅ Œì
    helper k (Iota _ t t‚ÇÅ)    Œì = helper k t Œì ‚àß helper (sucùïÄ k) t‚ÇÅ Œì
    helper k (Eq-T t t‚ÇÅ)      Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì
    helper k (M-T t)          Œì = helper k t Œì
    helper k (Mu t t‚ÇÅ)        Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì
    helper k (Epsilon t)      Œì = helper k t Œì
    helper k (Ev m t)         Œì = primMetaArgsAnd $ mapPrimMetaArgs (Œª x ‚Üí helper k x Œì) t
    helper k (Pr1 t)          Œì = helper k t Œì
    helper k (Pr2 t)          Œì = helper k t Œì
    helper k (Beta t t‚ÇÅ)      Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì
    helper k (Delta t t‚ÇÅ)     Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì
    helper k (Sigma t)        Œì = helper k t Œì
    helper k (Rho t t‚ÇÅ t‚ÇÇ)    Œì = helper k t Œì ‚àß helper (sucùïÄ k) t‚ÇÅ Œì ‚àß helper k t‚ÇÇ Œì
    helper k (Pair t t‚ÇÅ t‚ÇÇ)   Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì ‚àß helper (sucùïÄ k) t‚ÇÇ Œì
    helper k (Phi t t‚ÇÅ t‚ÇÇ)    Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì ‚àß helper k t‚ÇÇ Œì

isLocallyClosed : ‚àÄ {a} ‚Üí Term a false ‚Üí Context ‚Üí Bool
isLocallyClosed t (Œì , _) = validInContext t (Œì , [])
