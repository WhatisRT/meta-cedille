open import Prelude
open import Theory.Terms

module Theory.Context where

open import Prelude.Nat

open import Data.HSTrie
open import Class.Map
open import Data.Word using (to‚Ñï; from‚Ñï)

record Def : Set where
  field def   : Maybe AnnTerm
        type  : AnnTerm
        extra : Maybe (PureTerm true)

instance
  Def-Show : Show Def
  Def-Show .show record { def = (just d) ; type = t } = " :=" <+> show d <+> ":" <+> show t
  Def-Show .show record { def = nothing  ; type = t } = " :" <+> show t

pattern ‚âî d = record { def = just d }
pattern ‚à∂ t = record { type = t }

GlobalContext : Set
GlobalContext = HSTrie Def

emptyGlobalContext : GlobalContext
emptyGlobalContext = emptyMap

Context : Set
Context = GlobalContext √ó List (String √ó Def)

instance
  Context-Show : Show Context
  Context-Show .show (fst , snd) = (show $ length snd) <+> "local variables:" + show snd

globalToContext : GlobalContext ‚Üí Context
globalToContext Œì = Œì , []

contextToGlobal : Context ‚Üí GlobalContext
contextToGlobal (fst , snd) = fst

pushDef : Context ‚Üí String √ó Def ‚Üí Context
pushDef (fst , snd) v = fst , v ‚à∑ snd

pushType : Context ‚Üí String √ó AnnTerm ‚Üí Context
pushType Œì (n , t) = pushDef Œì (n , record { def = nothing ; type = t ; extra = nothing })

private
  localContextLength : Context ‚Üí ‚Ñï
  localContextLength (fst , snd) = length snd

lookupInContext : Name ‚Üí Context ‚Üí Maybe Def
lookupInContext (Bound x) (fst , snd) =
  proj‚ÇÇ <$> lookupMaybe (to‚Ñï x) snd
lookupInContext (Free x) (fst , snd) = lookup x fst

lookupTypeInContext : Name ‚Üí Context ‚Üí Maybe AnnTerm
lookupTypeInContext n@(Bound x) Œì with lookupInContext n Œì
... | just (‚à∂ T) = just $ weakenBy (sucùïÄ x) T
... | _ = nothing
lookupTypeInContext n Œì = Def.type <$> lookupInContext n Œì

{-# TERMINATING #-}
validInContext : PureTerm false ‚Üí Context ‚Üí Bool
validInContext = helper 0
  where
    -- instead of modifying the context here, we just count how many variables we would have added if we did
    helper : ùïÄ ‚Üí PureTerm false ‚Üí Context ‚Üí Bool
    helper k (Var-P (Bound x))  Œì = x <ùïÄ (from‚Ñï (localContextLength Œì) +ùïÄ k)
    helper k (Var-P n@(Free x)) Œì = maybe (Œª _ ‚Üí true) false $ lookupInContext n Œì
    helper k (Sort-P x)         Œì = true
    helper k (Const-P x)        Œì = true
    helper k (App-P t t‚ÇÅ)       Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì
    helper k (Lam-P _ t)        Œì = helper (sucùïÄ k) t Œì
    helper k (Pi-P _ t t‚ÇÅ)      Œì = helper k t Œì ‚àß helper (sucùïÄ k) t‚ÇÅ Œì
    helper k (All-P _ t t‚ÇÅ)     Œì = helper k t Œì ‚àß helper (sucùïÄ k) t‚ÇÅ Œì
    helper k (Iota-P _ t t‚ÇÅ)    Œì = helper k t Œì ‚àß helper (sucùïÄ k) t‚ÇÅ Œì
    helper k (Eq-P t t‚ÇÅ)        Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì
    helper k (M-P t)            Œì = helper k t Œì
    helper k (Mu-P t t‚ÇÅ)        Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì
    helper k (Epsilon-P t)      Œì = helper k t Œì
    helper k (Gamma-P t t‚ÇÅ)     Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì
    helper k (Ev-P m t)         Œì = primMetaArgsAnd $ mapPrimMetaArgs (Œª x ‚Üí helper k x Œì) t
    helper k (Char-P c)         Œì = true
    helper k (CharEq-P t t‚ÇÅ)    Œì = helper k t Œì ‚àß helper k t‚ÇÅ Œì
