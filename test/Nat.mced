-- the definition of Nat is in Induction.mced
let one := [suc zero].
let two := [suc one].
b-let add (n : Nat) (m : Nat) : Nat := γ[inductionNat ?(λ _ : Nat Nat) n (λ _ : Nat λ rec : Nat [suc rec]) m].
b-let mul (n : Nat) (m : Nat) : Nat := γ[inductionNat ?(λ _ : Nat Nat) zero (λ _ : Nat λ rec : Nat [[add rec] n]) m].

let isZero := γ[inductionNat ?(λ _ : Nat Bool) true (λ _ : Nat λ _ : Bool false)] : Π _ : Nat Bool.

b-let natEq : Π _ : Nat Π _ : Nat Bool :=
  γ[inductionNat ?(λ _ : Nat Π _ : Nat Bool)
      isZero
      λ _ : Nat λ rec : Π _ : Nat Bool γ[inductionNat ?(λ _ : Nat Bool) false (λ n : Nat λ _ : Bool [rec n])]].