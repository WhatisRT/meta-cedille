-- the definition of Nat is in Induction.mced

let recNat [X : *] (x : X) (step : Nat -> X -> X) : Nat -> X :=
  recursionNat ?X x step.

let one := suc zero.
let two := suc one.
let three := suc two.
let four := suc three.
let five := suc four.
let six := suc five.
let seven := suc six.
let eight := suc seven.
let nine := suc eight.
let ten := suc nine.

let add (n, m : Nat) : Nat := recNat ?Nat n (λ _, rec : Nat. suc rec) m.
let mul (n, m : Nat) : Nat := recNat ?Nat zero (λ _, rec : Nat. add rec n) m.
let pred (n : Nat) : Nat := recNat ?Nat zero (λ n', _ : Nat. n') n.
let sub (n, m : Nat) : Nat := recNat ?Nat n (λ _, rec : Nat. pred rec) m.

let isZero : Nat -> Bool := recNat ?Bool true (λ _ : Nat. λ _ : Bool. false).

let natEq : Nat -> Nat -> Bool :=
  recNat ?(Nat -> Bool)
    isZero
    (λ _ : Nat. λ rec : Nat -> Bool. recNat ?Bool false (λ n : Nat. λ _ : Bool. rec n)).