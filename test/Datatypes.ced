module Datatypes.

data Bool : ★ =
| true : Bool
| false : Bool.

inductionBool : ∀ P : Bool ➔ ★. P true ➔ P false ➔ Π b : Bool. P b =
              Λ P. λ ptrue. λ pfalse. λ b. μ ind. b @P
              { true ➔ ptrue
              | false ➔ pfalse
              }.

data Nat : ★ =
| zero : Nat
| suc : Nat ➔ Nat.

inductionNat : ∀ P : Nat ➔ ★. P zero ➔ (Π n : Nat. P n ➔ P (suc n)) ➔ Π n : Nat. P n =
             Λ P. λ pzero. λ psuc. λ n. μ ind. n @P
             { zero ➔ pzero
             | suc n' ➔ psuc (to/Nat · Type/ind -isType/ind n') (ind n')
             }.

data List (A : ★) : ★ =
| nil : List
| cons : A ➔ List ➔ List.

inductionList :
              ∀ A : ★. ∀ P : List · A ➔ ★.
              P (nil · A) ➔ (Π a : A. Π x : List · A. P x ➔ P (cons a x)) ➔ Π x : List · A. P x =
              Λ A. Λ P. λ pnil. λ pcons. λ x. μ ind. x @P
              { nil ➔ pnil
              | cons a as' ➔ pcons a (to/List · A · Type/ind -isType/ind as') (ind as')
              }.

data DSum (A : ★) (B : A ➔ ★) : ★ =
| pair : Π a : A. B a ➔ DSum.

inductionDSum : ∀ A : ★. ∀ B : A ➔ ★. ∀ P : DSum · A · B ➔ ★.
              (Π a : A. Π b : B a. P (pair a b)) ➔ Π x : DSum · A · B. P x =
              Λ A. Λ B. Λ P. λ ppair. λ x. μ ind. x @P { pair a b ➔ ppair a b }.

data Sum (A : ★) (B : ★) : ★ =
| inl : A ➔ Sum
| inr : B ➔ Sum.

inductionSum : ∀ A : ★. ∀ B : ★. ∀ P : Sum · A · B ➔ ★.
             (Π a : A. P (inl a)) ➔ (Π b : B. P (inr b)) ➔ Π x : Sum · A · B. P x =
             Λ A. Λ B. Λ P. λ pinl. λ pinr. λ x. μ ind. x @P
             { inl a ➔ pinl a
             | inr b ➔ pinr b
             }.

data Sexp (Atom : ★) : ★ =
| Nil : Sexp
| ConsSexp : Sexp ➔ Bool ➔ Sexp ➔ Sexp
| ConsAtom : Atom ➔ Bool ➔ Sexp ➔ Sexp.

inductionSexp :
              ∀ Atom : ★. ∀ P : Sexp · Atom ➔ ★.
              P (Nil · Atom)
              ➔ (Π s : Sexp · Atom. Π b : Bool. Π s' : Sexp · Atom. P s ➔ P s' ➔ P (ConsSexp · Atom s b s'))
              ➔ (Π a : Atom. Π b : Bool. Π s : Sexp · Atom. P s ➔ P (ConsAtom · Atom a b s))
              ➔ Π sexp : Sexp · Atom. P sexp =
              Λ Atom. Λ P. λ pnil. λ pcsexp. λ pcatom. λ sexp. μ ind. sexp @P
              { Nil ➔ pnil
              | ConsSexp s b s' ➔
                pcsexp
                  (to/Sexp · Atom · Type/ind -isType/ind s)
                  b
                  (to/Sexp · Atom · Type/ind -isType/ind s')
                  (ind s)
                  (ind s')
              | ConsAtom a b s ➔ pcatom a b (to/Sexp · Atom · Type/ind -isType/ind s) (ind s)
              }.
