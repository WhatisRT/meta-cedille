b-let showListOfDigits [X : *] (showX : Π _ : X init$string) (l : [List X]) : init$string :=
  γ[concatStrings γ[map ?X ?init$string showX l]].

b-let incrementBinList (l : [List Bool]) : [List Bool] :=
  γ[inductionList ?Bool ?(λ _ : [List Bool] [List Bool])
    τ[Bool | true]
    λ b : Bool λ bs : [List Bool] λ rec : [List Bool]
      γ[ifthenelse ?[List Bool] b γ[cons ?Bool false rec] γ[cons ?Bool true bs]]
    l].

b-let natToBinList (n : Nat) : [List Bool] :=
  γ[inductionNat ?(λ _ : Nat [List Bool])
    τ[Bool | false]
    λ _ : Nat λ rec : [List Bool] [incrementBinList rec]
    n].

b-let showNatBinary (n : Nat) : init$string :=
  γ[showListOfDigits ?Bool (λ b : Bool γ[ifthenelse ?init$string b "1" "0"]) [natToBinList n]].