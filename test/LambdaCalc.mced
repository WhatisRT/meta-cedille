o-let Top := = λ x : * x λ x : * x.

let lambdaTermToTerm : Π _ : init$term. init$term := quote$beta (TermToInitTerm θ{λ x : *. x}).

let init$lambdaTerm$_string_ : Π _ : String. init$term := quote$var.
let init$lambdaTerm$=lsquare=^space'^_lambdaTerm_^space^_lambdaTerm_^space'^=rsquare=
  (t : init$term) (t' : init$term) : init$term := quote$square t t'.
let init$lambdaTerm$=lambda=^space^_string_^space'^=dot=^space'^_lambdaTerm_
  (name : String) (t : init$term) : init$term := quote$lambda name quote$ast t.

let init$lambdaStmt$let^space^_string_^space'^=colon==equal=^space'^_lambdaTerm_^space'^=dot=
  (name : String) (t : init$term) : init$newStmt :=
  stmtToNewStmt $ quote$annotatedLet' name (lambdaTermToTerm t) $ TermToInitTerm θ{Top}.

-- TODO: FIXME
-- let init$lambdaStmt$normalize^space^_lambdaTerm_^space'^=dot=
--   (_ : init$space) (t : init$term) (_ : init$space') : init$newStmt :=
--   seqEvalState ?init$term ?metaResult (normalize' (lambdaTermToTerm t)) emptyStmt.

let init$newStmt'$=lambda==minus=_lambdaStmt_ (x : init$newStmt) : init$newStmt := x.

o-seteval [evalNewStmt emptyEvaluatorState] init newStmt.