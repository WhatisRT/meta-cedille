b-let quoteId : init$term :=
  [[[quote$lambda [[quote$name quote$x] init$name'$]] quote$ast] [quote$var [[quote$name quote$x] init$name'$]]].
let quoteTop := [[quote$stringToVar quote$T] "op"] : init$term.

let lambdaTermToTerm := [quote$beta quoteId] : Π _ : init$term init$term.

let init$lambdaTerm :=
  ∀ X : * Π _ : (Π _ : init$name X) Π _ : (Π _ : X Π _ : X X) Π _ : (Π _ : init$name Π _ : X X) X : *.
let init$lambdaTerm$_name_ := quote$var : Π _ : init$name init$term.
b-let init$lambdaTerm$=lsquare=_space'__lambdaTerm__space__lambdaTerm__space'_=rsquare=
  (_ : init$space') (t : init$term) (_ : init$space) (t' : init$term) (_ : init$space') : init$term :=
  [[quote$square t] t'].
b-let init$lambdaTerm$=lambda=_space__name__space'_=dot=_space'__lambdaTerm_
  (_ : init$space) (name : init$name) (_ : init$space') (_ : init$space') (t : init$term) : init$term :=
  [[[quote$lambda name] quote$ast] t].

b-let init$lambdaStmt$let_space__name__space'_=colon==equal=_space'__lambdaTerm__space'_=dot=
  (_ : init$space) (name : init$name) (_ : init$space') (_ : init$space') (t : init$term) (_ : init$space') :
    init$stmt :=
  [[quote$simpleLet name] [lambdaTermToTerm t]].

b-let init$lambdaStmt$normalize_space__lambdaTerm__space'_=dot=
  (_ : init$space) (t : init$term) (_ : init$space') : init$stmt :=
  [quote$normalize [lambdaTermToTerm t]].

b-let init$stmt$=lambda==minus=_lambdaStmt_ (x : init$stmt) : init$stmt := x.

seteval eval init stmt.