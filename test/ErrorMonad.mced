--------------------------------------------------------------------------------
-- Error monad (with strings as error messages)
--------------------------------------------------------------------------------

-- This uses the elaborated let to have some more test cases

elet Error (A : *) : * := Sum String A.

elet pureError [A : *] (a : A) : Error A := inr ?String ?_ a.
elet error [A : *] (s : String) : Error A := inl ?_ ?A s.
elet catchError [A, B : *] (a : Error A) (f : String -> B) (g : A -> B) : B :=
  recursionSum ?_ ?_ ?_ f g a.

elet bindError [A, B : *] (f : A -> Error B) (x : Error A) : Error B :=
  recursionSum ?_ ?_ ?_ (λ s : String. error ?B s) (λ a : A. f a) x.

elet mapError [A, B : *] (f : A -> B) (x : Error A) : Error B :=
  bindError ?_ ?_ (λ a : A. pureError ?_ (f a)) x.
elet liftError2 [A, B, C : *] (f : A -> B -> C) (a : Error A) (b : Error B) : Error C :=
  bindError ?_ ?_ (λ a' : A. mapError ?_ ?_ (f a') b) a.

elet traverseErrorList [X, Y : *] (f : X -> Error Y) : List X -> Error (List Y) :=
  recursionList ?X ?_
    (pureError ?_ (nil ?Y))
    (λ x : X. λ xs : List X. λ rec : Error (List Y). liftError2 ?_ ?_ ?_ (cons ?Y) (f x) rec).
