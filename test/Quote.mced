let quote$noSpace := init$space'$ : init$space'.
let quote$singleSpace := [init$space$=space=_space'_ init$space'$] : init$space.

let quote$ast := [init$term$_sort_ init$sort$=ast=] : init$term.

let quote$name := init$name$_nameInitChar__name'_ : Π c : init$char Π cs : init$name' init$name.
let quote$ncons := init$name'$_nameTailChar__name'_ : Π c : init$char Π cs : init$name' init$name'.
let quote$nnil := init$name'$ : init$name'.
let quote$var := λ name : init$name [init$term$_var_ [init$var$_name_ name]] : Π _ : init$name init$term.

let quote$pi := [init$term$=pi=_space__term_ quote$singleSpace] : Π _ : init$term init$term.
let quote$psi := [init$term$=psi=_space__term_ quote$singleSpace] : Π _ : init$term init$term.

let quote$beta := λ t : init$term [[[init$term$=beta=_space__term__space__term_ quote$singleSpace] t] quote$singleSpace] : Π _ : init$term Π _ : init$term init$term.

let quote$lambda := λ name : init$name λ t : init$term λ t' : init$term [[[[[[[init$term$=lambda=_space__name__space'_=colon=_space'__term__space__term_ quote$singleSpace] name] quote$noSpace] quote$noSpace] t] quote$singleSpace] t'] : Π _ : init$name Π _ : init$term Π _ : init$term init$term.

let quote$Lambda := λ name : init$name λ t : init$term λ t' : init$term [[[[[[[init$term$=Lambda=_space__name__space'_=colon=_space'__term__space__term_ quote$singleSpace] name] quote$noSpace] quote$noSpace] t] quote$singleSpace] t'] : Π _ : init$name Π _ : init$term Π _ : init$term init$term.

let quote$forall := λ name : init$name λ t : init$term λ t' : init$term [[[[[[[init$term$=forall=_space__name__space'_=colon=_space'__term__space__term_ quote$singleSpace] name] quote$noSpace] quote$noSpace] t] quote$singleSpace] t'] : Π _ : init$name Π _ : init$term Π _ : init$term init$term.

let quote$Pi := λ name : init$name λ t : init$term λ t' : init$term [[[[[[[init$term$=Pi=_space__name__space'_=colon=_space'__term__space__term_ quote$singleSpace] name] quote$noSpace] quote$noSpace] t] quote$singleSpace] t'] : Π _ : init$name Π _ : init$term Π _ : init$term init$term.

let quote$square := λ t : init$term λ t' : init$term [[[[[init$term$=lsquare=_space'__term__space__term__space'_=rsquare= quote$noSpace] t] quote$singleSpace] t'] quote$noSpace] : Π _ : init$term Π _ : init$term init$term.

let quote$angle := λ t : init$term λ t' : init$term [[[[[init$term$=langle=_space'__term__space__term__space'_=rangle= quote$noSpace] t] quote$singleSpace] t'] quote$noSpace] : Π _ : init$term Π _ : init$term init$term.

let quote$simpleLet := λ n : init$name λ t : init$term [[init$stmt$_space'__stmt'_ quote$noSpace] [[[[[[[init$stmt'$let_space__name__space'_=colon==equal=_space'__term__space'__lettail_ quote$singleSpace] n] quote$noSpace] quote$noSpace] t] quote$noSpace] init$lettail$=dot=]] : Π _ : init$name Π _ : init$term init$stmt.

let quote$annotatedLet := λ n : init$name λ t : init$term λ t' : init$term [[init$stmt$_space'__stmt'_ quote$noSpace] [[[[[[[init$stmt'$let_space__name__space'_=colon==equal=_space'__term__space'__lettail_ quote$singleSpace] n] quote$noSpace] quote$noSpace] t] quote$noSpace] [[[init$lettail$=colon=_space'__term__space'_=dot= quote$noSpace] t'] quote$noSpace]]] : Π _ : init$name Π _ : init$term Π _ : init$term init$stmt.

let quote$normalize := λ t : init$term [[init$stmt$_space'__stmt'_ quote$noSpace] [[[init$stmt'$normalize_space__term__space'_=dot= quote$singleSpace] t] quote$noSpace]] : Π _ : init$term init$stmt.

let quote$A := init$nameInitChar$A.
let quote$B := init$nameInitChar$B.
let quote$C := init$nameInitChar$C.
let quote$D := init$nameInitChar$D.
let quote$E := init$nameInitChar$E.
let quote$F := init$nameInitChar$F.
let quote$G := init$nameInitChar$G.
let quote$H := init$nameInitChar$H.
let quote$I := init$nameInitChar$I.
let quote$J := init$nameInitChar$J.
let quote$K := init$nameInitChar$K.
let quote$L := init$nameInitChar$L.
let quote$M := init$nameInitChar$M.
let quote$N := init$nameInitChar$N.
let quote$O := init$nameInitChar$O.
let quote$P := init$nameInitChar$P.
let quote$Q := init$nameInitChar$Q.
let quote$R := init$nameInitChar$R.
let quote$S := init$nameInitChar$S.
let quote$T := init$nameInitChar$T.
let quote$U := init$nameInitChar$U.
let quote$V := init$nameInitChar$V.
let quote$W := init$nameInitChar$W.
let quote$X := init$nameInitChar$X.
let quote$Y := init$nameInitChar$Y.
let quote$Z := init$nameInitChar$Z.

let quote$a := init$nameInitChar$a.
let quote$b := init$nameInitChar$b.
let quote$c := init$nameInitChar$c.
let quote$d := init$nameInitChar$d.
let quote$e := init$nameInitChar$e.
let quote$f := init$nameInitChar$f.
let quote$g := init$nameInitChar$g.
let quote$h := init$nameInitChar$h.
let quote$i := init$nameInitChar$i.
let quote$j := init$nameInitChar$j.
let quote$k := init$nameInitChar$k.
let quote$l := init$nameInitChar$l.
let quote$m := init$nameInitChar$m.
let quote$n := init$nameInitChar$n.
let quote$o := init$nameInitChar$o.
let quote$p := init$nameInitChar$p.
let quote$q := init$nameInitChar$q.
let quote$r := init$nameInitChar$r.
let quote$s := init$nameInitChar$s.
let quote$t := init$nameInitChar$t.
let quote$u := init$nameInitChar$u.
let quote$v := init$nameInitChar$v.
let quote$w := init$nameInitChar$w.
let quote$x := init$nameInitChar$x.
let quote$y := init$nameInitChar$y.
let quote$z := init$nameInitChar$z.
