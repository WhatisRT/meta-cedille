let applyDownFrom [A : *] (f : Nat -> A) : Nat -> List A :=
  recursionNat ?(List A) [A|] (λ i : Nat. λ rec : List A. cons ?A (f i) rec).
let downFrom : Nat -> List Nat := applyDownFrom ?Nat (λ n : Nat. n).

let applyUpTo [A : *] (f : Nat -> A) (n : Nat) : List A :=
  reverse ?A (applyDownFrom ?A f n).
let upTo : Nat -> List Nat := applyUpTo ?Nat (λ n : Nat. n).

let zipWithIndex [A, B : *] (f : Nat -> A -> B) (l : List A) : List B :=
  zipWith ?Nat ?A ?B f (upTo (length ?A l)) l.

let collectMapMaybe [A, B : *] (f : A -> Maybe B) (l : List A) : List B :=
  foldl ?A ?(List B)
    (λ acc : List B. λ a : A. maybe ?B ?(List B) acc (λ b : B. cons ?B b acc) $ f a)
    l [B|].

let pairWithIndex : Telescope -> List (Nat × Param) := zipWithIndex ?Param ?(Nat × Param) (prodPair ?Nat ?Param).

let Variable := String × Nat.
let InferenceInfo := Variable × Term × Term × Maybe Term.

let inferenceInfoVariable : InferenceInfo -> Variable := pr1 ?Variable ?(Term × Term × Maybe Term).
let inferenceInfoName (i : InferenceInfo) : String := pr1 ?String ?Nat $ inferenceInfoVariable i.
let inferenceInfoTerm (i : InferenceInfo) : Term :=
  pr1 ?Term ?(Term × Maybe Term) $ pr2 ?Variable ?(Term × Term × Maybe Term) i.
let inferenceInfoType1 (i : InferenceInfo) : Term :=
  pr1 ?Term ?(Maybe Term) $ pr2 ?Term ?(Term × Maybe Term) $ pr2 ?Variable ?(Term × Term × Maybe Term) i.
let inferenceInfoType2 (i : InferenceInfo) : Maybe Term :=
  pr2 ?Term ?(Maybe Term) $ pr2 ?Term ?(Term × Maybe Term) $ pr2 ?Variable ?(Term × Term × Maybe Term) i.

let pairWithApp (tel : Telescope) : List (App × Maybe Term) -> List InferenceInfo :=
  zipWith ?(Nat × Param) ?(App × Maybe Term) ?InferenceInfo (λ p : Nat × Param. λ a : App × Maybe Term.
    prodPair ?Variable ?(Term × Term × Maybe Term)
      (prodPair ?String ?Nat (paramName $ pr2 ?Nat ?Param p) (pr1 ?Nat ?Param p)) $
      prodPair ?Term ?(Term × Maybe Term) (appTerm $ pr1 ?App ?(Maybe Term) a) $
        prodPair ?Term ?(Maybe Term) (paramType $ pr2 ?Nat ?Param p) (pr2 ?App ?(Maybe Term) a))
    (pairWithIndex tel).

let genInferenceInfo (T : Term) (app : List (App × Maybe Term)) : List InferenceInfo :=
  pairWithApp (pr1 ?Telescope ?Term $ telescopeFromType T) app.

let isUnknown (t : Term) : Bool :=
  t ?Bool
    (λ _ : init$var. false)
    (λ _ : init$sort. false)
    (λ _ : Binder. λ _ : String. λ _ : Bool. λ _ : Bool. false)
    (λ _ : Bool. λ _ : List (Bool × Bool). false)
    (λ _ : Char. false)
    true
    (λ _ : Bool. false).

let getHoleNames (l : List InferenceInfo) : List String :=
  map ?InferenceInfo ?String inferenceInfoName $
    filter ?InferenceInfo (λ i : InferenceInfo. isUnknown $ inferenceInfoTerm i) l.

let getHoleIndices (l : List InferenceInfo) : List Nat :=
  collectMapMaybe ?(Nat × InferenceInfo) ?Nat
    (λ x : Nat × InferenceInfo.
      ifthenelse ?(Maybe Nat) (isUnknown $ inferenceInfoTerm $ pr2 ?Nat ?InferenceInfo x)
        (just ?Nat $ pr1 ?Nat ?InferenceInfo x)
        (nothing ?Nat))
    (zipWithIndex ?InferenceInfo ?(Nat × InferenceInfo) (prodPair ?Nat ?InferenceInfo) l).

let sequenceRecApp (recapp : List (Bool × Eval Term)) : Eval (List App) :=
  sequenceEval ?App $
    map ?(Bool × Eval Term) ?(Eval App)
      (λ x : Bool × Eval Term.
        mapEval ?Term ?App (mkApp $ pr1 ?Bool ?(Eval Term) x) $ pr2 ?Bool ?(Eval Term) x)
    recapp.

-- apply f to all applications in a term
let applyToApp (f : Term -> List App -> Eval Term) : Term -> Eval Term :=
  recursionTerm ?(Eval Term)
    (λ v : init$var. pureEval ?Term $ varTerm v)
    (λ s : init$sort. pureEval ?Term $ sortTerm s)
    (λ b : Binder. λ n : String. λ _, _ : Term. λ recT, rect : Eval Term.
      bindEval ?Term ?Term recT (λ T : Term. inContext ?Term [String × Term| prodPair ?String ?Term n T] $
        bindEval ?Term ?Term rect (λ t : Term.
          pureEval ?Term $ binderTerm b n T t)))
    (λ _ : Term. λ _ : List App.
      λ rect : Eval Term. λ recapp : List (Bool × Eval Term).
        bindEval ?Term ?Term rect (λ t : Term.
          bindEval ?(List App) ?Term (sequenceRecApp recapp) (λ app : List App.
            f t app)))
    (λ c : init$char. pureEval ?Term $ charTerm c)
    (pureEval ?Term unknownTerm)
    (λ u : Term. λ _ : Eval Term. pureEval ?Term $ unquoteTerm u).

let showEquation (i : InferenceInfo) : String :=
  stringConcat [String|
    inferenceInfoName i, " := ", showTerm $ inferenceInfoTerm i, " : ",
    showTerm $ inferenceInfoType1 i, " = ", maybe ?Term ?String "_" showTerm $ inferenceInfoType2 i].

let inferTypeIfNotUnknown (t : Term) : Eval (Maybe Term) :=
  ifthenelse ?(Eval (Maybe Term)) (isUnknown t)
    (pureEval ?(Maybe Term) $ nothing ?Term)
    (mapEval ?Term ?(Maybe Term) (just ?Term) (inferType t)).

let inferAppTypes (app : List App) : Eval (List (App × Maybe Term)) :=
  sequenceEval ?(App × Maybe Term) $ map ?App ?(Eval (App × Maybe Term))
    (λ a : App. bindEval ?(Maybe Term) ?(App × Maybe Term) (inferTypeIfNotUnknown $ appTerm a) (λ T : Maybe Term.
      pureEval ?(App × Maybe Term) $ prodPair ?App ?(Maybe Term) a T))
    app.

let deriveEqnsHelper (n : Nat) (t1, t2 : Term) : Nat × Term × Term :=
  prodPair ?Nat ?(Term × Term) n $ prodPair ?Term ?Term t1 t2.

let deriveEqnsHelperInc : List (Nat × Term × Term) -> List (Nat × Term × Term) :=
  map ?(Nat × Term × Term) ?(Nat × Term × Term) (productMap1 ?Nat ?(Term × Term) ?Nat suc).

let deriveEqns : Term -> Term -> List (Nat × Term × Term) :=
  -- Note: we treat α-equivalent terms as equial
  recursionTermsDiag ?(List (Nat × Term × Term))
    (λ v1, v2 : init$var. varEq v1 v2 ?(List (Nat × Term × Term))
      [Nat × Term × Term|]
      [Nat × Term × Term| deriveEqnsHelper 0 (varTerm v1) (varTerm v2)])
    (λ s1, s2 : init$sort. sortEq s1 s2 ?(List (Nat × Term × Term))
      [Nat × Term × Term|]
      [Nat × Term × Term| deriveEqnsHelper 0 (sortTerm s1) (sortTerm s2)])
    (λ b1 : Binder. λ n1 : String. λ T1, t1 : Term. λ b2 : Binder. λ n2 : String. λ T2, t2 : Term.
     λ rec1, rec2 : List (Nat × Term × Term). binderEq b1 b2 ?(List (Nat × Term × Term))
      (app ?(Nat × Term × Term) rec1 (deriveEqnsHelperInc rec2))
      [Nat × Term × Term| deriveEqnsHelper 0 (binderTerm b1 n1 T1 t1) (binderTerm b2 n2 T2 t2)])
    (λ t1 : Term. λ app1 : List App. λ t2 : Term. λ app2 : List App.
     λ rect : List (Nat × Term × Term). λ recapp : List (List (Nat × Term × Term)).
     listEq ?(Bool × Term) (λ p1, p2 : Bool × Term. boolEq (pr1 ?Bool ?Term p1) (pr1 ?Bool ?Term p2))
        app1 app2 ?(List (Nat × Term × Term))
      (app ?(Nat × Term × Term) rect $ concat ?(Nat × Term × Term) recapp)
      [Nat × Term × Term| deriveEqnsHelper 0 (appLTerm t1 app1) (appLTerm t2 app2)])
    (λ c1, c2 : init$char. charEq c1 c2 ?(List (Nat × Term × Term))
      [Nat × Term × Term|]
      [Nat × Term × Term| deriveEqnsHelper 0 (charTerm c1) (charTerm c2)])
    [Nat × Term × Term|]
    (λ t1, t2 : Term. λ rec : List (Nat × Term × Term). rec)
    (λ t1, t2 : Term. [Nat × Term × Term| deriveEqnsHelper 0 t1 t2]).

let transformEqn (ctx : Nat) (eqn : Nat × Term × Term) : Maybe (Nat × Term) :=
  pr32 ?Nat ?Term ?Term eqn ?(Maybe (Nat × Term))
    (λ v : init$var. v ?(Maybe (Nat × Term))
      (λ _ : String. nothing ?(Nat × Term))
      (λ i : init$index. just ?(Nat × Term) $
        prodPair ?Nat ?Term (sub (add ctx $ pr31 ?Nat ?Term ?Term eqn) (suc $ indexToNat i))
          (strengthenBy (pr31 ?Nat ?Term ?Term eqn) $ pr33 ?Nat ?Term ?Term eqn)))
    (λ _ : init$sort. nothing ?(Nat × Term))
    (λ _ : Binder. λ _ : String. λ _, _ : Maybe (Nat × Term). nothing ?(Nat × Term))
    (λ _ : Maybe (Nat × Term). λ _ : List (Bool × (Maybe (Nat × Term))). nothing ?(Nat × Term))
    (λ _ : init$char. nothing ?(Nat × Term))
    (nothing ?(Nat × Term))
    (λ _ : Maybe (Nat × Term). nothing ?(Nat × Term)).

let allEqns (l : List InferenceInfo) : List (Nat × Term) :=
  concat ?(Nat × Term) $ zipWithIndex ?InferenceInfo ?(List (Nat × Term))
    (λ ctx : Nat. λ i : InferenceInfo. maybe ?Term ?(List (Nat × Term))
      [Nat × Term|]
      (λ T : Term. collectMapMaybe ?(Nat × Term × Term) ?(Nat × Term) (transformEqn ctx) $
                     deriveEqns (inferenceInfoType1 i) T) (inferenceInfoType2 i)) l.

let showSolution (s : Nat × Term) : String :=
  stringConcat [String| showNatDecimal $ pr1 ?Nat ?Term s, " = ", showTerm $ pr2 ?Nat ?Term s].

let solveApp (app : List App) (s : List (Nat × Term)) : List App :=
  zipWithIndex ?App ?App
    (λ i : Nat. λ a : App. ifthenelse ?App (isUnknown $ appTerm a)
      (foldl ?(Nat × Term) ?App
        (λ a : App. λ x : Nat × Term. ifthenelse ?App
          (and (isUnknown $ appTerm a) (natEq i (pr1 ?Nat ?Term x)))
            (mkApp (appErased a) (pr2 ?Nat ?Term x))
            a) s a) a) app.

let solveAppWithErr (f : Term) (app : List App) (s : List (Nat × Term)) : Eval Term :=
  (λ l : List App. ifthenelse ?(Eval Term)
    (isNil ?App (filter ?App (λ a : App. isUnknown $ appTerm a) l))
      (pureEval ?Term (appLTerm f l))
      (throwEval ?Term $ stringConcat [String|"Could not infer all holes in ", showTerm (appLTerm f l), "!", newline])) $ solveApp app s.

let debugPrintElabStep (l : List InferenceInfo) : Eval Unit :=
  ifthenelse ?(Eval Unit) (isNil ?InferenceInfo l) (pureEval ?Unit tt) $
  seqEval ?Unit ?Unit
    (printLineEval $ showList ?InferenceInfo showEquation l)
    (printLineEval $ showList ?(Nat × Term) showSolution $ allEqns l).

let elabLocally (doDebugPrinting : Bool) (f : Term) (app : List App) : Eval Term :=
  bindEval ?Term ?Term (catchEval ?Term (inferType f) (λ _ : metaResult.
    throwEval ?Term $ stringConcat
      [String|"Elaboration failure: Failed to infer the type of ", showTerm f, "!", newline]))
    (λ T : Term.
      bindEval ?(List (App × Maybe Term)) ?Term (inferAppTypes app) (λ app' : List (App × Maybe Term).
        seqEval ?Unit ?Term
          (ifthenelse ?(Eval Unit) doDebugPrinting
            (debugPrintElabStep $ genInferenceInfo T app')
            (pureEval ?Unit tt)) $
          solveAppWithErr f app $ allEqns $ genInferenceInfo T app')).

let elabLocalInference (doDebugPrinting : Bool) (t : Term) : Eval Term :=
  seqEval ?Unit ?Term
    (ifthenelse ?(Eval Unit) doDebugPrinting
      (printLineEval $ stringConcat [String|newline, "Elaborating ", showTerm t])
      (pureEval ?Unit tt))
    (applyToApp (elabLocally doDebugPrinting) t).

let elabLetInfo (doDebugPrinting : Bool) (i : LetInfo) : Eval LetInfo :=
  bindEval ?Term ?LetInfo (elabLocalInference doDebugPrinting $ letInfoTerm i) (λ t : Term.
    mapEval ?(Maybe Term) ?LetInfo
      (mkLetInfo (letInfoName i) t)
      (maybe ?Term ?(Eval (Maybe Term)) (pureEval ?(Maybe Term) $ nothing ?Term)
        (λ T : Term. mapEval ?Term ?(Maybe Term) (just ?Term) $ elabLocalInference doDebugPrinting T)
        (letInfoType i))).

-- let that uses this elaborator
-- this will be added to the regular let, once it works a little better
let init$newStmt'$elet^space^_betterLet_ (i : LetInfo) : init$newStmt :=
  runEvalLets [ElabLet| checkTypeAnn, moduleElab, elabLetInfo false] i.

updateEval.

-- Issues:
--
-- inference doesn't interact nicely with $ or applications that use parentheses like (f a) b
-- The fix is to look for those kinds of applications and simplify them before running inference
--
-- there's no reduction

elet inferenceTest1 := λ x : Nat × Term. pr1 ?_ ?_ x.
--elet inferenceTest1' := λ x : Nat × Term. pr1 ?_ ?_ $ x.
--elet inferenceTest1'' := λ x : Nat × Term. (pr1 ?_ ?_) x.

elet inferenceTest2 (t : Term) : init$newStmt :=
  bindEval ?_ ?metaResult (elabLocalInference false t) (λ t' : Term.
    seqNewStmt (echoStmt $ showTerm t') emptyStmt).

elet inferenceTest3 (i : LetInfo) : init$newStmt :=
  bindEval ?_ ?_ (elabLocalInference false $ letInfoTerm i) (λ t : Term. pureEval ?_ emptyMetaResult).

elet inferenceTest4 [A, B : *] (f : Nat -> A -> B) (l : List A) : List B :=
  zipWith ?_ ?_ ?_ f (upTo (length ?_ l)) l.

elet inferenceTest5 [A, B : *] (f : A -> Maybe B) (l : List A) : List B :=
  foldl ?_ ?_ (λ acc : List B. λ a : A. maybe ?_ ?_ acc (λ b : B. cons ?_ b acc) (f a)) l [B|].
