data TestUnit where
| ttTest : TestUnit.

data TestNat where
| zeroTest : TestNat
| succTest : Π _ : TestNat. TestNat.

let TestNatRec (X : *) (recZero : X) (recSucc : Π _ : X. Π _ : TestNat. X) (n : TestNat) : X :=
  pr1 ?X ?TestNat (TestNatFold (Product X TestNat)
    (prodPair ?X ?TestNat recZero zeroTest)
    (λ x : Product X TestNat. prodPair ?X ?TestNat (recSucc (pr1 ?X ?TestNat x) (pr2 ?X ?TestNat x)) (succTest (pr2 ?X ?TestNat x)))
    n).

let plus (n, m : TestNat) : TestNat := TestNatRec TestNat m (λ _, rec : TestNat. succTest rec) n.

data TestList (A : *) where
| nilTest : TestList A
| consTest : Π _ : A. Π _ : TestList A. TestList A.

data TestDSum (A : *) (B : Π _ : A. *) where
| pairTest : Π a : A. Π _ : B a. TestDSum A B.

let Eq (A : *) (a, a' : A) : * := Π P : Π _ : A. *. Π _ : P a. P a'.
let refl (A : *) (a : A) : Eq A a a := λ P : Π _ : A. *. λ h : P a. h.
let sym (A : *) (a, a' : A) (eq : Eq A a a') : Eq A a' a := λ P : Π _ : A. *. eq (λ x : A. Π _ : P x. P a) (λ h : P a. h).
let trans (A : *) (a, a', a'' : A) (eq : Eq A a a') (eq' : Eq A a' a'') : Eq A a a'' := λ P : Π _ : A. *. λ h : P a. eq' P (eq P h).

let zeroPlus (n : TestNat) : Eq TestNat (plus zeroTest n) n := refl TestNat n.

record Category (obj : *) (hom : Π _, _ : obj. *) where
| identity      : Π a : obj. hom a a
| composition   : Π a, b, c : obj. Π _ : hom b c. Π _ : hom a b. hom a c
| leftIdentity  : Π a, b : obj. Π f : hom a b. Eq (hom a b) (composition a b b (identity b) f) f
| rightIdentity : Π a, b : obj. Π f : hom a b. Eq (hom a b) (composition a a b f (identity a)) f
| associativity : Π a, b, c, d : obj. Π f : hom a b. Π g : hom b c. Π h : hom c d.
                 Eq (hom a d) (composition a b d (composition b c d h g) f) (composition a c d h (composition a b c g f)).

let identity (obj : *) (hom : Π _, _ : obj. *) (C : Category obj hom) : Π a : obj. hom a a :=
  CategoryFold obj hom (Π a : obj. hom a a)
    (λ identity      : Π a : obj. hom a a.
    λ composition   : Π a, b, c : obj. Π _ : hom b c. Π _ : hom a b. hom a c.
    λ leftIdentity  : Π a, b : obj. Π f : hom a b. Eq (hom a b) (composition a b b (identity b) f) f.
    λ rightIdentity : Π a, b : obj. Π f : hom a b. Eq (hom a b) (composition a a b f (identity a)) f.
    λ associativity : Π a, b, c, d : obj. Π f : hom a b. Π g : hom b c. Π h : hom c d.
                     Eq (hom a d) (composition a b d (composition b c d h g) f) (composition a c d h (composition a b c g f)).
      identity) C.

let composition (obj : *) (hom : Π _, _ : obj. *) (C : Category obj hom) : Π a, b, c : obj. Π _ : hom b c. Π _ : hom a b. hom a c :=
  CategoryFold obj hom (Π a, b, c : obj. Π _ : hom b c. Π _ : hom a b. hom a c)
    (λ identity      : Π a : obj. hom a a.
    λ composition   : Π a, b, c : obj. Π _ : hom b c. Π _ : hom a b. hom a c.
    λ leftIdentity  : Π a, b : obj. Π f : hom a b. Eq (hom a b) (composition a b b (identity b) f) f.
    λ rightIdentity : Π a, b : obj. Π f : hom a b. Eq (hom a b) (composition a a b f (identity a)) f.
    λ associativity : Π a, b, c, d : obj. Π f : hom a b. Π g : hom b c. Π h : hom c d.
                     Eq (hom a d) (composition a b d (composition b c d h g) f) (composition a c d h (composition a b c g f)).
      composition) C.

record Iso (obj : *) (hom : Π _, _ : obj. *) (C : Category obj hom) (a, b : obj) where
| f : hom a b
| inv : hom b a
| lInv : Eq (hom a a) (composition obj hom C a b a inv f) (identity obj hom C a)
| rInv : Eq (hom b b) (composition obj hom C b a b f inv) (identity obj hom C b).