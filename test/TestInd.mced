
let Top := = λ x : * x λ x : * x : *.
let Cast := λ A : * λ B : * (ι cast : Π _ : A B = cast λ x : * x) : Π _ : * Π B : * *.
let cast := Λ A : * Λ B : * Λ c : [[Cast A] B] φ ψ c π c λ x : * x.
let RecFunctor := λ F : Π _ : * * ∀ X : * ∀ Y : * ∀ _ : [[Cast X] Y] [[Cast [F X]] [F Y]] : Π _ : Π _ : * * *.
let Rec := λ F : Π _ : * * ∀ X : * ∀ _ : [[Cast [F X]] X] X : Π _ : Π _ : * * *.
let recCast := Λ F : Π _ : * * Λ X : * Λ c : [[Cast [F X]] X] { λ a : [Rec F] <<a X> c> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast' . = cast' λ x : * x }.
let recIn := Λ F : Π _ : * * Λ fmap : [RecFunctor F] { λ a : [F [Rec F]] Λ X : * Λ c : [[Cast [F X]] X] [<<<cast [F X]> X> c> [<<<cast [F [Rec F]]> [F X]> <<<fmap [Rec F]> X> <<<recCast F> X> c>>> a]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * [cast [cast a]] x-x β (λ a : * [cast [cast a]]) λ x-x : * x-x cast' . = cast' λ x : * x }.
let recOut := Λ F : Π _ : * * Λ fmap : [RecFunctor F] { λ a : [Rec F] <<a [F [Rec F]]> <<<fmap [F [Rec F]]> [Rec F]> <<recIn F> fmap>>> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast' . = cast' λ x : * x }.
let FixMF := λ F : Π _ : * * λ fm : [RecFunctor F] λ FixM : * (ι x : Top ∀ X : Π _ : Top * Π _ : (ι alg : Top ∀ R : * ∀ _ : [[Cast R] FixM] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d : * [d alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d : * [d alg'])] x']]) [X x]) : Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[Cast X] Y] [[Cast [F X]] [F Y]] Π FixM : * *.
let FixM := λ F : Π _ : * * λ fm : [RecFunctor F] [Rec [[FixMF F] fm]] : Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[Cast X] Y] [[Cast [F X]] [F Y]] *.

let FixFmap := Λ F : Π _ : * * Λ fm : [RecFunctor F] Λ D : * Λ D' : * Λ c : [[Cast D] D'] { λ d : [[[FixMF F] fm] D] { π d , Λ X : Π _ : Top * λ alg : (ι alg : Top ∀ R : * ∀ _ : [[Cast R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [<ψ d X> { π alg , Λ R : * Λ reveal : [[Cast R] D] <<ψ alg R> { λ r : R [<<<cast D> D'> c> [<<<cast R> D> reveal> r]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ r : * [cast [cast r]] x-x β (λ r : * [cast [cast r]]) λ x-x : * x-x cast' . = cast' λ x : * x }> alg' . ∀ R : * ∀ _ : [[Cast R] D] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [X β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] x . ∀ X : Π _ : Top * Π _ : (ι alg : Top ∀ R : * ∀ _ : [[Cast R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d : * d x-x β (λ d : * d) λ x-x : * x-x cast' . = cast' λ x : * x }.

let inFixM := Λ F : Π _ : * * Λ fm : [RecFunctor F] <<<cast [[[FixMF F] fm] [[FixM F] fm]]> [[FixM F] fm]> <<recIn [[FixMF F] fm]> <<FixFmap F> fm>>>.
let outFixM := Λ F : Π _ : * * Λ fm : [RecFunctor F] <<<cast [[FixM F] fm]> [[[FixMF F] fm] [[FixM F] fm]]> <<recOut [[FixMF F] fm]> <<FixFmap F> fm>>>.
let inFix := Λ F : Π _ : * * Λ fm : [RecFunctor F] λ d : [F [[FixM F] fm]] [<<inFixM F> fm> { β (λ x : * x) λ alg : * [[alg (λ d' : * [d' alg])] d] , Λ X : Π _ : Top * λ alg : (ι alg : Top ∀ R : * ∀ _ : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [[<<<ψ alg [[FixM F] fm]> { λ d' : [[FixM F] fm] d' , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d' : * d' x-x β (λ d' : * d') λ x-x : * x-x cast' . = cast' λ x : * x }> { λ d' : [[FixM F] fm] [<ψ [<<outFixM F> fm> d'] (λ x : Top [F [[FixM F] fm]])> { β (λ x : * x) λ e : * λ d'' : * d'' , Λ X' : * Λ reveal : [[Cast X'] [[FixM F] fm]] Λ p : (ι o : Π _ : X' [F X'] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) λ e : (ι ih : Π r : X' [(λ x : Top [F [[FixM F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' (λ e : * λ d''' : * d''')]) <<<cast [F X']> [F [[FixM F] fm]]> <<<fm X'> [[FixM F] fm]> reveal>> alg' . ∀ R : * ∀ _ : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) Π _ : (ι ih : Π r : R [(λ x : Top [F [[FixM F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' alg']) Π x' : [F R] [(λ x : Top [F [[FixM F] fm]]) β (λ x : * x) λ alg'' : * [[alg'' (λ d'' : * [d'' alg''])] x']] }] , β (λ d' : * [[outFixM d'] (λ e : * λ d'' : * d'')]) λ d' : * [d' (λ e : * λ d'' : * d'')] o . = o λ d' : * [d' (λ p : * λ d'' : * d'')] }> { λ d' : [[FixM F] fm] [<ψ [<<outFixM F> fm> d'] X> alg] , β (λ d' : * [[outFixM d'] alg]) λ d' : * [d' alg] ih . = ih λ d' : * [d' alg] }] d] x . ∀ X : Π _ : Top * Π _ : (ι alg : Top ∀ R : * ∀ _ : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] }].
let outFix := Λ F : Π _ : * * Λ fm : [RecFunctor F] λ x : [[FixM F] fm] [<ψ [<<outFixM F> fm> x] (λ x' : Top [F [[FixM F] fm]])> { β (λ x' : * x') λ e : * λ d : * d , Λ R : * Λ c : [[Cast R] [[FixM F] fm]] Λ p : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) λ e : (ι ih : Π r : R [(λ x' : Top [F [[FixM F] fm]]) β (λ x' : * x') r] = ih λ d : * [d (λ e : * λ d' : * d')]) <<<cast [F R]> [F [[FixM F] fm]]> <<<fm R> [[FixM F] fm]> c>> alg . ∀ R : * ∀ _ : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [(λ x' : Top [F [[FixM F] fm]]) β (λ x' : * x') r] = ih λ d : * [d alg]) Π x'' : [F R] [(λ x' : Top [F [[FixM F] fm]]) β (λ x' : * x') λ alg' : * [[alg' (λ d : * [d alg'])] x'']] }].
let IndFixM' := Λ F : Π _ : * * Λ fm : [RecFunctor F] λ d : [[FixM F] fm] Λ Q : Π _ : [[FixM F] fm] * λ alg : (ι alg : Top ∀ R : * ∀ reveal : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix) Π _ : (ι ih : Π r : R [Q [<<<cast R> [[FixM F] fm]> reveal> r]] = ih λ d' : * [d' alg]) Π x : [F R] [Q [<<inFix F> fm> [<<<cast [F R]> [F [[FixM F] fm]]> <<<fm R> [[FixM F] fm]> reveal>> x]]]) <<[<ψ [<<outFixM F> fm> d] (λ d' : Top ∀ d'' : [[FixM F] fm] ∀ e : = d'' d' [Q φ e d'' d'])> { β (λ x : * x) alg , Λ R : * Λ reveal : [[Cast R] [[FixM F] fm]] Λ out : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) λ ih : (ι ih : Π r : R [(λ d' : Top ∀ d'' : [[FixM F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg]) λ d' : [F R] Λ d'' : [[FixM F] fm] Λ e : = d'' λ alg'' : * [[alg'' (λ d''' : * [d''' alg''])] d'] [[<<<ψ alg R> reveal> out> { λ r : R <<[π ih r] [<<<cast R> [[FixM F] fm]> reveal> r]> ρ β r λ x-x : * x-x x-x . = [cast r] x-x β [cast r] λ x-x : * x-x> , ψ ih ih' . = ih' λ d''' : * [d''' alg] }] d'] alg' . ∀ R : * ∀ _ : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [(λ d' : Top ∀ d'' : [[FixM F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [(λ d' : Top ∀ d'' : [[FixM F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] d> ρ β [outFixM d] λ x-x : * x-x x-x . = d x-x β d λ x-x : * x-x>.
let IndFixM := Λ F : Π _ : * * Λ fm : [RecFunctor F] λ d : [[FixM F] fm] Λ Q : Π _ : [[FixM F] fm] * λ alg : ∀ R : * ∀ reveal : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix) Π _ : Π r : R [Q [<<<cast R> [[FixM F] fm]> reveal> r]] Π x : [F R] [Q [<<inFix F> fm> [<<<cast [F R]> [F [[FixM F] fm]]> <<<fm R> [[FixM F] fm]> reveal>> x]]] [<[<<IndFixM' F> fm> d] Q> { β (λ x : * x) alg , Λ R : * Λ rvl : [[Cast R] [[FixM F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix) λ ih : (ι ih : Π r : R [Q [<<<cast R> [[FixM F] fm]> rvl> r]] = ih λ d'' : * [d'' alg]) [<<<alg R> rvl> out> π ih] alg' . ∀ R : * ∀ reveal : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix) Π _ : (ι ih : Π r : R [Q [<<<cast R> [[FixM F] fm]> reveal> r]] = ih λ d'' : * [d'' alg']) Π x : [F R] [Q [<<inFix F> fm> [<<<cast [F R]> [F [[FixM F] fm]]> <<<fm R> [[FixM F] fm]> reveal>> x]]] }].
let lambek := Λ F : Π _ : * * Λ fm : [RecFunctor F] λ d : [[FixM F] fm] [<[<<IndFixM F> fm> d] (λ d' : [[FixM F] fm] = [inFix [outFix d']] d')> (Λ R : * Λ rvl : [[Cast R] [[FixM F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix) λ ih : Π r : R = [inFix [outFix [cast r]]] [cast r] λ d' : [F R] ρ β [inFix [cast d']] λ x-x : * x-x x-x . = [inFix [outFix [inFix [cast d']]]] x-x β [inFix [outFix [inFix [cast d']]]] λ x-x : * x-x)].
let NatF := λ Nat : * (ι x : = λ x : * x λ x : * x ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ zero : * λ suc : * zero] Π _ : Π x' : Nat [X β (λ x'' : * x'') λ zero : * λ suc : * [suc x']] [X x]) : Π _ : * *.
let NatIndF := Λ Nat : * λ x : [NatF Nat] Λ X : Π _ : [NatF Nat] * λ zero : [X { β (λ x' : * x') λ zero : * λ suc : * zero , Λ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ zero : [X' β (λ x'' : * x'') λ zero : * λ suc : * zero] λ suc : Π x'' : Nat [X' β (λ x''' : * x''') λ zero' : * λ suc : * [suc x'']] zero x' . ∀ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X' β (λ x'' : * x'') λ zero : * λ suc : * zero] Π _ : Π x'' : Nat [X' β (λ x''' : * x''') λ zero : * λ suc : * [suc x'']] [X' x'] }] λ suc : Π x' : Nat [X { β (λ x'' : * x'') λ zero' : * λ suc : * [suc x'] , Λ X' : Π _ : = λ x''' : * x''' λ x''' : * x''' * λ zero' : [X' β (λ x''' : * x''') λ zero' : * λ suc : * zero'] λ suc : Π x''' : Nat [X' β (λ x'''' : * x'''') λ zero'' : * λ suc : * [suc x''']] [suc x'] x'' . ∀ X' : Π _ : = λ x''' : * x''' λ x''' : * x''' * Π _ : [X' β (λ x''' : * x''') λ zero' : * λ suc : * zero'] Π _ : Π x''' : Nat [X' β (λ x'''' : * x'''') λ zero' : * λ suc : * [suc x''']] [X' x''] }] <<[[<ψ x (λ x' : = λ x' : * x' λ x' : * x' ∀ y : [NatF Nat] ∀ e : = y x' [X φ e y x'])> (Λ y : [NatF Nat] Λ e : = y λ zero' : * λ suc' : * zero' zero)] (λ x' : Nat Λ y : [NatF Nat] Λ e : = y λ zero' : * λ suc' : * [suc' x'] [suc x'])] x> ρ β x λ x-x : * x-x x-x . = x x-x β x λ x-x : * x-x>.
let NatFmap := Λ A : * Λ B : * Λ c : [[Cast A] B] { λ x : [NatF A] { π x , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ zero : [X β (λ x'' : * x'') λ zero : * λ suc : * zero] λ suc : Π x'' : B [X β (λ x''' : * x''') λ zero' : * λ suc : * [suc x'']] [[<ψ x X> zero] (λ x' : A [suc [<<<cast A> B> c> x']])] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X β (λ x'' : * x'') λ zero : * λ suc : * zero] Π _ : Π x'' : B [X β (λ x''' : * x''') λ zero : * λ suc : * [suc x'']] [X x'] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ x : * x x-x β (λ x : * x) λ x-x : * x-x cast' . = cast' λ x : * x }.
let Nat := [[FixM NatF] NatFmap] : *.
let Is-Nat := λ X : * ∀ Y : * Π _ : Π _ : (ι i : Π _ : X Nat = i λ x : * x) Π _ : (ι i : Π _ : X [NatF X] = i outFix) Y Y : Π _ : * *.
let is-Nat := Λ Y : * λ f : Π _ : (ι i : Π _ : Nat Nat = i λ x : * x) Π _ : (ι i : Π _ : Nat [NatF Nat] = i outFix) Y [[f { λ x : Nat x , β (λ x : * x) λ x : * x i . = i λ x : * x }] { <<outFix NatF> NatFmap> , β outFix outFix i . = i outFix }].
let to-Nat := Λ Y : * Λ mu : [Is-Nat Y] φ ψ [<mu (ι i : Π _ : Y Nat = i λ x : * x)> (λ c : (ι i : Π _ : Y Nat = i λ x : * x) λ o : (ι i : Π _ : Y [NatF Y] = i outFix) c)] π [<mu (ι i : Π _ : Y Nat = i λ x : * x)> (λ c : (ι i : Π _ : Y Nat = i λ x : * x) λ o : (ι i : Π _ : Y [NatF Y] = i outFix) c)] λ x : * x.
let zero := [<<inFix NatF> NatFmap> { β (λ x : * x) λ zero : * λ suc : * zero , Λ X : Π _ : = λ x' : * x' λ x' : * x' * λ zero : [X β (λ x' : * x') λ zero : * λ suc : * zero] λ suc : Π x' : [[FixM NatF] NatFmap] [X β (λ x'' : * x'') λ zero' : * λ suc : * [suc x']] zero x . ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ zero : * λ suc : * zero] Π _ : Π x' : [[FixM NatF] NatFmap] [X β (λ x'' : * x'') λ zero : * λ suc : * [suc x']] [X x] }].
let suc := λ x : Nat [<<inFix NatF> NatFmap> { β (λ x' : * x') λ zero' : * λ suc : * [suc x] , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ zero' : [X β (λ x'' : * x'') λ zero' : * λ suc : * zero'] λ suc : Π x'' : [[FixM NatF] NatFmap] [X β (λ x''' : * x''') λ zero'' : * λ suc : * [suc x'']] [suc x] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X β (λ x'' : * x'') λ zero' : * λ suc : * zero'] Π _ : Π x'' : [[FixM NatF] NatFmap] [X β (λ x''' : * x''') λ zero' : * λ suc : * [suc x'']] [X x'] }].
let Top' := λ A : * = λ x : * x λ x : * x : Π _ : * *.
let Cast' := λ A : * λ A' : Π x : Nat * λ B : Π x : Nat * (ι cast' : ∀ x : Nat Π _ : [A' x] [B x] = cast' λ x : * x) : Π _ : * Π A' : Π _ : Nat * Π B : Π _ : Nat * *.
let cast' := Λ A : * Λ A' : Π _ : Nat * Λ B : Π _ : Nat * Λ c : [[[Cast' A] A'] B] φ ψ c π c λ x : * x.
let RecFunctor' := λ A : * λ F : Π _ : Π x : Nat * Π x : Nat * ∀ X : Π x : Nat * ∀ Y : Π x : Nat * ∀ _ : [[[Cast' A] X] Y] [[[Cast' A] [F X]] [F Y]] : Π _ : * Π F : Π _ : Π x : Nat * Π x : Nat * *.
let Rec' := λ A : * λ F : Π _ : Π x : Nat * Π x : Nat * λ x : Nat ∀ X : Π x' : Nat * ∀ _ : [[[Cast' A] [F X]] X] [X x] : Π _ : * Π F : Π _ : Π x : Nat * Π x : Nat * Π x : Nat *.
let recCast' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ X : Π _ : Nat * Λ c : [[[Cast' A] [F X]] X] { Λ x : Nat λ a : [[[Rec' A] F] x] <<a X> c> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast'' . = cast'' λ x : * x }.
let recIn' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ fmap : [[RecFunctor' A] F] { Λ x : Nat λ a : [[F [[Rec' A] F]] x] Λ X : Π _ : Nat * Λ c : [[[Cast' A] [F X]] X] [<<<<<cast' A> [F X]> X> c> x> [<<<<<cast' A> [F [[Rec' A] F]]> [F X]> <<<fmap [[Rec' A] F]> X> <<<<recCast' A> F> X> c>>> x> a]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * [cast' [cast' a]] x-x β (λ a : * [cast' [cast' a]]) λ x-x : * x-x cast'' . = cast'' λ x : * x }.
let recOut' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ fmap : [[RecFunctor' A] F] { Λ x : Nat λ a : [[[Rec' A] F] x] <<a [F [[Rec' A] F]]> <<<fmap [F [[Rec' A] F]]> [[Rec' A] F]> <<<recIn' A> F> fmap>>> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast'' . = cast'' λ x : * x }.
let FixMF' := λ A : * λ F : Π _ : Π x : Nat * Π x : Nat * λ fm : [[RecFunctor' A] F] λ FixM' : Π x : Nat * λ x : Nat (ι x' : [Top' A] ∀ X : Π _ : [Top' A] Π x'' : Nat * Π _ : (ι alg : [Top' A] ∀ R : Π x'' : Nat * ∀ _ : [[[Cast' A] R] FixM'] ∀ _ : (ι o : ∀ x'' : Nat Π _ : [R x''] [[F R] x''] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : ∀ x'' : Nat Π r : [R x''] [[X β (λ x''' : * x''') r] x''] = ih λ d : * [d alg]) ∀ x'' : Nat Π x''' : [[F R] x''] [[X β (λ x'''' : * x'''') λ alg' : * [[alg' (λ d : * [d alg'])] x''']] x'']) [[X x'] x]) : Π A : * Π F : Π _ : Π x : Nat * Π x : Nat * Π fm : ∀ X : Π _ : Nat * ∀ Y : Π _ : Nat * ∀ _ : [[[Cast' A] X] Y] [[[Cast' A] [F X]] [F Y]] Π FixM' : Π _ : Nat * Π x : Nat *.
let FixM' := λ A : * λ F : Π _ : Π x : Nat * Π x : Nat * λ fm : [[RecFunctor' A] F] [[Rec' A] [[[FixMF' A] F] fm]] : Π A : * Π F : Π _ : Π x : Nat * Π x : Nat * Π fm : ∀ X : Π _ : Nat * ∀ Y : Π _ : Nat * ∀ _ : [[[Cast' A] X] Y] [[[Cast' A] [F X]] [F Y]] Π x : Nat *.
let FixFmap' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ fm : [[RecFunctor' A] F] Λ D : Π _ : Nat * Λ D' : Π _ : Nat * Λ c : [[[Cast' A] D] D'] { Λ x : Nat λ d : [[[[[FixMF' A] F] fm] D] x] { π d , Λ X : Π _ : [Top' A] Π x''' : Nat * λ alg : (ι alg : [Top' A] ∀ R : Π x''' : Nat * ∀ _ : [[[Cast' A] R] D'] ∀ _ : (ι o : ∀ x''' : Nat Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : Nat Π r : [R x'''] [[X β (λ x' : * x') r] x'''] = ih λ d' : * [d' alg]) ∀ x''' : Nat Π x'''' : [[F R] x'''] [[X β (λ x' : * x') λ alg' : * [[alg' (λ d' : * [d' alg'])] x'''']] x''']) [<ψ d X> { π alg , Λ R : Π x''' : Nat * Λ reveal : [[[Cast' A] R] D] <<ψ alg R> { Λ x' : Nat λ r : [R x'] [<<<<<cast' A> D> D'> c> x'> [<<<<<cast' A> R> D> reveal> x'> r]] , ρ β (λ x' : * x') λ x-x : * x-x x-x . = λ r : * [cast' [cast' r]] x-x β (λ r : * [cast' [cast' r]]) λ x-x : * x-x cast'' . = cast'' λ x' : * x' }> alg' . ∀ R : Π x''' : Nat * ∀ _ : [[[Cast' A] R] D] ∀ _ : (ι o : ∀ x''' : Nat Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : Nat Π r : [R x'''] [[X β (λ x' : * x') r] x'''] = ih λ d' : * [d' alg']) ∀ x''' : Nat Π x'''' : [[F R] x'''] [[X β (λ x' : * x') λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x'''']] x'''] }] x'' . ∀ X : Π _ : [Top' A] Π x''' : Nat * Π _ : (ι alg : [Top' A] ∀ R : Π x''' : Nat * ∀ _ : [[[Cast' A] R] D'] ∀ _ : (ι o : ∀ x''' : Nat Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : Nat Π r : [R x'''] [[X β (λ x'''' : * x'''') r] x'''] = ih λ d' : * [d' alg]) ∀ x''' : Nat Π x'''' : [[F R] x'''] [[X β (λ x''''' : * x''''') λ alg' : * [[alg' (λ d' : * [d' alg'])] x'''']] x''']) [[X x''] x] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d : * d x-x β (λ d : * d) λ x-x : * x-x cast'' . = cast'' λ x : * x }.
let inFixM' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ fm : [[RecFunctor' A] F] <<<<cast' A> [[[[FixMF' A] F] fm] [[[FixM' A] F] fm]]> [[[FixM' A] F] fm]> <<<recIn' A> [[[FixMF' A] F] fm]> <<<FixFmap' A> F> fm>>>.
let outFixM' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ fm : [[RecFunctor' A] F] <<<<cast' A> [[[FixM' A] F] fm]> [[[[FixMF' A] F] fm] [[[FixM' A] F] fm]]> <<<recOut' A> [[[FixMF' A] F] fm]> <<<FixFmap' A> F> fm>>>.
let inFix' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ fm : [[RecFunctor' A] F] Λ x : Nat λ d : [[F [[[FixM' A] F] fm]] x] [<<<<inFixM' A> F> fm> x> { β (λ x' : * x') λ alg : * [[alg (λ d' : * [d' alg])] d] , Λ X : Π _ : [Top' A] Π x''' : Nat * λ alg : (ι alg : [Top' A] ∀ R : Π x''' : Nat * ∀ _ : [[[Cast' A] R] [[[FixM' A] F] fm]] ∀ _ : (ι o : ∀ x''' : Nat Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : Nat Π r : [R x'''] [[X β (λ x' : * x') r] x'''] = ih λ d' : * [d' alg]) ∀ x''' : Nat Π x'''' : [[F R] x'''] [[X β (λ x' : * x') λ alg' : * [[alg' (λ d' : * [d' alg'])] x'''']] x''']) [<[<<<ψ alg [[[FixM' A] F] fm]> { Λ x' : Nat λ d' : [[[[FixM' A] F] fm] x'] d' , ρ β (λ x' : * x') λ x-x : * x-x x-x . = λ d' : * d' x-x β (λ d' : * d') λ x-x : * x-x cast'' . = cast'' λ x' : * x' }> { Λ x' : Nat λ d' : [[[[FixM' A] F] fm] x'] [<ψ [<<<<outFixM' A> F> fm> x'> d'] (λ x'' : [Top' A] [F [[[FixM' A] F] fm]])> { β (λ x'' : * x'') λ e : * λ d'' : * d'' , Λ X' : Π x'''' : Nat * Λ reveal : [[[Cast' A] X'] [[[FixM' A] F] fm]] Λ p : (ι o : ∀ x'''' : Nat Π _ : [X' x''''] [[F X'] x''''] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) λ e : (ι ih : ∀ x'''' : Nat Π r : [X' x''''] [[(λ x'' : [Top' A] [F [[[FixM' A] F] fm]]) β (λ x'' : * x'') r] x''''] = ih λ d'' : * [d'' (λ e : * λ d''' : * d''')]) <<<<cast' A> [F X']> [F [[[FixM' A] F] fm]]> <<<fm X'> [[[FixM' A] F] fm]> reveal>> alg' . ∀ R : Π x'''' : Nat * ∀ _ : [[[Cast' A] R] [[[FixM' A] F] fm]] ∀ _ : (ι o : ∀ x'''' : Nat Π _ : [R x''''] [[F R] x''''] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) Π _ : (ι ih : ∀ x'''' : Nat Π r : [R x''''] [[(λ x'' : [Top' A] [F [[[FixM' A] F] fm]]) β (λ x'' : * x'') r] x''''] = ih λ d'' : * [d'' alg']) ∀ x'''' : Nat Π x''''' : [[F R] x''''] [[(λ x'' : [Top' A] [F [[[FixM' A] F] fm]]) β (λ x'' : * x'') λ alg'' : * [[alg'' (λ d'' : * [d'' alg''])] x''''']] x''''] }] , β (λ d' : * [[outFixM' d'] (λ e : * λ d'' : * d'')]) λ d' : * [d' (λ e : * λ d'' : * d'')] o . = o λ d' : * [d' (λ p : * λ d'' : * d'')] }> { Λ x' : Nat λ d' : [[[[FixM' A] F] fm] x'] [<ψ [<<<<outFixM' A> F> fm> x'> d'] X> alg] , β (λ d' : * [[outFixM' d'] alg]) λ d' : * [d' alg] ih . = ih λ d' : * [d' alg] }] x> d] x'' . ∀ X : Π _ : [Top' A] Π x''' : Nat * Π _ : (ι alg : [Top' A] ∀ R : Π x''' : Nat * ∀ _ : [[[Cast' A] R] [[[FixM' A] F] fm]] ∀ _ : (ι o : ∀ x''' : Nat Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : Nat Π r : [R x'''] [[X β (λ x'''' : * x'''') r] x'''] = ih λ d' : * [d' alg]) ∀ x''' : Nat Π x'''' : [[F R] x'''] [[X β (λ x''''' : * x''''') λ alg' : * [[alg' (λ d' : * [d' alg'])] x'''']] x''']) [[X x''] x] }].
let outFix' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ fm : [[RecFunctor' A] F] Λ x : Nat λ x' : [[[[FixM' A] F] fm] x] [<ψ [<<<<outFixM' A> F> fm> x> x'] (λ x'' : [Top' A] [F [[[FixM' A] F] fm]])> { β (λ x'' : * x'') λ e : * λ d : * d , Λ R : Π x'''' : Nat * Λ c : [[[Cast' A] R] [[[FixM' A] F] fm]] Λ p : (ι o : ∀ x'''' : Nat Π _ : [R x''''] [[F R] x''''] = o λ d : * [d (λ p : * λ d' : * d')]) λ e : (ι ih : ∀ x'''' : Nat Π r : [R x''''] [[(λ x'' : [Top' A] [F [[[FixM' A] F] fm]]) β (λ x'' : * x'') r] x''''] = ih λ d : * [d (λ e : * λ d' : * d')]) <<<<cast' A> [F R]> [F [[[FixM' A] F] fm]]> <<<fm R> [[[FixM' A] F] fm]> c>> alg . ∀ R : Π x'''' : Nat * ∀ _ : [[[Cast' A] R] [[[FixM' A] F] fm]] ∀ _ : (ι o : ∀ x'''' : Nat Π _ : [R x''''] [[F R] x''''] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : ∀ x'''' : Nat Π r : [R x''''] [[(λ x'' : [Top' A] [F [[[FixM' A] F] fm]]) β (λ x'' : * x'') r] x''''] = ih λ d : * [d alg]) ∀ x'''' : Nat Π x''''' : [[F R] x''''] [[(λ x'' : [Top' A] [F [[[FixM' A] F] fm]]) β (λ x'' : * x'') λ alg' : * [[alg' (λ d : * [d alg'])] x''''']] x''''] }].
let IndFixM'' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ fm : [[RecFunctor' A] F] Λ x : Nat λ d : [[[[FixM' A] F] fm] x] Λ Q : Π x' : Nat Π _ : [[[[FixM' A] F] fm] x'] * λ alg : (ι alg : [Top' A] ∀ R : Π x' : Nat * ∀ reveal : [[[Cast' A] R] [[[FixM' A] F] fm]] ∀ _ : (ι o : ∀ x' : Nat Π _ : [R x'] [[F R] x'] = o outFix') Π _ : (ι ih : ∀ x' : Nat Π r : [R x'] [[Q x'] [<<<<<cast' A> R> [[[FixM' A] F] fm]> reveal> x'> r]] = ih λ d' : * [d' alg]) ∀ x' : Nat Π x'' : [[F R] x'] [[Q x'] [<<<<inFix' A> F> fm> x'> [<<<<<cast' A> [F R]> [F [[[FixM' A] F] fm]]> <<<fm R> [[[FixM' A] F] fm]> reveal>> x'> x'']]]) <<[<ψ [<<<<outFixM' A> F> fm> x> d] (λ d' : [Top' A] λ x' : Nat ∀ d'' : [[[[FixM' A] F] fm] x'] ∀ e : = d'' d' [[Q x'] φ e d'' d'])> { β (λ x' : * x') alg , Λ R : Π x''' : Nat * Λ reveal : [[[Cast' A] R] [[[FixM' A] F] fm]] Λ out : (ι o : ∀ x''' : Nat Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) λ ih : (ι ih : ∀ x''' : Nat Π r : [R x'''] [[(λ d' : [Top' A] λ x' : Nat ∀ d'' : [[[[FixM' A] F] fm] x'] ∀ e : = d'' d' [[Q x'] φ e d'' d']) β (λ x' : * x') r] x'''] = ih λ d' : * [d' alg]) Λ x' : Nat λ d' : [[F R] x'] Λ d'' : [[[[FixM' A] F] fm] x'] Λ e : = d'' λ alg'' : * [[alg'' (λ d''' : * [d''' alg''])] d'] [<[<<<ψ alg R> reveal> out> { Λ x'' : Nat λ r : [R x''] <<[<π ih x''> r] [<<<<<cast' A> R> [[[FixM' A] F] fm]> reveal> x''> r]> ρ β r λ x-x : * x-x x-x . = [cast' r] x-x β [cast' r] λ x-x : * x-x> , ψ ih ih' . = ih' λ d''' : * [d''' alg] }] x'> d'] alg' . ∀ R : Π x''' : Nat * ∀ _ : [[[Cast' A] R] [[[FixM' A] F] fm]] ∀ _ : (ι o : ∀ x''' : Nat Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : Nat Π r : [R x'''] [[(λ d' : [Top' A] λ x' : Nat ∀ d'' : [[[[FixM' A] F] fm] x'] ∀ e : = d'' d' [[Q x'] φ e d'' d']) β (λ x' : * x') r] x'''] = ih λ d' : * [d' alg']) ∀ x''' : Nat Π x'''' : [[F R] x'''] [[(λ d' : [Top' A] λ x' : Nat ∀ d'' : [[[[FixM' A] F] fm] x'] ∀ e : = d'' d' [[Q x'] φ e d'' d']) β (λ x' : * x') λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x'''']] x'''] }] d> ρ β [outFixM' d] λ x-x : * x-x x-x . = d x-x β d λ x-x : * x-x>.
let IndFixM''' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ fm : [[RecFunctor' A] F] Λ x : Nat λ d : [[[[FixM' A] F] fm] x] Λ Q : Π x' : Nat Π _ : [[[[FixM' A] F] fm] x'] * λ alg : ∀ R : Π _ : Nat * ∀ reveal : [[[Cast' A] R] [[[FixM' A] F] fm]] ∀ _ : (ι o : ∀ x' : Nat Π _ : [R x'] [[F R] x'] = o outFix') Π _ : ∀ x' : Nat Π r : [R x'] [[Q x'] [<<<<<cast' A> R> [[[FixM' A] F] fm]> reveal> x'> r]] ∀ x' : Nat Π x'' : [[F R] x'] [[Q x'] [<<<<inFix' A> F> fm> x'> [<<<<<cast' A> [F R]> [F [[[FixM' A] F] fm]]> <<<fm R> [[[FixM' A] F] fm]> reveal>> x'> x'']]] [<[<<<<IndFixM'' A> F> fm> x> d] Q> { β (λ x' : * x') alg , Λ R : Π x'' : Nat * Λ rvl : [[[Cast' A] R] [[[FixM' A] F] fm]] Λ out : (ι o : ∀ x'' : Nat Π _ : [R x''] [[F R] x''] = o outFix') λ ih : (ι ih : ∀ x'' : Nat Π r : [R x''] [[Q x''] [<<<<<cast' A> R> [[[FixM' A] F] fm]> rvl> x''> r]] = ih λ d'' : * [d'' alg]) [<<<alg R> rvl> out> π ih] alg' . ∀ R : Π x'' : Nat * ∀ reveal : [[[Cast' A] R] [[[FixM' A] F] fm]] ∀ _ : (ι o : ∀ x'' : Nat Π _ : [R x''] [[F R] x''] = o outFix') Π _ : (ι ih : ∀ x'' : Nat Π r : [R x''] [[Q x''] [<<<<<cast' A> R> [[[FixM' A] F] fm]> reveal> x''> r]] = ih λ d'' : * [d'' alg']) ∀ x'' : Nat Π x''' : [[F R] x''] [[Q x''] [<<<<inFix' A> F> fm> x''> [<<<<<cast' A> [F R]> [F [[[FixM' A] F] fm]]> <<<fm R> [[[FixM' A] F] fm]> reveal>> x''> x''']]] }].
let lambek' := Λ A : * Λ F : Π _ : Π x : Nat * Π x : Nat * Λ fm : [[RecFunctor' A] F] Λ x : Nat λ d : [[[[FixM' A] F] fm] x] [<[<<<<IndFixM''' A> F> fm> x> d] (λ x' : Nat λ d' : [[[[FixM' A] F] fm] x'] = [inFix' [outFix' d']] d')> (Λ R : Π _ : Nat * Λ rvl : [[[Cast' A] R] [[[FixM' A] F] fm]] Λ out : (ι o : ∀ x'' : Nat Π _ : [R x''] [[F R] x''] = o outFix') λ ih : ∀ x'' : Nat Π r : [R x''] = [inFix' [outFix' [cast' r]]] [cast' r] Λ x' : Nat λ d' : [[F R] x'] ρ β [inFix' [cast' d']] λ x-x : * x-x x-x . = [inFix' [outFix' [inFix' [cast' d']]]] x-x β [inFix' [outFix' [inFix' [cast' d']]]] λ x-x : * x-x)].
let VecF := λ A : * λ Vec : Π x : Nat * λ x : Nat (ι x' : = λ x' : * x' λ x' : * x' ∀ X : Π x'' : Nat Π _ : = λ x''' : * x''' λ x''' : * x''' * Π _ : [[X zero] β (λ x''' : * x''') λ vnil : * λ vcons : * vnil] Π _ : ∀ n : Nat Π x'' : A Π x''' : [Vec n] [[X [suc n]] β (λ x'''' : * x'''') λ vnil : * λ vcons : * [[vcons x''] x''']] [[X x] x']) : Π _ : * Π Vec : Π _ : Nat * Π x : Nat *.
let VecIndF := Λ A : * Λ Vec : Π x : Nat * Λ x : Nat λ x' : [[[VecF A] Vec] x] Λ X : Π x'' : Nat Π _ : [[[VecF A] Vec] x''] * λ vnil : [[X zero] { β (λ x''' : * x''') λ vnil : * λ vcons : * vnil , Λ X' : Π x'''' : Nat Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * λ vnil : [[X' zero] β (λ x''''' : * x''''') λ vnil : * λ vcons : * vnil] λ vcons : ∀ n : Nat Π x'''' : A Π x''''' : [Vec n] [[X' [suc n]] β (λ x''''''' : * x''''''') λ vnil' : * λ vcons : * [[vcons x''''] x''''']] vnil x''' . ∀ X' : Π x'''' : Nat Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * Π _ : [[X' zero] β (λ x'''' : * x'''') λ vnil : * λ vcons : * vnil] Π _ : ∀ n : Nat Π x'''' : A Π x''''' : [Vec n] [[X' [suc n]] β (λ x'''''' : * x'''''') λ vnil : * λ vcons : * [[vcons x''''] x''''']] [[X' zero] x'''] }] λ vcons : ∀ n : Nat Π x'' : A Π x''' : [Vec n] [[X [suc n]] { β (λ x''''' : * x''''') λ vnil' : * λ vcons : * [[vcons x''] x'''] , Λ X' : Π x'''''' : Nat Π _ : = λ x''''''' : * x''''''' λ x''''''' : * x''''''' * λ vnil' : [[X' zero] β (λ x''''''' : * x''''''') λ vnil' : * λ vcons : * vnil'] λ vcons : ∀ n' : Nat Π x'''''' : A Π x''''''' : [Vec n'] [[X' [suc n']] β (λ x''''''''' : * x''''''''') λ vnil'' : * λ vcons : * [[vcons x''''''] x''''''']] [[<vcons n> x''] x'''] x''''' . ∀ X' : Π x'''''' : Nat Π _ : = λ x''''''' : * x''''''' λ x''''''' : * x''''''' * Π _ : [[X' zero] β (λ x'''''' : * x'''''') λ vnil' : * λ vcons : * vnil'] Π _ : ∀ n' : Nat Π x'''''' : A Π x''''''' : [Vec n'] [[X' [suc n']] β (λ x'''''''' : * x'''''''') λ vnil' : * λ vcons : * [[vcons x''''''] x''''''']] [[X' [suc n]] x'''''] }] <<[[<ψ x' (λ x'' : Nat λ x''' : = λ x''' : * x''' λ x''' : * x''' ∀ y : [[[VecF A] Vec] x''] ∀ e : = y x''' [[X x''] φ e y x'''])> (Λ y : [[[VecF A] Vec] zero] Λ e : = y λ vnil' : * λ vcons' : * vnil' vnil)] (Λ n : Nat λ x'' : A λ x''' : [Vec n] Λ y : [[[VecF A] Vec] [suc n]] Λ e : = y λ vnil' : * λ vcons' : * [[vcons' x''] x'''] [[<vcons n> x''] x'''])] x'> ρ β x' λ x-x : * x-x x-x . = x' x-x β x' λ x-x : * x-x>.
let VecFmap := Λ A : * Λ A' : Π _ : Nat * Λ B : Π _ : Nat * Λ c : [[[Cast' A] A'] B] { Λ x : Nat λ x' : [[[VecF A] A'] x] { π x' , Λ X : Π x'''' : Nat Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * λ vnil : [[X zero] β (λ x''''' : * x''''') λ vnil : * λ vcons : * vnil] λ vcons : ∀ n : Nat Π x'''' : A Π x''''' : [B n] [[X [suc n]] β (λ x''''''' : * x''''''') λ vnil' : * λ vcons : * [[vcons x''''] x''''']] [[<ψ x' X> vnil] (Λ n : Nat λ x'' : A λ x''' : [A' n] [[<vcons n> x''] [<<<<<cast' A> A'> B> c> n> x''']])] x''' . ∀ X : Π x'''' : Nat Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * Π _ : [[X zero] β (λ x'''' : * x'''') λ vnil : * λ vcons : * vnil] Π _ : ∀ n : Nat Π x'''' : A Π x''''' : [B n] [[X [suc n]] β (λ x'''''' : * x'''''') λ vnil : * λ vcons : * [[vcons x''''] x''''']] [[X x] x'''] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ x' : * x' x-x β (λ x' : * x') λ x-x : * x-x cast'' . = cast'' λ x : * x }.
let Vec := λ A : * [[[FixM' A] [VecF A]] <VecFmap A>] : Π _ : * Π x : Nat *.
let Is-Vec := λ A : * λ X : Π x : Nat * ∀ Y : * Π _ : Π _ : (ι i : ∀ x : Nat Π _ : [X x] [[Vec A] x] = i λ x : * x) Π _ : (ι i : ∀ x : Nat Π _ : [X x] [[[VecF A] X] x] = i outFix') Y Y : Π _ : * Π X : Π _ : Nat * *.
let is-Vec := Λ A : * Λ Y : * λ f : Π _ : (ι i : ∀ x : Nat Π _ : [[Vec A] x] [[Vec A] x] = i λ x : * x) Π _ : (ι i : ∀ x : Nat Π _ : [[Vec A] x] [[[VecF A] [Vec A]] x] = i outFix') Y [[f { Λ x : Nat λ x' : [[Vec A] x] x' , β (λ x' : * x') λ x : * x i . = i λ x : * x }] { <<<outFix' A> [VecF A]> <VecFmap A>> , β outFix' outFix' i . = i outFix' }].
let to-Vec := Λ A : * Λ Y : Π x : Nat * Λ mu : [[Is-Vec A] Y] φ ψ [<mu (ι i : ∀ x : Nat Π _ : [Y x] [[Vec A] x] = i λ x : * x)> (λ c : (ι i : ∀ x : Nat Π _ : [Y x] [[Vec A] x] = i λ x : * x) λ o : (ι i : ∀ x : Nat Π _ : [Y x] [[[VecF A] Y] x] = i outFix') c)] π [<mu (ι i : ∀ x : Nat Π _ : [Y x] [[Vec A] x] = i λ x : * x)> (λ c : (ι i : ∀ x : Nat Π _ : [Y x] [[Vec A] x] = i λ x : * x) λ o : (ι i : ∀ x : Nat Π _ : [Y x] [[[VecF A] Y] x] = i outFix') c)] λ x : * x.
let vnil := Λ A : * [<<<<inFix' A> [VecF A]> <VecFmap A>> zero> { β (λ x' : * x') λ vnil : * λ vcons : * vnil , Λ X : Π x'' : Nat Π _ : = λ x''' : * x''' λ x''' : * x''' * λ vnil : [[X zero] β (λ x''' : * x''') λ vnil : * λ vcons : * vnil] λ vcons : ∀ n : Nat Π x'' : A Π x''' : [[[[FixM' A] [VecF A]] <VecFmap A>] n] [[X [suc n]] β (λ x''''' : * x''''') λ vnil' : * λ vcons : * [[vcons x''] x''']] vnil x' . ∀ X : Π x'' : Nat Π _ : = λ x''' : * x''' λ x''' : * x''' * Π _ : [[X zero] β (λ x''' : * x''') λ vnil : * λ vcons : * vnil] Π _ : ∀ n : Nat Π x'' : A Π x''' : [[[[FixM' A] [VecF A]] <VecFmap A>] n] [[X [suc n]] β (λ x'''' : * x'''') λ vnil : * λ vcons : * [[vcons x''] x''']] [[X zero] x'] }].
let vcons := Λ A : * Λ n : Nat λ x' : A λ x'' : [[Vec A] n] [<<<<inFix' A> [VecF A]> <VecFmap A>> [suc n]> { β (λ x''' : * x''') λ vnil' : * λ vcons : * [[vcons x'] x''] , Λ X : Π x'''' : Nat Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * λ vnil' : [[X zero] β (λ x''''' : * x''''') λ vnil' : * λ vcons : * vnil'] λ vcons : ∀ n' : Nat Π x'''' : A Π x''''' : [[[[FixM' A] [VecF A]] <VecFmap A>] n'] [[X [suc n']] β (λ x''''''' : * x''''''') λ vnil'' : * λ vcons : * [[vcons x''''] x''''']] [[<vcons n> x'] x''] x''' . ∀ X : Π x'''' : Nat Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * Π _ : [[X zero] β (λ x'''' : * x'''') λ vnil' : * λ vcons : * vnil'] Π _ : ∀ n' : Nat Π x'''' : A Π x''''' : [[[[FixM' A] [VecF A]] <VecFmap A>] n'] [[X [suc n']] β (λ x'''''' : * x'''''') λ vnil' : * λ vcons : * [[vcons x''''] x''''']] [[X [suc n]] x'''] }].
let pred := λ n : Nat <<[[<φ ρ β [outFix n] λ x-x : * x-x x-x . = [NatIndF [outFix n]] x-x β [NatIndF [outFix n]] λ x-x : * x-x [<NatIndF Nat> [<<outFix NatF> NatFmap> n]] [outFix n] (λ y : [NatF Nat] ∀ y' : Nat ∀ _ : = [inFix y] y' Nat)> (Λ y : Nat Λ e : = [inFix (λ zero' : * λ suc' : * zero')] y ρ σ e x . Nat n)] (λ n' : Nat Λ y : Nat Λ e : = [inFix (λ zero' : * λ suc' : * [suc' n'])] y ρ σ e x . Nat n')] n> [<<lambek NatF> NatFmap> n]>.
let add := λ m : Nat λ n : Nat [<[<<IndFixM NatF> NatFmap> m] (λ _ : Nat Nat)> (Λ Type-addN : * Λ to : [[Cast Type-addN] [[FixM NatF] NatFmap]] Λ out : (ι o : Π _ : Type-addN [NatF Type-addN] = o outFix) λ addN : Π _ : Type-addN Nat λ y : [NatF Type-addN] { isType-addN = Λ Y : * λ x : Π _ : (ι i : Π _ : Type-addN Nat = i λ x : * x) Π _ : (ι i : Π _ : Type-addN [NatF Type-addN] = i outFix) Y [[x to] out] } - <<[[<φ ρ β y λ x-x : * x-x x-x . = [NatIndF y] x-x β [NatIndF y] λ x-x : * x-x [<NatIndF Type-addN> y] y (λ y'' : [NatF Type-addN] ∀ y''' : Nat ∀ _ : = [inFix y''] y''' Nat)> (Λ y'' : Nat Λ e : = [inFix (λ zero' : * λ suc' : * zero')] y'' ρ σ e x . Nat n)] (λ m' : Type-addN Λ y'' : Nat Λ e : = [inFix (λ zero' : * λ suc' : * [suc' m'])] y'' ρ σ e x . Nat [suc [addN m']])] [<<inFix NatF> NatFmap> [<<<cast [NatF Type-addN]> [NatF [[FixM NatF] NatFmap]]> <<<NatFmap Type-addN> Nat> [<isType-addN [[Cast Type-addN] Nat]> (λ to' : (ι i : Π _ : Type-addN Nat = i λ x : * x) λ out' : (ι i : Π _ : Type-addN [NatF Type-addN] = i outFix) to')]>> y]]> [<<lambek NatF> NatFmap> [<<inFix NatF> NatFmap> [<<<cast [NatF Type-addN]> [NatF [[FixM NatF] NatFmap]]> <<<NatFmap Type-addN> Nat> [<isType-addN [[Cast Type-addN] Nat]> (λ to' : (ι i : Π _ : Type-addN Nat = i λ x : * x) λ out' : (ι i : Π _ : Type-addN [NatF Type-addN] = i outFix) to')]>> y]]]>)].
let natCases := Λ P : Π _ : Nat * λ n : Nat λ z : [P zero] λ s : Π m : Nat [P [suc m]] <<[[<φ ρ β [outFix n] λ x-x : * x-x x-x . = [NatIndF [outFix n]] x-x β [NatIndF [outFix n]] λ x-x : * x-x [<NatIndF Nat> [<<outFix NatF> NatFmap> n]] [outFix n] (λ y : [NatF Nat] ∀ y' : Nat ∀ e : = [inFix y] y' [P φ e [<<inFix NatF> NatFmap> y] y'])> (Λ y : Nat Λ e : = [inFix (λ zero' : * λ suc' : * zero')] y ρ σ e x . [P x] z)] (λ n' : Nat Λ y : Nat Λ e : = [inFix (λ zero' : * λ suc' : * [suc' n'])] y ρ σ e x . [P x] [s n'])] n> [<<lambek NatF> NatFmap> n]>.
let vecInd := Λ A : * Λ P : Π i : Nat Π _ : [[Vec A] i] * Λ n : Nat λ xs : [[Vec A] n] λ vn : [[P zero] <vnil A>] λ vc : ∀ m : Nat Π a : A Π xs' : [[Vec A] m] Π _ : [[P m] xs'] [[P [suc m]] [[<<vcons A> m> a] xs']] [<[<<<<IndFixM''' A> [VecF A]> <VecFmap A>> n> xs] P> (Λ Type-ih : Π _ : Nat * Λ to : [[[Cast' A] Type-ih] [[[FixM' A] [VecF A]] <VecFmap A>]] Λ out : (ι o : ∀ x' : Nat Π _ : [Type-ih x'] [[[VecF A] Type-ih] x'] = o outFix') λ ih : ∀ x' : Nat Π r : [Type-ih x'] [[P x'] [<<<<<cast' A> Type-ih> [[[FixM' A] [VecF A]] <VecFmap A>]> to> x'> r]] Λ x : Nat λ y : [[[VecF A] Type-ih] x] { isType-ih = Λ Y : * λ x' : Π _ : (ι i : ∀ x' : Nat Π _ : [Type-ih x'] [[Vec A] x'] = i λ x' : * x') Π _ : (ι i : ∀ x' : Nat Π _ : [Type-ih x'] [[[VecF A] Type-ih] x'] = i outFix') Y [[x' to] out] } - <<[[<φ ρ β y λ x-x : * x-x x-x . = [VecIndF y] x-x β [VecIndF y] λ x-x : * x-x [<<<VecIndF A> Type-ih> x> y] y (λ x'' : Nat λ y'' : [[[VecF A] Type-ih] x''] ∀ y''' : [[Vec A] x''] ∀ e : = [inFix' y''] y''' [[P x''] φ e [<<<<inFix' A> [VecF A]> <VecFmap A>> x''> [<<<<<cast' A> [[VecF A] Type-ih]> [[VecF A] [Vec A]]> <<<<VecFmap A> Type-ih> [Vec A]> to>> x''> y'']] y'''])> (Λ y'' : [[Vec A] zero] Λ e : = [inFix' (λ vnil' : * λ vcons' : * vnil')] y'' ρ σ e x' . [[P zero] x'] vn)] (Λ m : Nat λ hd : A λ tl : [Type-ih m] Λ y'' : [[Vec A] [suc m]] Λ e : = [inFix' (λ vnil' : * λ vcons' : * [[vcons' hd] tl])] y'' ρ σ e x' . [[P [suc m]] x'] [[[<vc m> hd] [<<<<to-Vec A> Type-ih> isType-ih> m> tl]] [<ih m> tl]])] [<<<<inFix' A> [VecF A]> <VecFmap A>> x> [<<<<<cast' A> [[VecF A] Type-ih]> [[VecF A] [Vec A]]> <<<<VecFmap A> Type-ih> [Vec A]> [<isType-ih [[[Cast' A] Type-ih] [Vec A]]> (λ to' : (ι i : ∀ x' : Nat Π _ : [Type-ih x'] [[Vec A] x'] = i λ x' : * x') λ out' : (ι i : ∀ x' : Nat Π _ : [Type-ih x'] [[[VecF A] Type-ih] x'] = i outFix') to')]>> x> y]]> [<<<<lambek' A> [VecF A]> <VecFmap A>> x> [<<<<inFix' A> [VecF A]> <VecFmap A>> x> [<<<<<cast' A> [[VecF A] Type-ih]> [[VecF A] [Vec A]]> <<<<VecFmap A> Type-ih> [Vec A]> [<isType-ih [[[Cast' A] Type-ih] [Vec A]]> (λ to' : (ι i : ∀ x' : Nat Π _ : [Type-ih x'] [[Vec A] x'] = i λ x' : * x') λ out' : (ι i : ∀ x' : Nat Π _ : [Type-ih x'] [[[VecF A] Type-ih] x'] = i outFix') to')]>> x> y]]]>)].
let Top'' := = λ x : * x λ x : * x : *.
let Cast'' := λ A : * λ B : * (ι cast'' : Π _ : A B = cast'' λ x : * x) : Π _ : * Π B : * *.
let cast'' := Λ A : * Λ B : * Λ c : [[Cast'' A] B] φ ψ c π c λ x : * x.
let RecFunctor'' := λ F : Π _ : * * ∀ X : * ∀ Y : * ∀ _ : [[Cast'' X] Y] [[Cast'' [F X]] [F Y]] : Π _ : Π _ : * * *.
let Rec'' := λ F : Π _ : * * ∀ X : * ∀ _ : [[Cast'' [F X]] X] X : Π _ : Π _ : * * *.
let recCast'' := Λ F : Π _ : * * Λ X : * Λ c : [[Cast'' [F X]] X] { λ a : [Rec'' F] <<a X> c> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast''' . = cast''' λ x : * x }.
let recIn'' := Λ F : Π _ : * * Λ fmap : [RecFunctor'' F] { λ a : [F [Rec'' F]] Λ X : * Λ c : [[Cast'' [F X]] X] [<<<cast'' [F X]> X> c> [<<<cast'' [F [Rec'' F]]> [F X]> <<<fmap [Rec'' F]> X> <<<recCast'' F> X> c>>> a]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * [cast'' [cast'' a]] x-x β (λ a : * [cast'' [cast'' a]]) λ x-x : * x-x cast''' . = cast''' λ x : * x }.
let recOut'' := Λ F : Π _ : * * Λ fmap : [RecFunctor'' F] { λ a : [Rec'' F] <<a [F [Rec'' F]]> <<<fmap [F [Rec'' F]]> [Rec'' F]> <<recIn'' F> fmap>>> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast''' . = cast''' λ x : * x }.
let FixMF'' := λ F : Π _ : * * λ fm : [RecFunctor'' F] λ FixM'' : * (ι x : Top'' ∀ X : Π _ : Top'' * Π _ : (ι alg : Top'' ∀ R : * ∀ _ : [[Cast'' R] FixM''] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d : * [d alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d : * [d alg'])] x']]) [X x]) : Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[Cast'' X] Y] [[Cast'' [F X]] [F Y]] Π FixM'' : * *.
let FixM'' := λ F : Π _ : * * λ fm : [RecFunctor'' F] [Rec'' [[FixMF'' F] fm]] : Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[Cast'' X] Y] [[Cast'' [F X]] [F Y]] *.
let FixFmap'' := Λ F : Π _ : * * Λ fm : [RecFunctor'' F] Λ D : * Λ D' : * Λ c : [[Cast'' D] D'] { λ d : [[[FixMF'' F] fm] D] { π d , Λ X : Π _ : Top'' * λ alg : (ι alg : Top'' ∀ R : * ∀ _ : [[Cast'' R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [<ψ d X> { π alg , Λ R : * Λ reveal : [[Cast'' R] D] <<ψ alg R> { λ r : R [<<<cast'' D> D'> c> [<<<cast'' R> D> reveal> r]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ r : * [cast'' [cast'' r]] x-x β (λ r : * [cast'' [cast'' r]]) λ x-x : * x-x cast''' . = cast''' λ x : * x }> alg' . ∀ R : * ∀ _ : [[Cast'' R] D] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [X β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] x . ∀ X : Π _ : Top'' * Π _ : (ι alg : Top'' ∀ R : * ∀ _ : [[Cast'' R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d : * d x-x β (λ d : * d) λ x-x : * x-x cast''' . = cast''' λ x : * x }.
let inFixM'' := Λ F : Π _ : * * Λ fm : [RecFunctor'' F] <<<cast'' [[[FixMF'' F] fm] [[FixM'' F] fm]]> [[FixM'' F] fm]> <<recIn'' [[FixMF'' F] fm]> <<FixFmap'' F> fm>>>.
let outFixM'' := Λ F : Π _ : * * Λ fm : [RecFunctor'' F] <<<cast'' [[FixM'' F] fm]> [[[FixMF'' F] fm] [[FixM'' F] fm]]> <<recOut'' [[FixMF'' F] fm]> <<FixFmap'' F> fm>>>.
let inFix'' := Λ F : Π _ : * * Λ fm : [RecFunctor'' F] λ d : [F [[FixM'' F] fm]] [<<inFixM'' F> fm> { β (λ x : * x) λ alg : * [[alg (λ d' : * [d' alg])] d] , Λ X : Π _ : Top'' * λ alg : (ι alg : Top'' ∀ R : * ∀ _ : [[Cast'' R] [[FixM'' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [[<<<ψ alg [[FixM'' F] fm]> { λ d' : [[FixM'' F] fm] d' , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d' : * d' x-x β (λ d' : * d') λ x-x : * x-x cast''' . = cast''' λ x : * x }> { λ d' : [[FixM'' F] fm] [<ψ [<<outFixM'' F> fm> d'] (λ x : Top'' [F [[FixM'' F] fm]])> { β (λ x : * x) λ e : * λ d'' : * d'' , Λ X' : * Λ reveal : [[Cast'' X'] [[FixM'' F] fm]] Λ p : (ι o : Π _ : X' [F X'] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) λ e : (ι ih : Π r : X' [(λ x : Top'' [F [[FixM'' F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' (λ e : * λ d''' : * d''')]) <<<cast'' [F X']> [F [[FixM'' F] fm]]> <<<fm X'> [[FixM'' F] fm]> reveal>> alg' . ∀ R : * ∀ _ : [[Cast'' R] [[FixM'' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) Π _ : (ι ih : Π r : R [(λ x : Top'' [F [[FixM'' F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' alg']) Π x' : [F R] [(λ x : Top'' [F [[FixM'' F] fm]]) β (λ x : * x) λ alg'' : * [[alg'' (λ d'' : * [d'' alg''])] x']] }] , β (λ d' : * [[outFixM'' d'] (λ e : * λ d'' : * d'')]) λ d' : * [d' (λ e : * λ d'' : * d'')] o . = o λ d' : * [d' (λ p : * λ d'' : * d'')] }> { λ d' : [[FixM'' F] fm] [<ψ [<<outFixM'' F> fm> d'] X> alg] , β (λ d' : * [[outFixM'' d'] alg]) λ d' : * [d' alg] ih . = ih λ d' : * [d' alg] }] d] x . ∀ X : Π _ : Top'' * Π _ : (ι alg : Top'' ∀ R : * ∀ _ : [[Cast'' R] [[FixM'' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] }].
let outFix'' := Λ F : Π _ : * * Λ fm : [RecFunctor'' F] λ x : [[FixM'' F] fm] [<ψ [<<outFixM'' F> fm> x] (λ x' : Top'' [F [[FixM'' F] fm]])> { β (λ x' : * x') λ e : * λ d : * d , Λ R : * Λ c : [[Cast'' R] [[FixM'' F] fm]] Λ p : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) λ e : (ι ih : Π r : R [(λ x' : Top'' [F [[FixM'' F] fm]]) β (λ x' : * x') r] = ih λ d : * [d (λ e : * λ d' : * d')]) <<<cast'' [F R]> [F [[FixM'' F] fm]]> <<<fm R> [[FixM'' F] fm]> c>> alg . ∀ R : * ∀ _ : [[Cast'' R] [[FixM'' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [(λ x' : Top'' [F [[FixM'' F] fm]]) β (λ x' : * x') r] = ih λ d : * [d alg]) Π x'' : [F R] [(λ x' : Top'' [F [[FixM'' F] fm]]) β (λ x' : * x') λ alg' : * [[alg' (λ d : * [d alg'])] x'']] }].
let IndFixM'''' := Λ F : Π _ : * * Λ fm : [RecFunctor'' F] λ d : [[FixM'' F] fm] Λ Q : Π _ : [[FixM'' F] fm] * λ alg : (ι alg : Top'' ∀ R : * ∀ reveal : [[Cast'' R] [[FixM'' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix'') Π _ : (ι ih : Π r : R [Q [<<<cast'' R> [[FixM'' F] fm]> reveal> r]] = ih λ d' : * [d' alg]) Π x : [F R] [Q [<<inFix'' F> fm> [<<<cast'' [F R]> [F [[FixM'' F] fm]]> <<<fm R> [[FixM'' F] fm]> reveal>> x]]]) <<[<ψ [<<outFixM'' F> fm> d] (λ d' : Top'' ∀ d'' : [[FixM'' F] fm] ∀ e : = d'' d' [Q φ e d'' d'])> { β (λ x : * x) alg , Λ R : * Λ reveal : [[Cast'' R] [[FixM'' F] fm]] Λ out : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) λ ih : (ι ih : Π r : R [(λ d' : Top'' ∀ d'' : [[FixM'' F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg]) λ d' : [F R] Λ d'' : [[FixM'' F] fm] Λ e : = d'' λ alg'' : * [[alg'' (λ d''' : * [d''' alg''])] d'] [[<<<ψ alg R> reveal> out> { λ r : R <<[π ih r] [<<<cast'' R> [[FixM'' F] fm]> reveal> r]> ρ β r λ x-x : * x-x x-x . = [cast'' r] x-x β [cast'' r] λ x-x : * x-x> , ψ ih ih' . = ih' λ d''' : * [d''' alg] }] d'] alg' . ∀ R : * ∀ _ : [[Cast'' R] [[FixM'' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [(λ d' : Top'' ∀ d'' : [[FixM'' F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [(λ d' : Top'' ∀ d'' : [[FixM'' F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] d> ρ β [outFixM'' d] λ x-x : * x-x x-x . = d x-x β d λ x-x : * x-x>.
let IndFixM''''' := Λ F : Π _ : * * Λ fm : [RecFunctor'' F] λ d : [[FixM'' F] fm] Λ Q : Π _ : [[FixM'' F] fm] * λ alg : ∀ R : * ∀ reveal : [[Cast'' R] [[FixM'' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix'') Π _ : Π r : R [Q [<<<cast'' R> [[FixM'' F] fm]> reveal> r]] Π x : [F R] [Q [<<inFix'' F> fm> [<<<cast'' [F R]> [F [[FixM'' F] fm]]> <<<fm R> [[FixM'' F] fm]> reveal>> x]]] [<[<<IndFixM'''' F> fm> d] Q> { β (λ x : * x) alg , Λ R : * Λ rvl : [[Cast'' R] [[FixM'' F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix'') λ ih : (ι ih : Π r : R [Q [<<<cast'' R> [[FixM'' F] fm]> rvl> r]] = ih λ d'' : * [d'' alg]) [<<<alg R> rvl> out> π ih] alg' . ∀ R : * ∀ reveal : [[Cast'' R] [[FixM'' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix'') Π _ : (ι ih : Π r : R [Q [<<<cast'' R> [[FixM'' F] fm]> reveal> r]] = ih λ d'' : * [d'' alg']) Π x : [F R] [Q [<<inFix'' F> fm> [<<<cast'' [F R]> [F [[FixM'' F] fm]]> <<<fm R> [[FixM'' F] fm]> reveal>> x]]] }].
let lambek'' := Λ F : Π _ : * * Λ fm : [RecFunctor'' F] λ d : [[FixM'' F] fm] [<[<<IndFixM''''' F> fm> d] (λ d' : [[FixM'' F] fm] = [inFix'' [outFix'' d']] d')> (Λ R : * Λ rvl : [[Cast'' R] [[FixM'' F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix'') λ ih : Π r : R = [inFix'' [outFix'' [cast'' r]]] [cast'' r] λ d' : [F R] ρ β [inFix'' [cast'' d']] λ x-x : * x-x x-x . = [inFix'' [outFix'' [inFix'' [cast'' d']]]] x-x β [inFix'' [outFix'' [inFix'' [cast'' d']]]] λ x-x : * x-x)].
let BoolF := λ Bool : * (ι x : = λ x : * x λ x : * x ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ tt : * λ ff : * tt] Π _ : [X β (λ x' : * x') λ tt : * λ ff : * ff] [X x]) : Π _ : * *.
let BoolIndF := Λ Bool : * λ x : [BoolF Bool] Λ X : Π _ : [BoolF Bool] * λ tt : [X { β (λ x' : * x') λ tt : * λ ff : * tt , Λ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ tt : [X' β (λ x'' : * x'') λ tt : * λ ff : * tt] λ ff : [X' β (λ x'' : * x'') λ tt' : * λ ff : * ff] tt x' . ∀ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X' β (λ x'' : * x'') λ tt : * λ ff : * tt] Π _ : [X' β (λ x'' : * x'') λ tt : * λ ff : * ff] [X' x'] }] λ ff : [X { β (λ x' : * x') λ tt' : * λ ff : * ff , Λ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ tt' : [X' β (λ x'' : * x'') λ tt' : * λ ff : * tt'] λ ff : [X' β (λ x'' : * x'') λ tt'' : * λ ff : * ff] ff x' . ∀ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X' β (λ x'' : * x'') λ tt' : * λ ff : * tt'] Π _ : [X' β (λ x'' : * x'') λ tt' : * λ ff : * ff] [X' x'] }] <<[[<ψ x (λ x' : = λ x' : * x' λ x' : * x' ∀ y : [BoolF Bool] ∀ e : = y x' [X φ e y x'])> (Λ y : [BoolF Bool] Λ e : = y λ tt' : * λ ff' : * tt' tt)] (Λ y : [BoolF Bool] Λ e : = y λ tt' : * λ ff' : * ff' ff)] x> ρ β x λ x-x : * x-x x-x . = x x-x β x λ x-x : * x-x>.
let BoolFmap := Λ A : * Λ B : * Λ c : [[Cast'' A] B] { λ x : [BoolF A] { π x , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ tt : [X β (λ x'' : * x'') λ tt : * λ ff : * tt] λ ff : [X β (λ x'' : * x'') λ tt' : * λ ff : * ff] [[<ψ x X> tt] ff] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X β (λ x'' : * x'') λ tt : * λ ff : * tt] Π _ : [X β (λ x'' : * x'') λ tt : * λ ff : * ff] [X x'] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ x : * x x-x β (λ x : * x) λ x-x : * x-x cast''' . = cast''' λ x : * x }.
let Bool := [[FixM'' BoolF] BoolFmap] : *.
let Is-Bool := λ X : * ∀ Y : * Π _ : Π _ : (ι i : Π _ : X Bool = i λ x : * x) Π _ : (ι i : Π _ : X [BoolF X] = i outFix'') Y Y : Π _ : * *.
let is-Bool := Λ Y : * λ f : Π _ : (ι i : Π _ : Bool Bool = i λ x : * x) Π _ : (ι i : Π _ : Bool [BoolF Bool] = i outFix'') Y [[f { λ x : Bool x , β (λ x : * x) λ x : * x i . = i λ x : * x }] { <<outFix'' BoolF> BoolFmap> , β outFix'' outFix'' i . = i outFix'' }].
let to-Bool := Λ Y : * Λ mu : [Is-Bool Y] φ ψ [<mu (ι i : Π _ : Y Bool = i λ x : * x)> (λ c : (ι i : Π _ : Y Bool = i λ x : * x) λ o : (ι i : Π _ : Y [BoolF Y] = i outFix'') c)] π [<mu (ι i : Π _ : Y Bool = i λ x : * x)> (λ c : (ι i : Π _ : Y Bool = i λ x : * x) λ o : (ι i : Π _ : Y [BoolF Y] = i outFix'') c)] λ x : * x.
let tt := [<<inFix'' BoolF> BoolFmap> { β (λ x : * x) λ tt : * λ ff : * tt , Λ X : Π _ : = λ x' : * x' λ x' : * x' * λ tt : [X β (λ x' : * x') λ tt : * λ ff : * tt] λ ff : [X β (λ x' : * x') λ tt' : * λ ff : * ff] tt x . ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ tt : * λ ff : * tt] Π _ : [X β (λ x' : * x') λ tt : * λ ff : * ff] [X x] }].
let ff := [<<inFix'' BoolF> BoolFmap> { β (λ x : * x) λ tt' : * λ ff : * ff , Λ X : Π _ : = λ x' : * x' λ x' : * x' * λ tt' : [X β (λ x' : * x') λ tt' : * λ ff : * tt'] λ ff : [X β (λ x' : * x') λ tt'' : * λ ff : * ff] ff x . ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ tt' : * λ ff : * tt'] Π _ : [X β (λ x' : * x') λ tt' : * λ ff : * ff] [X x] }].
let Top''' := = λ x : * x λ x : * x : *.
let Cast''' := λ A : Π x : * * λ B : Π x : * * (ι cast''' : ∀ x : * Π _ : [A x] [B x] = cast''' λ x : * x) : Π _ : Π _ : * * Π B : Π _ : * * *.
let cast''' := Λ A : Π _ : * * Λ B : Π _ : * * Λ c : [[Cast''' A] B] φ ψ c π c λ x : * x.
let RecFunctor''' := λ F : Π _ : Π x : * * Π x : * * ∀ X : Π x : * * ∀ Y : Π x : * * ∀ _ : [[Cast''' X] Y] [[Cast''' [F X]] [F Y]] : Π _ : Π _ : Π x : * * Π x : * * *.
let Rec''' := λ F : Π _ : Π x : * * Π x : * * λ x : * ∀ X : Π x' : * * ∀ _ : [[Cast''' [F X]] X] [X x] : Π _ : Π _ : Π x : * * Π x : * * Π x : * *.
let recCast''' := Λ F : Π _ : Π x : * * Π x : * * Λ X : Π _ : * * Λ c : [[Cast''' [F X]] X] { Λ x : * λ a : [[Rec''' F] x] <<a X> c> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast'''' . = cast'''' λ x : * x }.
let recIn''' := Λ F : Π _ : Π x : * * Π x : * * Λ fmap : [RecFunctor''' F] { Λ x : * λ a : [[F [Rec''' F]] x] Λ X : Π _ : * * Λ c : [[Cast''' [F X]] X] [<<<<cast''' [F X]> X> c> x> [<<<<cast''' [F [Rec''' F]]> [F X]> <<<fmap [Rec''' F]> X> <<<recCast''' F> X> c>>> x> a]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * [cast''' [cast''' a]] x-x β (λ a : * [cast''' [cast''' a]]) λ x-x : * x-x cast'''' . = cast'''' λ x : * x }.
let recOut''' := Λ F : Π _ : Π x : * * Π x : * * Λ fmap : [RecFunctor''' F] { Λ x : * λ a : [[Rec''' F] x] <<a [F [Rec''' F]]> <<<fmap [F [Rec''' F]]> [Rec''' F]> <<recIn''' F> fmap>>> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast'''' . = cast'''' λ x : * x }.
let FixMF''' := λ F : Π _ : Π x : * * Π x : * * λ fm : [RecFunctor''' F] λ FixM''' : Π x : * * λ x : * (ι x' : Top''' ∀ X : Π _ : Top''' Π x'' : * * Π _ : (ι alg : Top''' ∀ R : Π x'' : * * ∀ _ : [[Cast''' R] FixM'''] ∀ _ : (ι o : ∀ x'' : * Π _ : [R x''] [[F R] x''] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : ∀ x'' : * Π r : [R x''] [[X β (λ x''' : * x''') r] x''] = ih λ d : * [d alg]) ∀ x'' : * Π x''' : [[F R] x''] [[X β (λ x'''' : * x'''') λ alg' : * [[alg' (λ d : * [d alg'])] x''']] x'']) [[X x'] x]) : Π F : Π _ : Π x : * * Π x : * * Π fm : ∀ X : Π _ : * * ∀ Y : Π _ : * * ∀ _ : [[Cast''' X] Y] [[Cast''' [F X]] [F Y]] Π FixM''' : Π _ : * * Π x : * *.
let FixM''' := λ F : Π _ : Π x : * * Π x : * * λ fm : [RecFunctor''' F] [Rec''' [[FixMF''' F] fm]] : Π F : Π _ : Π x : * * Π x : * * Π fm : ∀ X : Π _ : * * ∀ Y : Π _ : * * ∀ _ : [[Cast''' X] Y] [[Cast''' [F X]] [F Y]] Π x : * *.
let FixFmap''' := Λ F : Π _ : Π x : * * Π x : * * Λ fm : [RecFunctor''' F] Λ D : Π _ : * * Λ D' : Π _ : * * Λ c : [[Cast''' D] D'] { Λ x : * λ d : [[[[FixMF''' F] fm] D] x] { π d , Λ X : Π _ : Top''' Π x''' : * * λ alg : (ι alg : Top''' ∀ R : Π x''' : * * ∀ _ : [[Cast''' R] D'] ∀ _ : (ι o : ∀ x''' : * Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : * Π r : [R x'''] [[X β (λ x' : * x') r] x'''] = ih λ d' : * [d' alg]) ∀ x''' : * Π x'''' : [[F R] x'''] [[X β (λ x' : * x') λ alg' : * [[alg' (λ d' : * [d' alg'])] x'''']] x''']) [<ψ d X> { π alg , Λ R : Π x''' : * * Λ reveal : [[Cast''' R] D] <<ψ alg R> { Λ x' : * λ r : [R x'] [<<<<cast''' D> D'> c> x'> [<<<<cast''' R> D> reveal> x'> r]] , ρ β (λ x' : * x') λ x-x : * x-x x-x . = λ r : * [cast''' [cast''' r]] x-x β (λ r : * [cast''' [cast''' r]]) λ x-x : * x-x cast'''' . = cast'''' λ x' : * x' }> alg' . ∀ R : Π x''' : * * ∀ _ : [[Cast''' R] D] ∀ _ : (ι o : ∀ x''' : * Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : * Π r : [R x'''] [[X β (λ x' : * x') r] x'''] = ih λ d' : * [d' alg']) ∀ x''' : * Π x'''' : [[F R] x'''] [[X β (λ x' : * x') λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x'''']] x'''] }] x'' . ∀ X : Π _ : Top''' Π x''' : * * Π _ : (ι alg : Top''' ∀ R : Π x''' : * * ∀ _ : [[Cast''' R] D'] ∀ _ : (ι o : ∀ x''' : * Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : * Π r : [R x'''] [[X β (λ x'''' : * x'''') r] x'''] = ih λ d' : * [d' alg]) ∀ x''' : * Π x'''' : [[F R] x'''] [[X β (λ x''''' : * x''''') λ alg' : * [[alg' (λ d' : * [d' alg'])] x'''']] x''']) [[X x''] x] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d : * d x-x β (λ d : * d) λ x-x : * x-x cast'''' . = cast'''' λ x : * x }.
let inFixM''' := Λ F : Π _ : Π x : * * Π x : * * Λ fm : [RecFunctor''' F] <<<cast''' [[[FixMF''' F] fm] [[FixM''' F] fm]]> [[FixM''' F] fm]> <<recIn''' [[FixMF''' F] fm]> <<FixFmap''' F> fm>>>.
let outFixM''' := Λ F : Π _ : Π x : * * Π x : * * Λ fm : [RecFunctor''' F] <<<cast''' [[FixM''' F] fm]> [[[FixMF''' F] fm] [[FixM''' F] fm]]> <<recOut''' [[FixMF''' F] fm]> <<FixFmap''' F> fm>>>.
let inFix''' := Λ F : Π _ : Π x : * * Π x : * * Λ fm : [RecFunctor''' F] Λ x : * λ d : [[F [[FixM''' F] fm]] x] [<<<inFixM''' F> fm> x> { β (λ x' : * x') λ alg : * [[alg (λ d' : * [d' alg])] d] , Λ X : Π _ : Top''' Π x''' : * * λ alg : (ι alg : Top''' ∀ R : Π x''' : * * ∀ _ : [[Cast''' R] [[FixM''' F] fm]] ∀ _ : (ι o : ∀ x''' : * Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : * Π r : [R x'''] [[X β (λ x' : * x') r] x'''] = ih λ d' : * [d' alg]) ∀ x''' : * Π x'''' : [[F R] x'''] [[X β (λ x' : * x') λ alg' : * [[alg' (λ d' : * [d' alg'])] x'''']] x''']) [<[<<<ψ alg [[FixM''' F] fm]> { Λ x' : * λ d' : [[[FixM''' F] fm] x'] d' , ρ β (λ x' : * x') λ x-x : * x-x x-x . = λ d' : * d' x-x β (λ d' : * d') λ x-x : * x-x cast'''' . = cast'''' λ x' : * x' }> { Λ x' : * λ d' : [[[FixM''' F] fm] x'] [<ψ [<<<outFixM''' F> fm> x'> d'] (λ x'' : Top''' [F [[FixM''' F] fm]])> { β (λ x'' : * x'') λ e : * λ d'' : * d'' , Λ X' : Π x'''' : * * Λ reveal : [[Cast''' X'] [[FixM''' F] fm]] Λ p : (ι o : ∀ x'''' : * Π _ : [X' x''''] [[F X'] x''''] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) λ e : (ι ih : ∀ x'''' : * Π r : [X' x''''] [[(λ x'' : Top''' [F [[FixM''' F] fm]]) β (λ x'' : * x'') r] x''''] = ih λ d'' : * [d'' (λ e : * λ d''' : * d''')]) <<<cast''' [F X']> [F [[FixM''' F] fm]]> <<<fm X'> [[FixM''' F] fm]> reveal>> alg' . ∀ R : Π x'''' : * * ∀ _ : [[Cast''' R] [[FixM''' F] fm]] ∀ _ : (ι o : ∀ x'''' : * Π _ : [R x''''] [[F R] x''''] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) Π _ : (ι ih : ∀ x'''' : * Π r : [R x''''] [[(λ x'' : Top''' [F [[FixM''' F] fm]]) β (λ x'' : * x'') r] x''''] = ih λ d'' : * [d'' alg']) ∀ x'''' : * Π x''''' : [[F R] x''''] [[(λ x'' : Top''' [F [[FixM''' F] fm]]) β (λ x'' : * x'') λ alg'' : * [[alg'' (λ d'' : * [d'' alg''])] x''''']] x''''] }] , β (λ d' : * [[outFixM''' d'] (λ e : * λ d'' : * d'')]) λ d' : * [d' (λ e : * λ d'' : * d'')] o . = o λ d' : * [d' (λ p : * λ d'' : * d'')] }> { Λ x' : * λ d' : [[[FixM''' F] fm] x'] [<ψ [<<<outFixM''' F> fm> x'> d'] X> alg] , β (λ d' : * [[outFixM''' d'] alg]) λ d' : * [d' alg] ih . = ih λ d' : * [d' alg] }] x> d] x'' . ∀ X : Π _ : Top''' Π x''' : * * Π _ : (ι alg : Top''' ∀ R : Π x''' : * * ∀ _ : [[Cast''' R] [[FixM''' F] fm]] ∀ _ : (ι o : ∀ x''' : * Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : * Π r : [R x'''] [[X β (λ x'''' : * x'''') r] x'''] = ih λ d' : * [d' alg]) ∀ x''' : * Π x'''' : [[F R] x'''] [[X β (λ x''''' : * x''''') λ alg' : * [[alg' (λ d' : * [d' alg'])] x'''']] x''']) [[X x''] x] }].
let outFix''' := Λ F : Π _ : Π x : * * Π x : * * Λ fm : [RecFunctor''' F] Λ x : * λ x' : [[[FixM''' F] fm] x] [<ψ [<<<outFixM''' F> fm> x> x'] (λ x'' : Top''' [F [[FixM''' F] fm]])> { β (λ x'' : * x'') λ e : * λ d : * d , Λ R : Π x'''' : * * Λ c : [[Cast''' R] [[FixM''' F] fm]] Λ p : (ι o : ∀ x'''' : * Π _ : [R x''''] [[F R] x''''] = o λ d : * [d (λ p : * λ d' : * d')]) λ e : (ι ih : ∀ x'''' : * Π r : [R x''''] [[(λ x'' : Top''' [F [[FixM''' F] fm]]) β (λ x'' : * x'') r] x''''] = ih λ d : * [d (λ e : * λ d' : * d')]) <<<cast''' [F R]> [F [[FixM''' F] fm]]> <<<fm R> [[FixM''' F] fm]> c>> alg . ∀ R : Π x'''' : * * ∀ _ : [[Cast''' R] [[FixM''' F] fm]] ∀ _ : (ι o : ∀ x'''' : * Π _ : [R x''''] [[F R] x''''] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : ∀ x'''' : * Π r : [R x''''] [[(λ x'' : Top''' [F [[FixM''' F] fm]]) β (λ x'' : * x'') r] x''''] = ih λ d : * [d alg]) ∀ x'''' : * Π x''''' : [[F R] x''''] [[(λ x'' : Top''' [F [[FixM''' F] fm]]) β (λ x'' : * x'') λ alg' : * [[alg' (λ d : * [d alg'])] x''''']] x''''] }].
let IndFixM'''''' := Λ F : Π _ : Π x : * * Π x : * * Λ fm : [RecFunctor''' F] Λ x : * λ d : [[[FixM''' F] fm] x] Λ Q : Π x' : * Π _ : [[[FixM''' F] fm] x'] * λ alg : (ι alg : Top''' ∀ R : Π x' : * * ∀ reveal : [[Cast''' R] [[FixM''' F] fm]] ∀ _ : (ι o : ∀ x' : * Π _ : [R x'] [[F R] x'] = o outFix''') Π _ : (ι ih : ∀ x' : * Π r : [R x'] [[Q x'] [<<<<cast''' R> [[FixM''' F] fm]> reveal> x'> r]] = ih λ d' : * [d' alg]) ∀ x' : * Π x'' : [[F R] x'] [[Q x'] [<<<inFix''' F> fm> x'> [<<<<cast''' [F R]> [F [[FixM''' F] fm]]> <<<fm R> [[FixM''' F] fm]> reveal>> x'> x'']]]) <<[<ψ [<<<outFixM''' F> fm> x> d] (λ d' : Top''' λ x' : * ∀ d'' : [[[FixM''' F] fm] x'] ∀ e : = d'' d' [[Q x'] φ e d'' d'])> { β (λ x' : * x') alg , Λ R : Π x''' : * * Λ reveal : [[Cast''' R] [[FixM''' F] fm]] Λ out : (ι o : ∀ x''' : * Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) λ ih : (ι ih : ∀ x''' : * Π r : [R x'''] [[(λ d' : Top''' λ x' : * ∀ d'' : [[[FixM''' F] fm] x'] ∀ e : = d'' d' [[Q x'] φ e d'' d']) β (λ x' : * x') r] x'''] = ih λ d' : * [d' alg]) Λ x' : * λ d' : [[F R] x'] Λ d'' : [[[FixM''' F] fm] x'] Λ e : = d'' λ alg'' : * [[alg'' (λ d''' : * [d''' alg''])] d'] [<[<<<ψ alg R> reveal> out> { Λ x'' : * λ r : [R x''] <<[<π ih x''> r] [<<<<cast''' R> [[FixM''' F] fm]> reveal> x''> r]> ρ β r λ x-x : * x-x x-x . = [cast''' r] x-x β [cast''' r] λ x-x : * x-x> , ψ ih ih' . = ih' λ d''' : * [d''' alg] }] x'> d'] alg' . ∀ R : Π x''' : * * ∀ _ : [[Cast''' R] [[FixM''' F] fm]] ∀ _ : (ι o : ∀ x''' : * Π _ : [R x'''] [[F R] x'''] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : ∀ x''' : * Π r : [R x'''] [[(λ d' : Top''' λ x' : * ∀ d'' : [[[FixM''' F] fm] x'] ∀ e : = d'' d' [[Q x'] φ e d'' d']) β (λ x' : * x') r] x'''] = ih λ d' : * [d' alg']) ∀ x''' : * Π x'''' : [[F R] x'''] [[(λ d' : Top''' λ x' : * ∀ d'' : [[[FixM''' F] fm] x'] ∀ e : = d'' d' [[Q x'] φ e d'' d']) β (λ x' : * x') λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x'''']] x'''] }] d> ρ β [outFixM''' d] λ x-x : * x-x x-x . = d x-x β d λ x-x : * x-x>.
let IndFixM''''''' := Λ F : Π _ : Π x : * * Π x : * * Λ fm : [RecFunctor''' F] Λ x : * λ d : [[[FixM''' F] fm] x] Λ Q : Π x' : * Π _ : [[[FixM''' F] fm] x'] * λ alg : ∀ R : Π _ : * * ∀ reveal : [[Cast''' R] [[FixM''' F] fm]] ∀ _ : (ι o : ∀ x' : * Π _ : [R x'] [[F R] x'] = o outFix''') Π _ : ∀ x' : * Π r : [R x'] [[Q x'] [<<<<cast''' R> [[FixM''' F] fm]> reveal> x'> r]] ∀ x' : * Π x'' : [[F R] x'] [[Q x'] [<<<inFix''' F> fm> x'> [<<<<cast''' [F R]> [F [[FixM''' F] fm]]> <<<fm R> [[FixM''' F] fm]> reveal>> x'> x'']]] [<[<<<IndFixM'''''' F> fm> x> d] Q> { β (λ x' : * x') alg , Λ R : Π x'' : * * Λ rvl : [[Cast''' R] [[FixM''' F] fm]] Λ out : (ι o : ∀ x'' : * Π _ : [R x''] [[F R] x''] = o outFix''') λ ih : (ι ih : ∀ x'' : * Π r : [R x''] [[Q x''] [<<<<cast''' R> [[FixM''' F] fm]> rvl> x''> r]] = ih λ d'' : * [d'' alg]) [<<<alg R> rvl> out> π ih] alg' . ∀ R : Π x'' : * * ∀ reveal : [[Cast''' R] [[FixM''' F] fm]] ∀ _ : (ι o : ∀ x'' : * Π _ : [R x''] [[F R] x''] = o outFix''') Π _ : (ι ih : ∀ x'' : * Π r : [R x''] [[Q x''] [<<<<cast''' R> [[FixM''' F] fm]> reveal> x''> r]] = ih λ d'' : * [d'' alg']) ∀ x'' : * Π x''' : [[F R] x''] [[Q x''] [<<<inFix''' F> fm> x''> [<<<<cast''' [F R]> [F [[FixM''' F] fm]]> <<<fm R> [[FixM''' F] fm]> reveal>> x''> x''']]] }].
let lambek''' := Λ F : Π _ : Π x : * * Π x : * * Λ fm : [RecFunctor''' F] Λ x : * λ d : [[[FixM''' F] fm] x] [<[<<<IndFixM''''''' F> fm> x> d] (λ x' : * λ d' : [[[FixM''' F] fm] x'] = [inFix''' [outFix''' d']] d')> (Λ R : Π _ : * * Λ rvl : [[Cast''' R] [[FixM''' F] fm]] Λ out : (ι o : ∀ x'' : * Π _ : [R x''] [[F R] x''] = o outFix''') λ ih : ∀ x'' : * Π r : [R x''] = [inFix''' [outFix''' [cast''' r]]] [cast''' r] Λ x' : * λ d' : [[F R] x'] ρ β [inFix''' [cast''' d']] λ x-x : * x-x x-x . = [inFix''' [outFix''' [inFix''' [cast''' d']]]] x-x β [inFix''' [outFix''' [inFix''' [cast''' d']]]] λ x-x : * x-x)].
let ExprF := λ Expr : Π x : * * λ x : * (ι x' : = λ x' : * x' λ x' : * x' ∀ X : Π x'' : * Π _ : = λ x''' : * x''' λ x''' : * x''' * Π _ : Π x'' : Nat [[X Nat] β (λ x''' : * x''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr x'']] Π _ : Π x'' : Bool [[X Bool] β (λ x''' : * x''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x'']] Π _ : Π x'' : [Expr Nat] Π x''' : [Expr Nat] [[X Nat] β (λ x'''' : * x'''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [[addExpr x''] x''']] Π _ : Π x'' : [Expr Nat] Π x''' : [Expr Nat] [[X Bool] β (λ x'''' : * x'''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [[eqExpr x''] x''']] [[X x] x']) : Π _ : Π _ : * * Π x : * *.
let ExprIndF := Λ Expr : Π x : * * Λ x : * λ x' : [[ExprF Expr] x] Λ X : Π x'' : * Π _ : [[ExprF Expr] x''] * λ nExpr : Π x'' : Nat [[X Nat] { β (λ x'''' : * x'''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr x''] , Λ X' : Π x''''' : * Π _ : = λ x'''''' : * x'''''' λ x'''''' : * x'''''' * λ nExpr : Π x''''' : Nat [[X' Nat] β (λ x''''''' : * x''''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr x''''']] λ bExpr : Π x''''' : Bool [[X' Bool] β (λ x''''''' : * x''''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x''''']] λ addExpr : Π x''''' : [Expr Nat] Π x'''''' : [Expr Nat] [[X' Nat] β (λ x'''''''' : * x'''''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[addExpr x'''''] x'''''']] λ eqExpr : Π x''''' : [Expr Nat] Π x'''''' : [Expr Nat] [[X' Bool] β (λ x'''''''' : * x'''''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[eqExpr x'''''] x'''''']] [nExpr x''] x'''' . ∀ X' : Π x''''' : * Π _ : = λ x'''''' : * x'''''' λ x'''''' : * x'''''' * Π _ : Π x''''' : Nat [[X' Nat] β (λ x'''''' : * x'''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr x''''']] Π _ : Π x''''' : Bool [[X' Bool] β (λ x'''''' : * x'''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x''''']] Π _ : Π x''''' : [Expr Nat] Π x'''''' : [Expr Nat] [[X' Nat] β (λ x''''''' : * x''''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [[addExpr x'''''] x'''''']] Π _ : Π x''''' : [Expr Nat] Π x'''''' : [Expr Nat] [[X' Bool] β (λ x''''''' : * x''''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [[eqExpr x'''''] x'''''']] [[X' Nat] x''''] }] λ bExpr : Π x'' : Bool [[X Bool] { β (λ x'''' : * x'''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x''] , Λ X' : Π x''''' : * Π _ : = λ x'''''' : * x'''''' λ x'''''' : * x'''''' * λ nExpr' : Π x''''' : Nat [[X' Nat] β (λ x''''''' : * x''''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr' x''''']] λ bExpr : Π x''''' : Bool [[X' Bool] β (λ x''''''' : * x''''''') λ nExpr'' : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x''''']] λ addExpr : Π x''''' : [Expr Nat] Π x'''''' : [Expr Nat] [[X' Nat] β (λ x'''''''' : * x'''''''') λ nExpr'' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[addExpr x'''''] x'''''']] λ eqExpr : Π x''''' : [Expr Nat] Π x'''''' : [Expr Nat] [[X' Bool] β (λ x'''''''' : * x'''''''') λ nExpr'' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[eqExpr x'''''] x'''''']] [bExpr x''] x'''' . ∀ X' : Π x''''' : * Π _ : = λ x'''''' : * x'''''' λ x'''''' : * x'''''' * Π _ : Π x''''' : Nat [[X' Nat] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr' x''''']] Π _ : Π x''''' : Bool [[X' Bool] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x''''']] Π _ : Π x''''' : [Expr Nat] Π x'''''' : [Expr Nat] [[X' Nat] β (λ x''''''' : * x''''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [[addExpr x'''''] x'''''']] Π _ : Π x''''' : [Expr Nat] Π x'''''' : [Expr Nat] [[X' Bool] β (λ x''''''' : * x''''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [[eqExpr x'''''] x'''''']] [[X' Bool] x''''] }] λ addExpr : Π x'' : [Expr Nat] Π x''' : [Expr Nat] [[X Nat] { β (λ x''''' : * x''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[addExpr x''] x'''] , Λ X' : Π x'''''' : * Π _ : = λ x''''''' : * x''''''' λ x''''''' : * x''''''' * λ nExpr' : Π x'''''' : Nat [[X' Nat] β (λ x'''''''' : * x'''''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [nExpr' x'''''']] λ bExpr' : Π x'''''' : Bool [[X' Bool] β (λ x'''''''' : * x'''''''') λ nExpr'' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [bExpr' x'''''']] λ addExpr : Π x'''''' : [Expr Nat] Π x''''''' : [Expr Nat] [[X' Nat] β (λ x''''''''' : * x''''''''') λ nExpr'' : * λ bExpr'' : * λ addExpr : * λ eqExpr : * [[addExpr x''''''] x''''''']] λ eqExpr : Π x'''''' : [Expr Nat] Π x''''''' : [Expr Nat] [[X' Bool] β (λ x''''''''' : * x''''''''') λ nExpr'' : * λ bExpr'' : * λ addExpr' : * λ eqExpr : * [[eqExpr x''''''] x''''''']] [[addExpr x''] x'''] x''''' . ∀ X' : Π x'''''' : * Π _ : = λ x''''''' : * x''''''' λ x''''''' : * x''''''' * Π _ : Π x'''''' : Nat [[X' Nat] β (λ x''''''' : * x''''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [nExpr' x'''''']] Π _ : Π x'''''' : Bool [[X' Bool] β (λ x''''''' : * x''''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [bExpr' x'''''']] Π _ : Π x'''''' : [Expr Nat] Π x''''''' : [Expr Nat] [[X' Nat] β (λ x'''''''' : * x'''''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[addExpr x''''''] x''''''']] Π _ : Π x'''''' : [Expr Nat] Π x''''''' : [Expr Nat] [[X' Bool] β (λ x'''''''' : * x'''''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[eqExpr x''''''] x''''''']] [[X' Nat] x'''''] }] λ eqExpr : Π x'' : [Expr Nat] Π x''' : [Expr Nat] [[X Bool] { β (λ x''''' : * x''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[eqExpr x''] x'''] , Λ X' : Π x'''''' : * Π _ : = λ x''''''' : * x''''''' λ x''''''' : * x''''''' * λ nExpr' : Π x'''''' : Nat [[X' Nat] β (λ x'''''''' : * x'''''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [nExpr' x'''''']] λ bExpr' : Π x'''''' : Bool [[X' Bool] β (λ x'''''''' : * x'''''''') λ nExpr'' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [bExpr' x'''''']] λ addExpr' : Π x'''''' : [Expr Nat] Π x''''''' : [Expr Nat] [[X' Nat] β (λ x''''''''' : * x''''''''') λ nExpr'' : * λ bExpr'' : * λ addExpr' : * λ eqExpr : * [[addExpr' x''''''] x''''''']] λ eqExpr : Π x'''''' : [Expr Nat] Π x''''''' : [Expr Nat] [[X' Bool] β (λ x''''''''' : * x''''''''') λ nExpr'' : * λ bExpr'' : * λ addExpr'' : * λ eqExpr : * [[eqExpr x''''''] x''''''']] [[eqExpr x''] x'''] x''''' . ∀ X' : Π x'''''' : * Π _ : = λ x''''''' : * x''''''' λ x''''''' : * x''''''' * Π _ : Π x'''''' : Nat [[X' Nat] β (λ x''''''' : * x''''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [nExpr' x'''''']] Π _ : Π x'''''' : Bool [[X' Bool] β (λ x''''''' : * x''''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [bExpr' x'''''']] Π _ : Π x'''''' : [Expr Nat] Π x''''''' : [Expr Nat] [[X' Nat] β (λ x'''''''' : * x'''''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[addExpr' x''''''] x''''''']] Π _ : Π x'''''' : [Expr Nat] Π x''''''' : [Expr Nat] [[X' Bool] β (λ x'''''''' : * x'''''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[eqExpr x''''''] x''''''']] [[X' Bool] x'''''] }] <<[[[[<ψ x' (λ x'' : * λ x''' : = λ x''' : * x''' λ x''' : * x''' ∀ y : [[ExprF Expr] x''] ∀ e : = y x''' [[X x''] φ e y x'''])> (λ x'' : Nat Λ y : [[ExprF Expr] Nat] Λ e : = y λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr' : * [nExpr' x''] [nExpr x''])] (λ x'' : Bool Λ y : [[ExprF Expr] Bool] Λ e : = y λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr' : * [bExpr' x''] [bExpr x''])] (λ x'' : [Expr Nat] λ x''' : [Expr Nat] Λ y : [[ExprF Expr] Nat] Λ e : = y λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr' : * [[addExpr' x''] x'''] [[addExpr x''] x'''])] (λ x'' : [Expr Nat] λ x''' : [Expr Nat] Λ y : [[ExprF Expr] Bool] Λ e : = y λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr' : * [[eqExpr' x''] x'''] [[eqExpr x''] x'''])] x'> ρ β x' λ x-x : * x-x x-x . = x' x-x β x' λ x-x : * x-x>.
let ExprFmap := Λ A : Π _ : * * Λ B : Π _ : * * Λ c : [[Cast''' A] B] { Λ x : * λ x' : [[ExprF A] x] { π x' , Λ X : Π x'''' : * Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * λ nExpr : Π x'''' : Nat [[X Nat] β (λ x'''''' : * x'''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr x'''']] λ bExpr : Π x'''' : Bool [[X Bool] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x'''']] λ addExpr : Π x'''' : [B Nat] Π x''''' : [B Nat] [[X Nat] β (λ x''''''' : * x''''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[addExpr x''''] x''''']] λ eqExpr : Π x'''' : [B Nat] Π x''''' : [B Nat] [[X Bool] β (λ x''''''' : * x''''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[eqExpr x''''] x''''']] [[[[<ψ x' X> (λ x'' : Nat [nExpr x''])] (λ x'' : Bool [bExpr x''])] (λ x'' : [A Nat] λ x''' : [A Nat] [[addExpr [<<<<cast''' A> B> c> Nat> x'']] [<<<<cast''' A> B> c> Nat> x''']])] (λ x'' : [A Nat] λ x''' : [A Nat] [[eqExpr [<<<<cast''' A> B> c> Nat> x'']] [<<<<cast''' A> B> c> Nat> x''']])] x''' . ∀ X : Π x'''' : * Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * Π _ : Π x'''' : Nat [[X Nat] β (λ x''''' : * x''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr x'''']] Π _ : Π x'''' : Bool [[X Bool] β (λ x''''' : * x''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x'''']] Π _ : Π x'''' : [B Nat] Π x''''' : [B Nat] [[X Nat] β (λ x'''''' : * x'''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [[addExpr x''''] x''''']] Π _ : Π x'''' : [B Nat] Π x''''' : [B Nat] [[X Bool] β (λ x'''''' : * x'''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [[eqExpr x''''] x''''']] [[X x] x'''] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ x' : * x' x-x β (λ x' : * x') λ x-x : * x-x cast'''' . = cast'''' λ x : * x }.
let Expr := [[FixM''' ExprF] ExprFmap] : Π _ : * *.
let Is-Expr := λ X : Π x : * * ∀ Y : * Π _ : Π _ : (ι i : ∀ x : * Π _ : [X x] [Expr x] = i λ x : * x) Π _ : (ι i : ∀ x : * Π _ : [X x] [[ExprF X] x] = i outFix''') Y Y : Π _ : Π _ : * * *.
let is-Expr := Λ Y : * λ f : Π _ : (ι i : ∀ x : * Π _ : [Expr x] [Expr x] = i λ x : * x) Π _ : (ι i : ∀ x : * Π _ : [Expr x] [[ExprF Expr] x] = i outFix''') Y [[f { Λ x : * λ x' : [Expr x] x' , β (λ x' : * x') λ x : * x i . = i λ x : * x }] { <<outFix''' ExprF> ExprFmap> , β outFix''' outFix''' i . = i outFix''' }].
let to-Expr := Λ Y : Π x : * * Λ mu : [Is-Expr Y] φ ψ [<mu (ι i : ∀ x : * Π _ : [Y x] [Expr x] = i λ x : * x)> (λ c : (ι i : ∀ x : * Π _ : [Y x] [Expr x] = i λ x : * x) λ o : (ι i : ∀ x : * Π _ : [Y x] [[ExprF Y] x] = i outFix''') c)] π [<mu (ι i : ∀ x : * Π _ : [Y x] [Expr x] = i λ x : * x)> (λ c : (ι i : ∀ x : * Π _ : [Y x] [Expr x] = i λ x : * x) λ o : (ι i : ∀ x : * Π _ : [Y x] [[ExprF Y] x] = i outFix''') c)] λ x : * x.
let nExpr := λ x' : Nat [<<<inFix''' ExprF> ExprFmap> Nat> { β (λ x'' : * x'') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr x'] , Λ X : Π x''' : * Π _ : = λ x'''' : * x'''' λ x'''' : * x'''' * λ nExpr : Π x''' : Nat [[X Nat] β (λ x''''' : * x''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr x''']] λ bExpr : Π x''' : Bool [[X Bool] β (λ x''''' : * x''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x''']] λ addExpr : Π x''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Nat] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[addExpr x'''] x'''']] λ eqExpr : Π x''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Bool] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[eqExpr x'''] x'''']] [nExpr x'] x'' . ∀ X : Π x''' : * Π _ : = λ x'''' : * x'''' λ x'''' : * x'''' * Π _ : Π x''' : Nat [[X Nat] β (λ x'''' : * x'''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr x''']] Π _ : Π x''' : Bool [[X Bool] β (λ x'''' : * x'''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x''']] Π _ : Π x''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Nat] β (λ x''''' : * x''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [[addExpr x'''] x'''']] Π _ : Π x''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Bool] β (λ x''''' : * x''''') λ nExpr : * λ bExpr : * λ addExpr : * λ eqExpr : * [[eqExpr x'''] x'''']] [[X Nat] x''] }].
let bExpr := λ x' : Bool [<<<inFix''' ExprF> ExprFmap> Bool> { β (λ x'' : * x'') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x'] , Λ X : Π x''' : * Π _ : = λ x'''' : * x'''' λ x'''' : * x'''' * λ nExpr' : Π x''' : Nat [[X Nat] β (λ x''''' : * x''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr' x''']] λ bExpr : Π x''' : Bool [[X Bool] β (λ x''''' : * x''''') λ nExpr'' : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x''']] λ addExpr : Π x''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Nat] β (λ x'''''' : * x'''''') λ nExpr'' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[addExpr x'''] x'''']] λ eqExpr : Π x''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Bool] β (λ x'''''' : * x'''''') λ nExpr'' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[eqExpr x'''] x'''']] [bExpr x'] x'' . ∀ X : Π x''' : * Π _ : = λ x'''' : * x'''' λ x'''' : * x'''' * Π _ : Π x''' : Nat [[X Nat] β (λ x'''' : * x'''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [nExpr' x''']] Π _ : Π x''' : Bool [[X Bool] β (λ x'''' : * x'''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [bExpr x''']] Π _ : Π x''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Nat] β (λ x''''' : * x''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [[addExpr x'''] x'''']] Π _ : Π x''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Bool] β (λ x''''' : * x''''') λ nExpr' : * λ bExpr : * λ addExpr : * λ eqExpr : * [[eqExpr x'''] x'''']] [[X Bool] x''] }].
let addExpr := λ x' : [Expr Nat] λ x'' : [Expr Nat] [<<<inFix''' ExprF> ExprFmap> Nat> { β (λ x''' : * x''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[addExpr x'] x''] , Λ X : Π x'''' : * Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * λ nExpr' : Π x'''' : Nat [[X Nat] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [nExpr' x'''']] λ bExpr' : Π x'''' : Bool [[X Bool] β (λ x'''''' : * x'''''') λ nExpr'' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [bExpr' x'''']] λ addExpr : Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x''''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Nat] β (λ x''''''' : * x''''''') λ nExpr'' : * λ bExpr'' : * λ addExpr : * λ eqExpr : * [[addExpr x''''] x''''']] λ eqExpr : Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x''''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Bool] β (λ x''''''' : * x''''''') λ nExpr'' : * λ bExpr'' : * λ addExpr' : * λ eqExpr : * [[eqExpr x''''] x''''']] [[addExpr x'] x''] x''' . ∀ X : Π x'''' : * Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * Π _ : Π x'''' : Nat [[X Nat] β (λ x''''' : * x''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [nExpr' x'''']] Π _ : Π x'''' : Bool [[X Bool] β (λ x''''' : * x''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [bExpr' x'''']] Π _ : Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x''''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Nat] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[addExpr x''''] x''''']] Π _ : Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x''''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Bool] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr' : * λ addExpr : * λ eqExpr : * [[eqExpr x''''] x''''']] [[X Nat] x'''] }].
let eqExpr := λ x' : [Expr Nat] λ x'' : [Expr Nat] [<<<inFix''' ExprF> ExprFmap> Bool> { β (λ x''' : * x''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[eqExpr x'] x''] , Λ X : Π x'''' : * Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * λ nExpr' : Π x'''' : Nat [[X Nat] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [nExpr' x'''']] λ bExpr' : Π x'''' : Bool [[X Bool] β (λ x'''''' : * x'''''') λ nExpr'' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [bExpr' x'''']] λ addExpr' : Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x''''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Nat] β (λ x''''''' : * x''''''') λ nExpr'' : * λ bExpr'' : * λ addExpr' : * λ eqExpr : * [[addExpr' x''''] x''''']] λ eqExpr : Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x''''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Bool] β (λ x''''''' : * x''''''') λ nExpr'' : * λ bExpr'' : * λ addExpr'' : * λ eqExpr : * [[eqExpr x''''] x''''']] [[eqExpr x'] x''] x''' . ∀ X : Π x'''' : * Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * Π _ : Π x'''' : Nat [[X Nat] β (λ x''''' : * x''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [nExpr' x'''']] Π _ : Π x'''' : Bool [[X Bool] β (λ x''''' : * x''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [bExpr' x'''']] Π _ : Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x''''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Nat] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[addExpr' x''''] x''''']] Π _ : Π x'''' : [[[FixM''' ExprF] ExprFmap] Nat] Π x''''' : [[[FixM''' ExprF] ExprFmap] Nat] [[X Bool] β (λ x'''''' : * x'''''') λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr : * [[eqExpr x''''] x''''']] [[X Bool] x'''] }].
let eqNat := λ m : Nat [<[<<IndFixM NatF> NatFmap> m] (λ _ : Nat Π _ : Nat Bool)> (Λ Type-eq : * Λ to : [[Cast Type-eq] [[FixM NatF] NatFmap]] Λ out : (ι o : Π _ : Type-eq [NatF Type-eq] = o outFix) λ eq : Π _ : Type-eq Π _ : Nat Bool λ y : [NatF Type-eq] { isType-eq = Λ Y : * λ x : Π _ : (ι i : Π _ : Type-eq Nat = i λ x : * x) Π _ : (ι i : Π _ : Type-eq [NatF Type-eq] = i outFix) Y [[x to] out] } - <<[[<φ ρ β y λ x-x : * x-x x-x . = [NatIndF y] x-x β [NatIndF y] λ x-x : * x-x [<NatIndF Type-eq> y] y (λ y'' : [NatF Type-eq] ∀ y''' : Nat ∀ _ : = [inFix y''] y''' Π _ : Nat Bool)> (Λ y'' : Nat Λ e : = [inFix (λ zero' : * λ suc' : * zero')] y'' ρ σ e x . (Π _ : Nat Bool) λ n : Nat <<[[<φ ρ β [outFix n] λ x-x : * x-x x-x . = [NatIndF [outFix n]] x-x β [NatIndF [outFix n]] λ x-x : * x-x [<NatIndF Nat> [<<outFix NatF> NatFmap> n]] [outFix n] (λ y' : [NatF Nat] ∀ y''' : Nat ∀ _ : = [inFix y'] y''' Bool)> (Λ y' : Nat Λ e' : = [inFix (λ zero' : * λ suc' : * zero')] y' ρ σ e' x . Bool tt)] (λ x' : Nat Λ y' : Nat Λ e' : = [inFix (λ zero' : * λ suc' : * [suc' x'])] y' ρ σ e' x . Bool ff)] n> [<<lambek NatF> NatFmap> n]>)] (λ m' : Type-eq Λ y'' : Nat Λ e : = [inFix (λ zero' : * λ suc' : * [suc' m'])] y'' ρ σ e x . (Π _ : Nat Bool) λ n : Nat <<[[<φ ρ β [outFix n] λ x-x : * x-x x-x . = [NatIndF [outFix n]] x-x β [NatIndF [outFix n]] λ x-x : * x-x [<NatIndF Nat> [<<outFix NatF> NatFmap> n]] [outFix n] (λ y' : [NatF Nat] ∀ y''' : Nat ∀ _ : = [inFix y'] y''' Bool)> (Λ y' : Nat Λ e' : = [inFix (λ zero' : * λ suc' : * zero')] y' ρ σ e' x . Bool ff)] (λ n' : Nat Λ y' : Nat Λ e' : = [inFix (λ zero' : * λ suc' : * [suc' n'])] y' ρ σ e' x . Bool [[eq m'] n'])] n> [<<lambek NatF> NatFmap> n]>)] [<<inFix NatF> NatFmap> [<<<cast [NatF Type-eq]> [NatF [[FixM NatF] NatFmap]]> <<<NatFmap Type-eq> Nat> [<isType-eq [[Cast Type-eq] Nat]> (λ to' : (ι i : Π _ : Type-eq Nat = i λ x : * x) λ out' : (ι i : Π _ : Type-eq [NatF Type-eq] = i outFix) to')]>> y]]> [<<lambek NatF> NatFmap> [<<inFix NatF> NatFmap> [<<<cast [NatF Type-eq]> [NatF [[FixM NatF] NatFmap]]> <<<NatFmap Type-eq> Nat> [<isType-eq [[Cast Type-eq] Nat]> (λ to' : (ι i : Π _ : Type-eq Nat = i λ x : * x) λ out' : (ι i : Π _ : Type-eq [NatF Type-eq] = i outFix) to')]>> y]]]>)].
let eval := Λ X : * λ e : [Expr X] [<[<<<IndFixM''''''' ExprF> ExprFmap> X> e] (λ X' : * λ x : [Expr X'] X')> (Λ Type-eval : Π _ : * * Λ to : [[Cast''' Type-eval] [[FixM''' ExprF] ExprFmap]] Λ out : (ι o : ∀ x' : * Π _ : [Type-eval x'] [[ExprF Type-eval] x'] = o outFix''') λ eval : ∀ x' : * Π _ : [Type-eval x'] x' Λ x : * λ y : [[ExprF Type-eval] x] { isType-eval = Λ Y : * λ x' : Π _ : (ι i : ∀ x' : * Π _ : [Type-eval x'] [Expr x'] = i λ x' : * x') Π _ : (ι i : ∀ x' : * Π _ : [Type-eval x'] [[ExprF Type-eval] x'] = i outFix''') Y [[x' to] out] } - <<[[[[<φ ρ β y λ x-x : * x-x x-x . = [ExprIndF y] x-x β [ExprIndF y] λ x-x : * x-x [<<ExprIndF Type-eval> x> y] y (λ x'' : * λ y'' : [[ExprF Type-eval] x''] ∀ y''' : [Expr x''] ∀ _ : = [inFix''' y''] y''' x'')> (λ n : Nat Λ y'' : [Expr Nat] Λ e' : = [inFix''' (λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr' : * [nExpr' n])] y'' ρ σ e' x' . Nat n)] (λ b : Bool Λ y'' : [Expr Bool] Λ e' : = [inFix''' (λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr' : * [bExpr' b])] y'' ρ σ e' x' . Bool b)] (λ m : [Type-eval Nat] λ n : [Type-eval Nat] Λ y'' : [Expr Nat] Λ e' : = [inFix''' (λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr' : * [[addExpr' m] n])] y'' ρ σ e' x' . Nat [[add [<eval Nat> m]] [<eval Nat> n]])] (λ m : [Type-eval Nat] λ n : [Type-eval Nat] Λ y'' : [Expr Bool] Λ e' : = [inFix''' (λ nExpr' : * λ bExpr' : * λ addExpr' : * λ eqExpr' : * [[eqExpr' m] n])] y'' ρ σ e' x' . Bool [[eqNat [<eval Nat> m]] [<eval Nat> n]])] [<<<inFix''' ExprF> ExprFmap> x> [<<<<cast''' [ExprF Type-eval]> [ExprF [[FixM''' ExprF] ExprFmap]]> <<<ExprFmap Type-eval> Expr> [<isType-eval [[Cast''' Type-eval] Expr]> (λ to' : (ι i : ∀ x' : * Π _ : [Type-eval x'] [Expr x'] = i λ x' : * x') λ out' : (ι i : ∀ x' : * Π _ : [Type-eval x'] [[ExprF Type-eval] x'] = i outFix''') to')]>> x> y]]> [<<<lambek''' ExprF> ExprFmap> x> [<<<inFix''' ExprF> ExprFmap> x> [<<<<cast''' [ExprF Type-eval]> [ExprF [[FixM''' ExprF] ExprFmap]]> <<<ExprFmap Type-eval> Expr> [<isType-eval [[Cast''' Type-eval] Expr]> (λ to' : (ι i : ∀ x' : * Π _ : [Type-eval x'] [Expr x'] = i λ x' : * x') λ out' : (ι i : ∀ x' : * Π _ : [Type-eval x'] [[ExprF Type-eval] x'] = i outFix''') to')]>> x> y]]]>)].
