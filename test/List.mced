-- the definition of List is in Induction.mced
let length := Λ X : * [[<<inductionList X> λ _ : [List X] Nat> zero] λ x : X λ xs : [List X] λ n : Nat [suc n]] : ∀ X : * Π _ : [List X] Nat.

let nilLength := Λ X : * β zero zero : ∀ X : * = zero [<length X> <nil X>].

let isNil := Λ X : * [[<<inductionList X> λ _ : [List X] Bool> true] λ _ : X λ _ : [List X] λ _ : Bool false] : ∀ X : * Π _ : [List X] Bool.

let listEq := Λ X : * λ eqX : Π _ : X Π _ : X Bool [[<<inductionList X> λ _ : [List X] Π _ : [List X] Bool> <isNil X>] λ x : X λ xs : [List X] λ rec : Π _ : [List X] Bool [[<<inductionList X> λ _ : [List X] Bool> false] λ y : X λ ys : [List X] λ _ : Bool [[and [[eqX x] y]] [rec ys]]]] : ∀ X : * Π eqX : Π _ : X Π _ : X Bool Π _ : [List X] Π _ : [List X] Bool.

let pureList := Λ X : * λ x : X [[<cons X> x] <nil X>] : ∀ X : * Π _ : X [List X].
let app := Λ X : * λ l1 : [List X] λ l2 : [List X] [[[<<inductionList X> λ _ : [List X] [List X]> l2] λ x : X λ _ : [List X] λ rec : [List X] [[<cons X> x] rec]] l1] : ∀ X : * Π _ : [List X] Π _ : [List X] [List X].
let snoc := Λ X : * λ x : X λ xs : [List X] [[<app X> xs] [<pureList X> x]] : ∀ X : * Π _ : X Π _ : [List X] [List X].
let reverse := Λ X : * [[<<inductionList X> λ _ : [List X] [List X]> <nil X>] λ x : X λ _ : [List X] λ rec : [List X] [[<snoc X> x] rec]] : ∀ X : * Π _ : [List X] [List X].

let filter := Λ X : * λ f : Π _ : X Bool [[<<inductionList X> λ _ : [List X] [List X]> <nil X>] λ x : X λ _ : [List X] λ rec : [List X] [[[<ifthenelse [List X]> [f x]] [[<cons X> x] rec]] rec]] : ∀ X : * Π f : Π _ : X Bool Π _ : [List X] [List X].

let foldl := Λ A : * Λ B : * λ f : (Π _ : B Π _ : A B)
  [[<<inductionList A> λ _ : [List A] Π _ : B B>
  λ b : B b]
  λ a : A λ as : [List A] λ rec : Π _ : B B λ b : B [[f [rec b]] a]].

let map := Λ X : * Λ Y : * λ f : Π _ : X Y [[<<inductionList X> λ _ : [List X] [List Y]> <nil Y>] λ x : X λ _ : [List X] λ rec : [List Y] [[<cons Y> [f x]] rec]].

let intersperse :=
  Λ X : * λ x : X λ l : [List X] [[[<<inductionList X> λ _ : [List X] [List X]> <nil X>]
    λ x' : X λ l' : [List X] λ rec : [List X]
      [[[<ifthenelse [List X]> [<isNil X> l']] l] [[<cons X> x'] [[<cons X> x] rec]]]] l].
