--------------------------------------------------------------------------------
-- Generating indices from Nats
--------------------------------------------------------------------------------

let consDecToIndex' (i : init$index') (d : Dec) : init$index' :=
  (d ?(Π _ : init$index'. init$index')
    init$index'$0_index'_ init$index'$1_index'_ init$index'$2_index'_ init$index'$3_index'_ init$index'$4_index'_
    init$index'$5_index'_ init$index'$6_index'_ init$index'$7_index'_ init$index'$8_index'_ init$index'$9_index'_) i.

let consDecToIndex (i : init$index') (d : Dec) : init$index :=
  (d ?(Π _ : init$index'. init$index)
    init$index$0_index'_ init$index$1_index'_ init$index$2_index'_ init$index$3_index'_ init$index$4_index'_
    init$index$5_index'_ init$index$6_index'_ init$index$7_index'_ init$index$8_index'_ init$index$9_index'_) i.

let indexToIndex' (i : init$index) : init$index' :=
  i ?init$index'
    init$index'$0_index'_ init$index'$1_index'_ init$index'$2_index'_ init$index'$3_index'_ init$index'$4_index'_
    init$index'$5_index'_ init$index'$6_index'_ init$index'$7_index'_ init$index'$8_index'_ init$index'$9_index'_.

let digitListToIndex' (l : List Dec) : init$index' := foldl ?Dec ?init$index' consDecToIndex' l init$index'$.
let digitListToIndex : Π _ : List Dec. init$index :=
  recursionList ?Dec ?init$index
    (init$index$0_index'_ init$index'$)
    (λ d : Dec. λ ds : List Dec. λ _ : init$index. consDecToIndex (digitListToIndex' ds) d).

let natToIndex (n : Nat) : init$index := digitListToIndex (natToDecList n).
let natToVar (n : Nat) : Term := varTerm (init$var$_index_ (natToIndex n)).
