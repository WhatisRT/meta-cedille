--------------------------------------------------------------------------------
-- Provides functions to verify if a term is of the form n n1 ... nk for some
-- names. This is used when we define a type `T A1 ... Ak` to find out where a
-- type appears in its own definition.
--------------------------------------------------------------------------------

let varToName (v : init$var) : Maybe init$string :=
  v ?(Maybe init$string) (just ?init$string) (λ _ : init$index. nothing ?init$string).

-- if t is a name, returns that name
let termToName (t : Term) : Maybe init$string :=
  t ?(Maybe init$string)
    varToName
    (λ s : init$sort. nothing ?init$string)
    (λ b : Binder. λ n : init$string. λ _ : Maybe init$string. λ _ : Maybe init$string. nothing ?init$string)
    (λ t : Maybe init$string. λ l : List (Product Bool (Maybe init$string)). nothing ?init$string)
    (λ _ : Maybe init$string. nothing ?init$string).

-- if t is of the form n n1 ... nk, returns that list
let termToNameList (t : Term) : Maybe (List init$string) :=
  recursionTerm ?(Maybe (List init$string))
    (λ v : init$var. mapMaybe ?init$string ?(List init$string) (pureList ?init$string) (varToName v))
    (λ s : init$sort. nothing ?(List init$string))
    (λ b : Binder. λ n : init$string. λ _ : Term. λ _ : Term. λ _ : Maybe (List init$string). λ _ : Maybe (List init$string).
      nothing ?(List init$string))
    (λ _ : Term. λ l : List App. λ ns : Maybe (List init$string). λ _ : List (Product Bool (Maybe (List init$string))).
      liftMaybe2 ?(List init$string) ?(List init$string) ?(List init$string) (app ?init$string)
                 ns (traverseMaybeList ?App ?init$string (λ a : App. termToName (appTerm a)) l))
    (λ _ : Term. λ _ : Maybe (List init$string). nothing ?(List init$string))
    t.

-- returns true iff t is of the form n n1 ... nk and the list of names equals `match`
let matchTerm (t : Term) (match : List init$string) : Bool :=
  maybe ?(List init$string) ?Bool false (λ ns : List init$string. listEq ?init$string stringEq match ns) (termToNameList t).

-- this function is used to get the data to match against from a definition
let getMatch (n : init$string) (t : Telescope) : List init$string := cons ?init$string n (map ?Param ?init$string paramName t).
