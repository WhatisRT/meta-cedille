--------------------------------------------------------------------------------
-- This file exports functions for writing terms with less overhead
--
-- Please use the quotation mechanism defined in `QuoteTerm` whenever possible.
--------------------------------------------------------------------------------

let quote$noSpace := init$space'$ : init$space'.
let quote$singleSpace := [init$space$=space=_space'_ init$space'$] : init$space.

let quote$ast := [init$term$_sort_ init$sort$=ast=] : init$term.
let quote$sq := [init$term$_sort_ init$sort$=sq=] : init$term.

let quote$var := λ n : String [init$term$_var_ [init$var$_string_ n]] : Π _ : String init$term.

let quote$pi := [init$term$=pi=_space__term_ quote$singleSpace] : Π _ : init$term init$term.
let quote$psi := [init$term$=psi=_space__term_ quote$singleSpace] : Π _ : init$term init$term.

let quote$beta := λ t : init$term [[[init$term$=beta=_space__term__space__term_ quote$singleSpace] t] quote$singleSpace] : Π _ : init$term Π _ : init$term init$term.

let quote$delta := λ t : init$term [[[init$term$=delta=_space__term__space__term_ quote$singleSpace] t] quote$singleSpace] : Π _ : init$term Π _ : init$term init$term.

let quote$sigma := [init$term$=sigma=_space__term_ quote$singleSpace] : Π _ : init$term init$term.

let quote$square := λ t : init$term λ t' : init$term [[[[[init$term$=lsquare=_space'__term__space__term__space'_=rsquare= quote$noSpace] t] quote$singleSpace] t'] quote$noSpace] : Π _ : init$term Π _ : init$term init$term.

let quote$angle := λ t : init$term λ t' : init$term [[[[[init$term$=langle=_space'__term__space__term__space'_=rangle= quote$noSpace] t] quote$singleSpace] t'] quote$noSpace] : Π _ : init$term Π _ : init$term init$term.

let quote$rho := λ t : init$term λ n : String λ t' : init$term λ t'' : init$term [[[[[[[[[init$term$=rho=_space__term__space__string__space'_=dot=_space'__term__space__term_ quote$singleSpace] t] quote$singleSpace] n] quote$noSpace] quote$noSpace] t'] quote$singleSpace] t''].

let quote$forall := λ name : String λ t : init$term λ t' : init$term [[[[[[[init$term$=forall=_space__string__space'_=colon=_space'__term__space__term_ quote$singleSpace] name] quote$noSpace] quote$noSpace] t] quote$singleSpace] t'] : Π _ : String Π _ : init$term Π _ : init$term init$term.

let quote$Pi := λ name : String λ t : init$term λ t' : init$term [[[[[[[init$term$=Pi=_space__string__space'_=colon=_space'__term__space__term_ quote$singleSpace] name] quote$noSpace] quote$noSpace] t] quote$singleSpace] t'] : Π _ : String Π _ : init$term Π _ : init$term init$term.

let quote$iota := λ name : String λ t : init$term λ t' : init$term [[[[[[[init$term$=iota=_space__string__space'_=colon=_space'__term__space__term_ quote$singleSpace] name] quote$noSpace] quote$noSpace] t] quote$singleSpace] t'] : Π _ : String Π _ : init$term Π _ : init$term init$term.

let quote$lambda := λ name : String λ t : init$term λ t' : init$term [[[[[[[init$term$=lambda=_space__string__space'_=colon=_space'__term__space__term_ quote$singleSpace] name] quote$noSpace] quote$noSpace] t] quote$singleSpace] t'] : Π _ : String Π _ : init$term Π _ : init$term init$term.

let quote$Lambda := λ name : String λ t : init$term λ t' : init$term [[[[[[[init$term$=Lambda=_space__string__space'_=colon=_space'__term__space__term_ quote$singleSpace] name] quote$noSpace] quote$noSpace] t] quote$singleSpace] t'] : Π _ : String Π _ : init$term Π _ : init$term init$term.

let quote$brace := λ t : init$term λ t' : init$term λ n : String λ t'' : init$term [[[[[[[[[[[init$term$=lbrace=_space'__term__space'_=comma=_space'__term__space__string__space'_=dot=_space'__term__space'_=rbrace= quote$noSpace] t] quote$noSpace] quote$noSpace] t'] quote$singleSpace] n] quote$noSpace] quote$noSpace] t''] quote$noSpace].

let quote$phi := λ t : init$term λ t' : init$term λ t'' : init$term [[[[[[init$term$=phi=_space__term__space__term__space__term_ quote$singleSpace] t] quote$singleSpace] t] quote$singleSpace] t].

let quote$equal := λ t : init$term λ t' : init$term [[[[init$term$=equal=_space__term__space__term_ quote$singleSpace] t] quote$singleSpace] t'].

let quote$omega := λ t : init$term [[init$term$=omega=_space__term_ quote$singleSpace] t].

let quote$mu := λ t : init$term λ t' : init$term [[[[init$term$=mu=_space__term__space__term_ quote$singleSpace] t] quote$singleSpace] t'].

let quote$epsilon := λ t : init$term [[init$term$=epsilon=_space__term_ quote$singleSpace] t].

let quote$ZetaEvalStmt := λ t : init$term [[init$term$=zeta=EvalStmt_space__term_ quote$singleSpace] t].

let quote$ZetaShellCmd := λ t : init$term λ t' : init$term [[[[init$term$=zeta=ShellCmd_space__term__space__term_ quote$singleSpace] t] quote$singleSpace] t'].

let quote$ZetaCheckTerm := λ t : init$term λ t' : init$term [[[[init$term$=zeta=CheckTerm_space__term__space__term_ quote$singleSpace] t] quote$singleSpace] t'].

let quote$ZetaNormalize := λ t : init$term [[init$term$=zeta=Normalize_space__term_ quote$singleSpace] t].

let quote$ZetaHeadNormalize := λ t : init$term [[init$term$=zeta=HeadNormalize_space__term_ quote$singleSpace] t].

let quote$ZetaCatchErr := λ t : init$term λ t' : init$term [[[[init$term$=zeta=CatchErr_space__term__space__term_ quote$singleSpace] t] quote$singleSpace] t'].

let quote$constChar := init$const$Char.
let quote$Kappa := λ c : init$const init$term$=Kappa=_const_.

let quote$kappa := λ c : init$char [init$term$=kappa=_char_ c].

let quote$stmt'ToStmt := [init$stmt$_space'__stmt'_ quote$noSpace].

let quote$simpleLet' := λ n : String λ t : init$term [[[[[[[init$stmt'$let_space__string__space'_=colon==equal=_space'__term__space'__lettail_ quote$singleSpace] n] quote$noSpace] quote$noSpace] t] quote$noSpace] init$lettail$=dot=] : Π _ : String Π _ : init$term init$stmt'.

let quote$simpleLet := λ n : String λ t : init$term [quote$stmt'ToStmt [[quote$simpleLet' n] t]] : Π _ : String Π _ : init$term init$stmt.

let quote$annotatedLet' := λ n : String λ t : init$term λ t' : init$term [[[[[[[init$stmt'$let_space__string__space'_=colon==equal=_space'__term__space'__lettail_ quote$singleSpace] n] quote$noSpace] quote$noSpace] t] quote$noSpace] [[[init$lettail$=colon=_space'__term__space'_=dot= quote$noSpace] t'] quote$noSpace]] : Π _ : String Π _ : init$term Π _ : init$term init$stmt'.

let quote$annotatedLet := λ n : String λ t : init$term λ t' : init$term [quote$stmt'ToStmt [[[quote$annotatedLet' n] t] t']] : Π _ : String Π _ : init$term Π _ : init$term init$stmt.

let quote$seteval' := λ t : init$term λ n : String λ n' : String
  [[[[[[[init$stmt'$seteval_space__term__space__string__space__string__space'_=dot= quote$singleSpace] t] quote$singleSpace] n] quote$singleSpace] n'] quote$noSpace].

let quote$import' := λ n : String [[[init$stmt'$import_space__string__space'_=dot= quote$singleSpace] n] quote$noSpace].

let quote$A := init$nameInitChar$A.
let quote$B := init$nameInitChar$B.
let quote$C := init$nameInitChar$C.
let quote$D := init$nameInitChar$D.
let quote$E := init$nameInitChar$E.
let quote$F := init$nameInitChar$F.
let quote$G := init$nameInitChar$G.
let quote$H := init$nameInitChar$H.
let quote$I := init$nameInitChar$I.
let quote$J := init$nameInitChar$J.
let quote$K := init$nameInitChar$K.
let quote$L := init$nameInitChar$L.
let quote$M := init$nameInitChar$M.
let quote$N := init$nameInitChar$N.
let quote$O := init$nameInitChar$O.
let quote$P := init$nameInitChar$P.
let quote$Q := init$nameInitChar$Q.
let quote$R := init$nameInitChar$R.
let quote$S := init$nameInitChar$S.
let quote$T := init$nameInitChar$T.
let quote$U := init$nameInitChar$U.
let quote$V := init$nameInitChar$V.
let quote$W := init$nameInitChar$W.
let quote$X := init$nameInitChar$X.
let quote$Y := init$nameInitChar$Y.
let quote$Z := init$nameInitChar$Z.

let quote$a := init$nameInitChar$a.
let quote$b := init$nameInitChar$b.
let quote$c := init$nameInitChar$c.
let quote$d := init$nameInitChar$d.
let quote$e := init$nameInitChar$e.
let quote$f := init$nameInitChar$f.
let quote$g := init$nameInitChar$g.
let quote$h := init$nameInitChar$h.
let quote$i := init$nameInitChar$i.
let quote$j := init$nameInitChar$j.
let quote$k := init$nameInitChar$k.
let quote$l := init$nameInitChar$l.
let quote$m := init$nameInitChar$m.
let quote$n := init$nameInitChar$n.
let quote$o := init$nameInitChar$o.
let quote$p := init$nameInitChar$p.
let quote$q := init$nameInitChar$q.
let quote$r := init$nameInitChar$r.
let quote$s := init$nameInitChar$s.
let quote$t := init$nameInitChar$t.
let quote$u := init$nameInitChar$u.
let quote$v := init$nameInitChar$v.
let quote$w := init$nameInitChar$w.
let quote$x := init$nameInitChar$x.
let quote$y := init$nameInitChar$y.
let quote$z := init$nameInitChar$z.
