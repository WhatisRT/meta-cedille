--------------------------------------------------------------------------------
-- This file exports functions for writing terms with less overhead
--
-- Please use the quotation mechanism defined in `QuoteTerm` whenever possible.
--------------------------------------------------------------------------------

let quote$ast := [init$term$_sort_ init$sort$=ast=] : init$term.
let quote$sq := [init$term$_sort_ init$sort$=sq=] : init$term.

let quote$var := λ n : String [init$term$_var_ [init$var$_string_ n]] : Π _ : String init$term.

let quote$pi := init$term$=pi=^space^_term_ : Π _ : init$term init$term.
let quote$psi := init$term$=psi=^space^_term_ : Π _ : init$term init$term.

let quote$beta := λ t : init$term [init$term$=beta=^space^_term_^space^_term_ t] : Π _ : init$term Π _ : init$term init$term.

let quote$delta := λ t : init$term [init$term$=delta=^space^_term_^space^_term_ t] : Π _ : init$term Π _ : init$term init$term.

let quote$sigma := init$term$=sigma=^space^_term_ : Π _ : init$term init$term.

let quote$square := λ t : init$term λ t' : init$term [[init$term$=lsquare=^space'^_term_^space^_term_^space'^=rsquare= t] t'] : Π _ : init$term Π _ : init$term init$term.

let quote$angle := λ t : init$term λ t' : init$term [[init$term$=langle=^space'^_term_^space^_term_^space'^=rangle= t] t'] : Π _ : init$term Π _ : init$term init$term.

let quote$rho := λ t : init$term λ n : String λ t' : init$term λ t'' : init$term [[[[init$term$=rho=^space^_term_^space^_string_^space'^=dot=^space'^_term_^space^_term_ t] n] t'] t''].

let quote$forall := λ name : String λ t : init$term λ t' : init$term [[[init$term$=forall=^space^_string_^space'^=colon=^space'^_term_^space^_term_ name] t] t'] : Π _ : String Π _ : init$term Π _ : init$term init$term.

let quote$Pi := λ name : String λ t : init$term λ t' : init$term [[[init$term$=Pi=^space^_string_^space'^=colon=^space'^_term_^space^_term_ name] t] t'] : Π _ : String Π _ : init$term Π _ : init$term init$term.

let quote$iota := λ name : String λ t : init$term λ t' : init$term [[[init$term$=iota=^space^_string_^space'^=colon=^space'^_term_^space^_term_ name] t] t'] : Π _ : String Π _ : init$term Π _ : init$term init$term.

let quote$lambda := λ name : String λ t : init$term λ t' : init$term [[[init$term$=lambda=^space^_string_^space'^=colon=^space'^_term_^space^_term_ name] t] t'] : Π _ : String Π _ : init$term Π _ : init$term init$term.

let quote$Lambda := λ name : String λ t : init$term λ t' : init$term [[[init$term$=Lambda=^space^_string_^space'^=colon=^space'^_term_^space^_term_ name] t] t'] : Π _ : String Π _ : init$term Π _ : init$term init$term.

let quote$brace := λ t : init$term λ t' : init$term λ n : String λ t'' : init$term [[[[init$term$=lbrace=^space'^_term_^space'^=comma=^space'^_term_^space^_string_^space'^=dot=^space'^_term_^space'^=rbrace= t] t'] n] t''].

let quote$phi := λ t : init$term λ t' : init$term λ t'' : init$term [[[init$term$=phi=^space^_term_^space^_term_^space^_term_ t] t] t].

let quote$equal := λ t : init$term λ t' : init$term [[init$term$=equal=^space^_term_^space^_term_ t] t'].

let quote$omega := λ t : init$term [init$term$=omega=^space^_term_ t].

let quote$mu := λ t : init$term λ t' : init$term [[init$term$=mu=^space^_term_^space^_term_ t] t'].

let quote$epsilon := λ t : init$term [init$term$=epsilon=^space^_term_ t].

let quote$ZetaEvalStmt := λ t : init$term [init$term$=zeta=EvalStmt^space^_term_ t].

let quote$ZetaShellCmd := λ t : init$term λ t' : init$term [[init$term$=zeta=ShellCmd^space^_term_^space^_term_ t] t'].

let quote$ZetaCheckTerm := λ t : init$term λ t' : init$term [[init$term$=zeta=CheckTerm^space^_term_^space^_term_ t] t'].

let quote$ZetaNormalize := λ t : init$term [init$term$=zeta=Normalize^space^_term_ t].

let quote$ZetaHeadNormalize := λ t : init$term [init$term$=zeta=HeadNormalize^space^_term_ t].

let quote$ZetaCatchErr := λ t : init$term λ t' : init$term [[init$term$=zeta=CatchErr^space^_term_^space^_term_ t] t'].

let quote$constChar := init$const$Char.
let quote$Kappa := λ c : init$const init$term$=Kappa=_const_.

let quote$kappa := λ c : init$char [init$term$=kappa=_char_ c].

let quote$stmt'ToStmt := init$stmt$^space'^_stmt'_.

let quote$simpleLet' := λ n : String λ t : init$term [[[init$stmt'$let^space^_string_^space'^=colon==equal=^space'^_term_^space'^_lettail_ n] t] init$lettail$=dot=] : Π _ : String Π _ : init$term init$stmt'.

let quote$simpleLet := λ n : String λ t : init$term [quote$stmt'ToStmt [[quote$simpleLet' n] t]] : Π _ : String Π _ : init$term init$stmt.

let quote$annotatedLet' := λ n : String λ t : init$term λ t' : init$term [[[init$stmt'$let^space^_string_^space'^=colon==equal=^space'^_term_^space'^_lettail_ n] t] [init$lettail$=colon=^space'^_term_^space'^=dot= t']] : Π _ : String Π _ : init$term Π _ : init$term init$stmt'.

let quote$annotatedLet := λ n : String λ t : init$term λ t' : init$term [quote$stmt'ToStmt [[[quote$annotatedLet' n] t] t']] : Π _ : String Π _ : init$term Π _ : init$term init$stmt.

let quote$seteval' := λ t : init$term λ n : String λ n' : String
[[[init$stmt'$seteval^space^_term_^space^_string_^space^_string_^space'^=dot= t] n] n'].

let quote$import' := λ n : String [init$stmt'$import^space^_string_^space'^=dot= n].

let quote$A := init$nameInitChar$A.
let quote$B := init$nameInitChar$B.
let quote$C := init$nameInitChar$C.
let quote$D := init$nameInitChar$D.
let quote$E := init$nameInitChar$E.
let quote$F := init$nameInitChar$F.
let quote$G := init$nameInitChar$G.
let quote$H := init$nameInitChar$H.
let quote$I := init$nameInitChar$I.
let quote$J := init$nameInitChar$J.
let quote$K := init$nameInitChar$K.
let quote$L := init$nameInitChar$L.
let quote$M := init$nameInitChar$M.
let quote$N := init$nameInitChar$N.
let quote$O := init$nameInitChar$O.
let quote$P := init$nameInitChar$P.
let quote$Q := init$nameInitChar$Q.
let quote$R := init$nameInitChar$R.
let quote$S := init$nameInitChar$S.
let quote$T := init$nameInitChar$T.
let quote$U := init$nameInitChar$U.
let quote$V := init$nameInitChar$V.
let quote$W := init$nameInitChar$W.
let quote$X := init$nameInitChar$X.
let quote$Y := init$nameInitChar$Y.
let quote$Z := init$nameInitChar$Z.

let quote$a := init$nameInitChar$a.
let quote$b := init$nameInitChar$b.
let quote$c := init$nameInitChar$c.
let quote$d := init$nameInitChar$d.
let quote$e := init$nameInitChar$e.
let quote$f := init$nameInitChar$f.
let quote$g := init$nameInitChar$g.
let quote$h := init$nameInitChar$h.
let quote$i := init$nameInitChar$i.
let quote$j := init$nameInitChar$j.
let quote$k := init$nameInitChar$k.
let quote$l := init$nameInitChar$l.
let quote$m := init$nameInitChar$m.
let quote$n := init$nameInitChar$n.
let quote$o := init$nameInitChar$o.
let quote$p := init$nameInitChar$p.
let quote$q := init$nameInitChar$q.
let quote$r := init$nameInitChar$r.
let quote$s := init$nameInitChar$s.
let quote$t := init$nameInitChar$t.
let quote$u := init$nameInitChar$u.
let quote$v := init$nameInitChar$v.
let quote$w := init$nameInitChar$w.
let quote$x := init$nameInitChar$x.
let quote$y := init$nameInitChar$y.
let quote$z := init$nameInitChar$z.
