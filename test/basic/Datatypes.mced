let Top := = λ x : * x λ x : * x : *.
let Cast := λ A : * λ B : * (ι cast : Π _ : A B = cast λ x : * x) : Π _ : * Π B : * *.
let cast := Λ A : * Λ B : * Λ c : [[Cast A] B] φ ψ c π c λ x : * x.
let RecFunctor := λ F : Π _ : * * ∀ X : * ∀ Y : * ∀ _ : [[Cast X] Y] [[Cast [F X]] [F Y]] : Π _ : Π _ : * * *.
let Rec := λ F : Π _ : * * ∀ X : * ∀ _ : [[Cast [F X]] X] X : Π _ : Π _ : * * *.
let recCast := Λ F : Π _ : * * Λ X : * Λ c : [[Cast [F X]] X] { λ a : [Rec F] <<a X> c> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast' . = cast' λ x : * x }.
let recIn := Λ F : Π _ : * * Λ fmap : [RecFunctor F] { λ a : [F [Rec F]] Λ X : * Λ c : [[Cast [F X]] X] [<<<cast [F X]> X> c> [<<<cast [F [Rec F]]> [F X]> <<<fmap [Rec F]> X> <<<recCast F> X> c>>> a]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * [cast [cast a]] x-x β (λ a : * [cast [cast a]]) λ x-x : * x-x cast' . = cast' λ x : * x }.
let recOut := Λ F : Π _ : * * Λ fmap : [RecFunctor F] { λ a : [Rec F] <<a [F [Rec F]]> <<<fmap [F [Rec F]]> [Rec F]> <<recIn F> fmap>>> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast' . = cast' λ x : * x }.
let FixMF := λ F : Π _ : * * λ fm : [RecFunctor F] λ FixM : * (ι x : Top ∀ X : Π _ : Top * Π _ : (ι alg : Top ∀ R : * ∀ _ : [[Cast R] FixM] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d : * [d alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d : * [d alg'])] x']]) [X x]) : Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[Cast X] Y] [[Cast [F X]] [F Y]] Π FixM : * *.
let FixM := λ F : Π _ : * * λ fm : [RecFunctor F] [Rec [[FixMF F] fm]] : Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[Cast X] Y] [[Cast [F X]] [F Y]] *.
let FixFmap := Λ F : Π _ : * * Λ fm : [RecFunctor F] Λ D : * Λ D' : * Λ c : [[Cast D] D'] { λ d : [[[FixMF F] fm] D] { π d , Λ X : Π _ : Top * λ alg : (ι alg : Top ∀ R : * ∀ _ : [[Cast R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [<ψ d X> { π alg , Λ R : * Λ reveal : [[Cast R] D] <<ψ alg R> { λ r : R [<<<cast D> D'> c> [<<<cast R> D> reveal> r]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ r : * [cast [cast r]] x-x β (λ r : * [cast [cast r]]) λ x-x : * x-x cast' . = cast' λ x : * x }> alg' . ∀ R : * ∀ _ : [[Cast R] D] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [X β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] x . ∀ X : Π _ : Top * Π _ : (ι alg : Top ∀ R : * ∀ _ : [[Cast R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d : * d x-x β (λ d : * d) λ x-x : * x-x cast' . = cast' λ x : * x }.
let inFixM := Λ F : Π _ : * * Λ fm : [RecFunctor F] <<<cast [[[FixMF F] fm] [[FixM F] fm]]> [[FixM F] fm]> <<recIn [[FixMF F] fm]> <<FixFmap F> fm>>>.
let outFixM := Λ F : Π _ : * * Λ fm : [RecFunctor F] <<<cast [[FixM F] fm]> [[[FixMF F] fm] [[FixM F] fm]]> <<recOut [[FixMF F] fm]> <<FixFmap F> fm>>>.
let inFix := Λ F : Π _ : * * Λ fm : [RecFunctor F] λ d : [F [[FixM F] fm]] [<<inFixM F> fm> { β (λ x : * x) λ alg : * [[alg (λ d' : * [d' alg])] d] , Λ X : Π _ : Top * λ alg : (ι alg : Top ∀ R : * ∀ _ : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [[<<<ψ alg [[FixM F] fm]> { λ d' : [[FixM F] fm] d' , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d' : * d' x-x β (λ d' : * d') λ x-x : * x-x cast' . = cast' λ x : * x }> { λ d' : [[FixM F] fm] [<ψ [<<outFixM F> fm> d'] (λ x : Top [F [[FixM F] fm]])> { β (λ x : * x) λ e : * λ d'' : * d'' , Λ X' : * Λ reveal : [[Cast X'] [[FixM F] fm]] Λ p : (ι o : Π _ : X' [F X'] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) λ e : (ι ih : Π r : X' [(λ x : Top [F [[FixM F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' (λ e : * λ d''' : * d''')]) <<<cast [F X']> [F [[FixM F] fm]]> <<<fm X'> [[FixM F] fm]> reveal>> alg' . ∀ R : * ∀ _ : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) Π _ : (ι ih : Π r : R [(λ x : Top [F [[FixM F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' alg']) Π x' : [F R] [(λ x : Top [F [[FixM F] fm]]) β (λ x : * x) λ alg'' : * [[alg'' (λ d'' : * [d'' alg''])] x']] }] , β (λ d' : * [[outFixM d'] (λ e : * λ d'' : * d'')]) λ d' : * [d' (λ e : * λ d'' : * d'')] o . = o λ d' : * [d' (λ p : * λ d'' : * d'')] }> { λ d' : [[FixM F] fm] [<ψ [<<outFixM F> fm> d'] X> alg] , β (λ d' : * [[outFixM d'] alg]) λ d' : * [d' alg] ih . = ih λ d' : * [d' alg] }] d] x . ∀ X : Π _ : Top * Π _ : (ι alg : Top ∀ R : * ∀ _ : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] }].
let outFix := Λ F : Π _ : * * Λ fm : [RecFunctor F] λ x : [[FixM F] fm] [<ψ [<<outFixM F> fm> x] (λ x' : Top [F [[FixM F] fm]])> { β (λ x' : * x') λ e : * λ d : * d , Λ R : * Λ c : [[Cast R] [[FixM F] fm]] Λ p : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) λ e : (ι ih : Π r : R [(λ x' : Top [F [[FixM F] fm]]) β (λ x' : * x') r] = ih λ d : * [d (λ e : * λ d' : * d')]) <<<cast [F R]> [F [[FixM F] fm]]> <<<fm R> [[FixM F] fm]> c>> alg . ∀ R : * ∀ _ : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [(λ x' : Top [F [[FixM F] fm]]) β (λ x' : * x') r] = ih λ d : * [d alg]) Π x'' : [F R] [(λ x' : Top [F [[FixM F] fm]]) β (λ x' : * x') λ alg' : * [[alg' (λ d : * [d alg'])] x'']] }].
let IndFixM' := Λ F : Π _ : * * Λ fm : [RecFunctor F] λ d : [[FixM F] fm] Λ Q : Π _ : [[FixM F] fm] * λ alg : (ι alg : Top ∀ R : * ∀ reveal : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix) Π _ : (ι ih : Π r : R [Q [<<<cast R> [[FixM F] fm]> reveal> r]] = ih λ d' : * [d' alg]) Π x : [F R] [Q [<<inFix F> fm> [<<<cast [F R]> [F [[FixM F] fm]]> <<<fm R> [[FixM F] fm]> reveal>> x]]]) <<[<ψ [<<outFixM F> fm> d] (λ d' : Top ∀ d'' : [[FixM F] fm] ∀ e : = d'' d' [Q φ e d'' d'])> { β (λ x : * x) alg , Λ R : * Λ reveal : [[Cast R] [[FixM F] fm]] Λ out : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) λ ih : (ι ih : Π r : R [(λ d' : Top ∀ d'' : [[FixM F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg]) λ d' : [F R] Λ d'' : [[FixM F] fm] Λ e : = d'' λ alg'' : * [[alg'' (λ d''' : * [d''' alg''])] d'] [[<<<ψ alg R> reveal> out> { λ r : R <<[π ih r] [<<<cast R> [[FixM F] fm]> reveal> r]> ρ β r λ x-x : * x-x x-x . = [cast r] x-x β [cast r] λ x-x : * x-x> , ψ ih ih' . = ih' λ d''' : * [d''' alg] }] d'] alg' . ∀ R : * ∀ _ : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [(λ d' : Top ∀ d'' : [[FixM F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [(λ d' : Top ∀ d'' : [[FixM F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] d> ρ β [outFixM d] λ x-x : * x-x x-x . = d x-x β d λ x-x : * x-x>.
let IndFixM := Λ F : Π _ : * * Λ fm : [RecFunctor F] λ d : [[FixM F] fm] Λ Q : Π _ : [[FixM F] fm] * λ alg : ∀ R : * ∀ reveal : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix) Π _ : Π r : R [Q [<<<cast R> [[FixM F] fm]> reveal> r]] Π x : [F R] [Q [<<inFix F> fm> [<<<cast [F R]> [F [[FixM F] fm]]> <<<fm R> [[FixM F] fm]> reveal>> x]]] [<[<<IndFixM' F> fm> d] Q> { β (λ x : * x) alg , Λ R : * Λ rvl : [[Cast R] [[FixM F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix) λ ih : (ι ih : Π r : R [Q [<<<cast R> [[FixM F] fm]> rvl> r]] = ih λ d'' : * [d'' alg]) [<<<alg R> rvl> out> π ih] alg' . ∀ R : * ∀ reveal : [[Cast R] [[FixM F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix) Π _ : (ι ih : Π r : R [Q [<<<cast R> [[FixM F] fm]> reveal> r]] = ih λ d'' : * [d'' alg']) Π x : [F R] [Q [<<inFix F> fm> [<<<cast [F R]> [F [[FixM F] fm]]> <<<fm R> [[FixM F] fm]> reveal>> x]]] }].
let lambek := Λ F : Π _ : * * Λ fm : [RecFunctor F] λ d : [[FixM F] fm] [<[<<IndFixM F> fm> d] (λ d' : [[FixM F] fm] = [inFix [outFix d']] d')> (Λ R : * Λ rvl : [[Cast R] [[FixM F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix) λ ih : Π r : R = [inFix [outFix [cast r]]] [cast r] λ d' : [F R] ρ β [inFix [cast d']] λ x-x : * x-x x-x . = [inFix [outFix [inFix [cast d']]]] x-x β [inFix [outFix [inFix [cast d']]]] λ x-x : * x-x)].
let BoolF := λ Bool : * (ι x : = λ x : * x λ x : * x ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ true : * λ false : * true] Π _ : [X β (λ x' : * x') λ true : * λ false : * false] [X x]) : Π _ : * *.
let BoolIndF := Λ Bool : * λ x : [BoolF Bool] Λ X : Π _ : [BoolF Bool] * λ true : [X { β (λ x' : * x') λ true : * λ false : * true , Λ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ true : [X' β (λ x'' : * x'') λ true : * λ false : * true] λ false : [X' β (λ x'' : * x'') λ true' : * λ false : * false] true x' . ∀ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X' β (λ x'' : * x'') λ true : * λ false : * true] Π _ : [X' β (λ x'' : * x'') λ true : * λ false : * false] [X' x'] }] λ false : [X { β (λ x' : * x') λ true' : * λ false : * false , Λ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ true' : [X' β (λ x'' : * x'') λ true' : * λ false : * true'] λ false : [X' β (λ x'' : * x'') λ true'' : * λ false : * false] false x' . ∀ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X' β (λ x'' : * x'') λ true' : * λ false : * true'] Π _ : [X' β (λ x'' : * x'') λ true' : * λ false : * false] [X' x'] }] <<[[<ψ x (λ x' : = λ x' : * x' λ x' : * x' ∀ y : [BoolF Bool] ∀ e : = y x' [X φ e y x'])> (Λ y : [BoolF Bool] Λ e : = y λ true' : * λ false' : * true' true)] (Λ y : [BoolF Bool] Λ e : = y λ true' : * λ false' : * false' false)] x> ρ β x λ x-x : * x-x x-x . = x x-x β x λ x-x : * x-x>.
let BoolFmap := Λ A : * Λ B : * Λ c : [[Cast A] B] { λ x : [BoolF A] { π x , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ true : [X β (λ x'' : * x'') λ true : * λ false : * true] λ false : [X β (λ x'' : * x'') λ true' : * λ false : * false] [[<ψ x X> true] false] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X β (λ x'' : * x'') λ true : * λ false : * true] Π _ : [X β (λ x'' : * x'') λ true : * λ false : * false] [X x'] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ x : * x x-x β (λ x : * x) λ x-x : * x-x cast' . = cast' λ x : * x }.
let Bool := [[FixM BoolF] BoolFmap] : *.
let Is-Bool := λ X : * ∀ Y : * Π _ : Π _ : (ι i : Π _ : X Bool = i λ x : * x) Π _ : (ι i : Π _ : X [BoolF X] = i outFix) Y Y : Π _ : * *.
let is-Bool := Λ Y : * λ f : Π _ : (ι i : Π _ : Bool Bool = i λ x : * x) Π _ : (ι i : Π _ : Bool [BoolF Bool] = i outFix) Y [[f { λ x : Bool x , β (λ x : * x) λ x : * x i . = i λ x : * x }] { <<outFix BoolF> BoolFmap> , β outFix outFix i . = i outFix }].
let to-Bool := Λ Y : * Λ mu : [Is-Bool Y] φ ψ [<mu (ι i : Π _ : Y Bool = i λ x : * x)> (λ c : (ι i : Π _ : Y Bool = i λ x : * x) λ o : (ι i : Π _ : Y [BoolF Y] = i outFix) c)] π [<mu (ι i : Π _ : Y Bool = i λ x : * x)> (λ c : (ι i : Π _ : Y Bool = i λ x : * x) λ o : (ι i : Π _ : Y [BoolF Y] = i outFix) c)] λ x : * x.
let true := [<<inFix BoolF> BoolFmap> { β (λ x : * x) λ true : * λ false : * true , Λ X : Π _ : = λ x' : * x' λ x' : * x' * λ true : [X β (λ x' : * x') λ true : * λ false : * true] λ false : [X β (λ x' : * x') λ true' : * λ false : * false] true x . ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ true : * λ false : * true] Π _ : [X β (λ x' : * x') λ true : * λ false : * false] [X x] }].
let false := [<<inFix BoolF> BoolFmap> { β (λ x : * x) λ true' : * λ false : * false , Λ X : Π _ : = λ x' : * x' λ x' : * x' * λ true' : [X β (λ x' : * x') λ true' : * λ false : * true'] λ false : [X β (λ x' : * x') λ true'' : * λ false : * false] false x . ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ true' : * λ false : * true'] Π _ : [X β (λ x' : * x') λ true' : * λ false : * false] [X x] }].
let inductionBool := Λ P : Π _ : Bool * λ ptrue : [P true] λ pfalse : [P false] λ b : Bool [<[<<IndFixM BoolF> BoolFmap> b] P> (Λ Type-ind : * Λ to : [[Cast Type-ind] [[FixM BoolF] BoolFmap]] Λ out : (ι o : Π _ : Type-ind [BoolF Type-ind] = o outFix) λ ind : Π r : Type-ind [P [<<<cast Type-ind> [[FixM BoolF] BoolFmap]> to> r]] λ y : [BoolF Type-ind] <<[[<φ ρ β y λ x-x : * x-x x-x . = [BoolIndF y] x-x β [BoolIndF y] λ x-x : * x-x [<BoolIndF Type-ind> y] y (λ y'' : [BoolF Type-ind] ∀ y''' : Bool ∀ e : = [inFix y''] y''' [P φ e [<<inFix BoolF> BoolFmap> [<<<cast [BoolF Type-ind]> [BoolF Bool]> <<<BoolFmap Type-ind> Bool> to>> y'']] y'''])> (Λ y'' : Bool Λ e : = [inFix (λ true' : * λ false' : * true')] y'' ρ σ e x . [P x] ptrue)] (Λ y'' : Bool Λ e : = [inFix (λ true' : * λ false' : * false')] y'' ρ σ e x . [P x] pfalse)] [<<inFix BoolF> BoolFmap> [<<<cast [BoolF Type-ind]> [BoolF [[FixM BoolF] BoolFmap]]> <<<BoolFmap Type-ind> Bool> [<Λ Y : * λ x : Π _ : (ι i : Π _ : Type-ind Bool = i λ x : * x) Π _ : (ι i : Π _ : Type-ind [BoolF Type-ind] = i outFix) Y [[x to] out] [[Cast Type-ind] Bool]> (λ to' : (ι i : Π _ : Type-ind Bool = i λ x : * x) λ out' : (ι i : Π _ : Type-ind [BoolF Type-ind] = i outFix) to')]>> y]]> [<<lambek BoolF> BoolFmap> [<<inFix BoolF> BoolFmap> [<<<cast [BoolF Type-ind]> [BoolF [[FixM BoolF] BoolFmap]]> <<<BoolFmap Type-ind> Bool> [<Λ Y : * λ x : Π _ : (ι i : Π _ : Type-ind Bool = i λ x : * x) Π _ : (ι i : Π _ : Type-ind [BoolF Type-ind] = i outFix) Y [[x to] out] [[Cast Type-ind] Bool]> (λ to' : (ι i : Π _ : Type-ind Bool = i λ x : * x) λ out' : (ι i : Π _ : Type-ind [BoolF Type-ind] = i outFix) to')]>> y]]]>)].
let Top' := = λ x : * x λ x : * x : *.
let Cast' := λ A : * λ B : * (ι cast' : Π _ : A B = cast' λ x : * x) : Π _ : * Π B : * *.
let cast' := Λ A : * Λ B : * Λ c : [[Cast' A] B] φ ψ c π c λ x : * x.
let RecFunctor' := λ F : Π _ : * * ∀ X : * ∀ Y : * ∀ _ : [[Cast' X] Y] [[Cast' [F X]] [F Y]] : Π _ : Π _ : * * *.
let Rec' := λ F : Π _ : * * ∀ X : * ∀ _ : [[Cast' [F X]] X] X : Π _ : Π _ : * * *.
let recCast' := Λ F : Π _ : * * Λ X : * Λ c : [[Cast' [F X]] X] { λ a : [Rec' F] <<a X> c> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast'' . = cast'' λ x : * x }.
let recIn' := Λ F : Π _ : * * Λ fmap : [RecFunctor' F] { λ a : [F [Rec' F]] Λ X : * Λ c : [[Cast' [F X]] X] [<<<cast' [F X]> X> c> [<<<cast' [F [Rec' F]]> [F X]> <<<fmap [Rec' F]> X> <<<recCast' F> X> c>>> a]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * [cast' [cast' a]] x-x β (λ a : * [cast' [cast' a]]) λ x-x : * x-x cast'' . = cast'' λ x : * x }.
let recOut' := Λ F : Π _ : * * Λ fmap : [RecFunctor' F] { λ a : [Rec' F] <<a [F [Rec' F]]> <<<fmap [F [Rec' F]]> [Rec' F]> <<recIn' F> fmap>>> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast'' . = cast'' λ x : * x }.
let FixMF' := λ F : Π _ : * * λ fm : [RecFunctor' F] λ FixM' : * (ι x : Top' ∀ X : Π _ : Top' * Π _ : (ι alg : Top' ∀ R : * ∀ _ : [[Cast' R] FixM'] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d : * [d alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d : * [d alg'])] x']]) [X x]) : Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[Cast' X] Y] [[Cast' [F X]] [F Y]] Π FixM' : * *.
let FixM' := λ F : Π _ : * * λ fm : [RecFunctor' F] [Rec' [[FixMF' F] fm]] : Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[Cast' X] Y] [[Cast' [F X]] [F Y]] *.
let FixFmap' := Λ F : Π _ : * * Λ fm : [RecFunctor' F] Λ D : * Λ D' : * Λ c : [[Cast' D] D'] { λ d : [[[FixMF' F] fm] D] { π d , Λ X : Π _ : Top' * λ alg : (ι alg : Top' ∀ R : * ∀ _ : [[Cast' R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [<ψ d X> { π alg , Λ R : * Λ reveal : [[Cast' R] D] <<ψ alg R> { λ r : R [<<<cast' D> D'> c> [<<<cast' R> D> reveal> r]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ r : * [cast' [cast' r]] x-x β (λ r : * [cast' [cast' r]]) λ x-x : * x-x cast'' . = cast'' λ x : * x }> alg' . ∀ R : * ∀ _ : [[Cast' R] D] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [X β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] x . ∀ X : Π _ : Top' * Π _ : (ι alg : Top' ∀ R : * ∀ _ : [[Cast' R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d : * d x-x β (λ d : * d) λ x-x : * x-x cast'' . = cast'' λ x : * x }.
let inFixM' := Λ F : Π _ : * * Λ fm : [RecFunctor' F] <<<cast' [[[FixMF' F] fm] [[FixM' F] fm]]> [[FixM' F] fm]> <<recIn' [[FixMF' F] fm]> <<FixFmap' F> fm>>>.
let outFixM' := Λ F : Π _ : * * Λ fm : [RecFunctor' F] <<<cast' [[FixM' F] fm]> [[[FixMF' F] fm] [[FixM' F] fm]]> <<recOut' [[FixMF' F] fm]> <<FixFmap' F> fm>>>.
let inFix' := Λ F : Π _ : * * Λ fm : [RecFunctor' F] λ d : [F [[FixM' F] fm]] [<<inFixM' F> fm> { β (λ x : * x) λ alg : * [[alg (λ d' : * [d' alg])] d] , Λ X : Π _ : Top' * λ alg : (ι alg : Top' ∀ R : * ∀ _ : [[Cast' R] [[FixM' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [[<<<ψ alg [[FixM' F] fm]> { λ d' : [[FixM' F] fm] d' , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d' : * d' x-x β (λ d' : * d') λ x-x : * x-x cast'' . = cast'' λ x : * x }> { λ d' : [[FixM' F] fm] [<ψ [<<outFixM' F> fm> d'] (λ x : Top' [F [[FixM' F] fm]])> { β (λ x : * x) λ e : * λ d'' : * d'' , Λ X' : * Λ reveal : [[Cast' X'] [[FixM' F] fm]] Λ p : (ι o : Π _ : X' [F X'] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) λ e : (ι ih : Π r : X' [(λ x : Top' [F [[FixM' F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' (λ e : * λ d''' : * d''')]) <<<cast' [F X']> [F [[FixM' F] fm]]> <<<fm X'> [[FixM' F] fm]> reveal>> alg' . ∀ R : * ∀ _ : [[Cast' R] [[FixM' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) Π _ : (ι ih : Π r : R [(λ x : Top' [F [[FixM' F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' alg']) Π x' : [F R] [(λ x : Top' [F [[FixM' F] fm]]) β (λ x : * x) λ alg'' : * [[alg'' (λ d'' : * [d'' alg''])] x']] }] , β (λ d' : * [[outFixM' d'] (λ e : * λ d'' : * d'')]) λ d' : * [d' (λ e : * λ d'' : * d'')] o . = o λ d' : * [d' (λ p : * λ d'' : * d'')] }> { λ d' : [[FixM' F] fm] [<ψ [<<outFixM' F> fm> d'] X> alg] , β (λ d' : * [[outFixM' d'] alg]) λ d' : * [d' alg] ih . = ih λ d' : * [d' alg] }] d] x . ∀ X : Π _ : Top' * Π _ : (ι alg : Top' ∀ R : * ∀ _ : [[Cast' R] [[FixM' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] }].
let outFix' := Λ F : Π _ : * * Λ fm : [RecFunctor' F] λ x : [[FixM' F] fm] [<ψ [<<outFixM' F> fm> x] (λ x' : Top' [F [[FixM' F] fm]])> { β (λ x' : * x') λ e : * λ d : * d , Λ R : * Λ c : [[Cast' R] [[FixM' F] fm]] Λ p : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) λ e : (ι ih : Π r : R [(λ x' : Top' [F [[FixM' F] fm]]) β (λ x' : * x') r] = ih λ d : * [d (λ e : * λ d' : * d')]) <<<cast' [F R]> [F [[FixM' F] fm]]> <<<fm R> [[FixM' F] fm]> c>> alg . ∀ R : * ∀ _ : [[Cast' R] [[FixM' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [(λ x' : Top' [F [[FixM' F] fm]]) β (λ x' : * x') r] = ih λ d : * [d alg]) Π x'' : [F R] [(λ x' : Top' [F [[FixM' F] fm]]) β (λ x' : * x') λ alg' : * [[alg' (λ d : * [d alg'])] x'']] }].
let IndFixM'' := Λ F : Π _ : * * Λ fm : [RecFunctor' F] λ d : [[FixM' F] fm] Λ Q : Π _ : [[FixM' F] fm] * λ alg : (ι alg : Top' ∀ R : * ∀ reveal : [[Cast' R] [[FixM' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix') Π _ : (ι ih : Π r : R [Q [<<<cast' R> [[FixM' F] fm]> reveal> r]] = ih λ d' : * [d' alg]) Π x : [F R] [Q [<<inFix' F> fm> [<<<cast' [F R]> [F [[FixM' F] fm]]> <<<fm R> [[FixM' F] fm]> reveal>> x]]]) <<[<ψ [<<outFixM' F> fm> d] (λ d' : Top' ∀ d'' : [[FixM' F] fm] ∀ e : = d'' d' [Q φ e d'' d'])> { β (λ x : * x) alg , Λ R : * Λ reveal : [[Cast' R] [[FixM' F] fm]] Λ out : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) λ ih : (ι ih : Π r : R [(λ d' : Top' ∀ d'' : [[FixM' F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg]) λ d' : [F R] Λ d'' : [[FixM' F] fm] Λ e : = d'' λ alg'' : * [[alg'' (λ d''' : * [d''' alg''])] d'] [[<<<ψ alg R> reveal> out> { λ r : R <<[π ih r] [<<<cast' R> [[FixM' F] fm]> reveal> r]> ρ β r λ x-x : * x-x x-x . = [cast' r] x-x β [cast' r] λ x-x : * x-x> , ψ ih ih' . = ih' λ d''' : * [d''' alg] }] d'] alg' . ∀ R : * ∀ _ : [[Cast' R] [[FixM' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [(λ d' : Top' ∀ d'' : [[FixM' F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [(λ d' : Top' ∀ d'' : [[FixM' F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] d> ρ β [outFixM' d] λ x-x : * x-x x-x . = d x-x β d λ x-x : * x-x>.
let IndFixM''' := Λ F : Π _ : * * Λ fm : [RecFunctor' F] λ d : [[FixM' F] fm] Λ Q : Π _ : [[FixM' F] fm] * λ alg : ∀ R : * ∀ reveal : [[Cast' R] [[FixM' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix') Π _ : Π r : R [Q [<<<cast' R> [[FixM' F] fm]> reveal> r]] Π x : [F R] [Q [<<inFix' F> fm> [<<<cast' [F R]> [F [[FixM' F] fm]]> <<<fm R> [[FixM' F] fm]> reveal>> x]]] [<[<<IndFixM'' F> fm> d] Q> { β (λ x : * x) alg , Λ R : * Λ rvl : [[Cast' R] [[FixM' F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix') λ ih : (ι ih : Π r : R [Q [<<<cast' R> [[FixM' F] fm]> rvl> r]] = ih λ d'' : * [d'' alg]) [<<<alg R> rvl> out> π ih] alg' . ∀ R : * ∀ reveal : [[Cast' R] [[FixM' F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix') Π _ : (ι ih : Π r : R [Q [<<<cast' R> [[FixM' F] fm]> reveal> r]] = ih λ d'' : * [d'' alg']) Π x : [F R] [Q [<<inFix' F> fm> [<<<cast' [F R]> [F [[FixM' F] fm]]> <<<fm R> [[FixM' F] fm]> reveal>> x]]] }].
let lambek' := Λ F : Π _ : * * Λ fm : [RecFunctor' F] λ d : [[FixM' F] fm] [<[<<IndFixM''' F> fm> d] (λ d' : [[FixM' F] fm] = [inFix' [outFix' d']] d')> (Λ R : * Λ rvl : [[Cast' R] [[FixM' F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix') λ ih : Π r : R = [inFix' [outFix' [cast' r]]] [cast' r] λ d' : [F R] ρ β [inFix' [cast' d']] λ x-x : * x-x x-x . = [inFix' [outFix' [inFix' [cast' d']]]] x-x β [inFix' [outFix' [inFix' [cast' d']]]] λ x-x : * x-x)].
let NatF := λ Nat : * (ι x : = λ x : * x λ x : * x ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ zero : * λ suc : * zero] Π _ : Π x' : Nat [X β (λ x'' : * x'') λ zero : * λ suc : * [suc x']] [X x]) : Π _ : * *.
let NatIndF := Λ Nat : * λ x : [NatF Nat] Λ X : Π _ : [NatF Nat] * λ zero : [X { β (λ x' : * x') λ zero : * λ suc : * zero , Λ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ zero : [X' β (λ x'' : * x'') λ zero : * λ suc : * zero] λ suc : Π x'' : Nat [X' β (λ x''' : * x''') λ zero' : * λ suc : * [suc x'']] zero x' . ∀ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X' β (λ x'' : * x'') λ zero : * λ suc : * zero] Π _ : Π x'' : Nat [X' β (λ x''' : * x''') λ zero : * λ suc : * [suc x'']] [X' x'] }] λ suc : Π x' : Nat [X { β (λ x'' : * x'') λ zero' : * λ suc : * [suc x'] , Λ X' : Π _ : = λ x''' : * x''' λ x''' : * x''' * λ zero' : [X' β (λ x''' : * x''') λ zero' : * λ suc : * zero'] λ suc : Π x''' : Nat [X' β (λ x'''' : * x'''') λ zero'' : * λ suc : * [suc x''']] [suc x'] x'' . ∀ X' : Π _ : = λ x''' : * x''' λ x''' : * x''' * Π _ : [X' β (λ x''' : * x''') λ zero' : * λ suc : * zero'] Π _ : Π x''' : Nat [X' β (λ x'''' : * x'''') λ zero' : * λ suc : * [suc x''']] [X' x''] }] <<[[<ψ x (λ x' : = λ x' : * x' λ x' : * x' ∀ y : [NatF Nat] ∀ e : = y x' [X φ e y x'])> (Λ y : [NatF Nat] Λ e : = y λ zero' : * λ suc' : * zero' zero)] (λ x' : Nat Λ y : [NatF Nat] Λ e : = y λ zero' : * λ suc' : * [suc' x'] [suc x'])] x> ρ β x λ x-x : * x-x x-x . = x x-x β x λ x-x : * x-x>.
let NatFmap := Λ A : * Λ B : * Λ c : [[Cast' A] B] { λ x : [NatF A] { π x , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ zero : [X β (λ x'' : * x'') λ zero : * λ suc : * zero] λ suc : Π x'' : B [X β (λ x''' : * x''') λ zero' : * λ suc : * [suc x'']] [[<ψ x X> zero] (λ x' : A [suc [<<<cast' A> B> c> x']])] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X β (λ x'' : * x'') λ zero : * λ suc : * zero] Π _ : Π x'' : B [X β (λ x''' : * x''') λ zero : * λ suc : * [suc x'']] [X x'] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ x : * x x-x β (λ x : * x) λ x-x : * x-x cast'' . = cast'' λ x : * x }.
let Nat := [[FixM' NatF] NatFmap] : *.
let Is-Nat := λ X : * ∀ Y : * Π _ : Π _ : (ι i : Π _ : X Nat = i λ x : * x) Π _ : (ι i : Π _ : X [NatF X] = i outFix') Y Y : Π _ : * *.
let is-Nat := Λ Y : * λ f : Π _ : (ι i : Π _ : Nat Nat = i λ x : * x) Π _ : (ι i : Π _ : Nat [NatF Nat] = i outFix') Y [[f { λ x : Nat x , β (λ x : * x) λ x : * x i . = i λ x : * x }] { <<outFix' NatF> NatFmap> , β outFix' outFix' i . = i outFix' }].
let to-Nat := Λ Y : * Λ mu : [Is-Nat Y] φ ψ [<mu (ι i : Π _ : Y Nat = i λ x : * x)> (λ c : (ι i : Π _ : Y Nat = i λ x : * x) λ o : (ι i : Π _ : Y [NatF Y] = i outFix') c)] π [<mu (ι i : Π _ : Y Nat = i λ x : * x)> (λ c : (ι i : Π _ : Y Nat = i λ x : * x) λ o : (ι i : Π _ : Y [NatF Y] = i outFix') c)] λ x : * x.
let zero := [<<inFix' NatF> NatFmap> { β (λ x : * x) λ zero : * λ suc : * zero , Λ X : Π _ : = λ x' : * x' λ x' : * x' * λ zero : [X β (λ x' : * x') λ zero : * λ suc : * zero] λ suc : Π x' : [[FixM' NatF] NatFmap] [X β (λ x'' : * x'') λ zero' : * λ suc : * [suc x']] zero x . ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ zero : * λ suc : * zero] Π _ : Π x' : [[FixM' NatF] NatFmap] [X β (λ x'' : * x'') λ zero : * λ suc : * [suc x']] [X x] }].
let suc := λ x : Nat [<<inFix' NatF> NatFmap> { β (λ x' : * x') λ zero' : * λ suc : * [suc x] , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ zero' : [X β (λ x'' : * x'') λ zero' : * λ suc : * zero'] λ suc : Π x'' : [[FixM' NatF] NatFmap] [X β (λ x''' : * x''') λ zero'' : * λ suc : * [suc x'']] [suc x] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X β (λ x'' : * x'') λ zero' : * λ suc : * zero'] Π _ : Π x'' : [[FixM' NatF] NatFmap] [X β (λ x''' : * x''') λ zero' : * λ suc : * [suc x'']] [X x'] }].
let inductionNat := Λ P : Π _ : Nat * λ pzero : [P zero] λ psuc : Π n : Nat Π _ : [P n] [P [suc n]] λ n : Nat [<[<<IndFixM''' NatF> NatFmap> n] P> (Λ Type-ind : * Λ to : [[Cast' Type-ind] [[FixM' NatF] NatFmap]] Λ out : (ι o : Π _ : Type-ind [NatF Type-ind] = o outFix') λ ind : Π r : Type-ind [P [<<<cast' Type-ind> [[FixM' NatF] NatFmap]> to> r]] λ y : [NatF Type-ind] <<[[<φ ρ β y λ x-x : * x-x x-x . = [NatIndF y] x-x β [NatIndF y] λ x-x : * x-x [<NatIndF Type-ind> y] y (λ y'' : [NatF Type-ind] ∀ y''' : Nat ∀ e : = [inFix' y''] y''' [P φ e [<<inFix' NatF> NatFmap> [<<<cast' [NatF Type-ind]> [NatF Nat]> <<<NatFmap Type-ind> Nat> to>> y'']] y'''])> (Λ y'' : Nat Λ e : = [inFix' (λ zero' : * λ suc' : * zero')] y'' ρ σ e x . [P x] pzero)] (λ n' : Type-ind Λ y'' : Nat Λ e : = [inFix' (λ zero' : * λ suc' : * [suc' n'])] y'' ρ σ e x . [P x] [[psuc [<<to-Nat Type-ind> Λ Y : * λ x : Π _ : (ι i : Π _ : Type-ind Nat = i λ x : * x) Π _ : (ι i : Π _ : Type-ind [NatF Type-ind] = i outFix') Y [[x to] out]> n']] [ind n']])] [<<inFix' NatF> NatFmap> [<<<cast' [NatF Type-ind]> [NatF [[FixM' NatF] NatFmap]]> <<<NatFmap Type-ind> Nat> [<Λ Y : * λ x : Π _ : (ι i : Π _ : Type-ind Nat = i λ x : * x) Π _ : (ι i : Π _ : Type-ind [NatF Type-ind] = i outFix') Y [[x to] out] [[Cast' Type-ind] Nat]> (λ to' : (ι i : Π _ : Type-ind Nat = i λ x : * x) λ out' : (ι i : Π _ : Type-ind [NatF Type-ind] = i outFix') to')]>> y]]> [<<lambek' NatF> NatFmap> [<<inFix' NatF> NatFmap> [<<<cast' [NatF Type-ind]> [NatF [[FixM' NatF] NatFmap]]> <<<NatFmap Type-ind> Nat> [<Λ Y : * λ x : Π _ : (ι i : Π _ : Type-ind Nat = i λ x : * x) Π _ : (ι i : Π _ : Type-ind [NatF Type-ind] = i outFix') Y [[x to] out] [[Cast' Type-ind] Nat]> (λ to' : (ι i : Π _ : Type-ind Nat = i λ x : * x) λ out' : (ι i : Π _ : Type-ind [NatF Type-ind] = i outFix') to')]>> y]]]>)].
let Top'' := λ A : * = λ x : * x λ x : * x : Π _ : * *.
let Cast'' := λ A : * λ A' : * λ B : * (ι cast'' : Π _ : A' B = cast'' λ x : * x) : Π _ : * Π A' : * Π B : * *.
let cast'' := Λ A : * Λ A' : * Λ B : * Λ c : [[[Cast'' A] A'] B] φ ψ c π c λ x : * x.
let RecFunctor'' := λ A : * λ F : Π _ : * * ∀ X : * ∀ Y : * ∀ _ : [[[Cast'' A] X] Y] [[[Cast'' A] [F X]] [F Y]] : Π _ : * Π F : Π _ : * * *.
let Rec'' := λ A : * λ F : Π _ : * * ∀ X : * ∀ _ : [[[Cast'' A] [F X]] X] X : Π _ : * Π F : Π _ : * * *.
let recCast'' := Λ A : * Λ F : Π _ : * * Λ X : * Λ c : [[[Cast'' A] [F X]] X] { λ a : [[Rec'' A] F] <<a X> c> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast''' . = cast''' λ x : * x }.
let recIn'' := Λ A : * Λ F : Π _ : * * Λ fmap : [[RecFunctor'' A] F] { λ a : [F [[Rec'' A] F]] Λ X : * Λ c : [[[Cast'' A] [F X]] X] [<<<<cast'' A> [F X]> X> c> [<<<<cast'' A> [F [[Rec'' A] F]]> [F X]> <<<fmap [[Rec'' A] F]> X> <<<<recCast'' A> F> X> c>>> a]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * [cast'' [cast'' a]] x-x β (λ a : * [cast'' [cast'' a]]) λ x-x : * x-x cast''' . = cast''' λ x : * x }.
let recOut'' := Λ A : * Λ F : Π _ : * * Λ fmap : [[RecFunctor'' A] F] { λ a : [[Rec'' A] F] <<a [F [[Rec'' A] F]]> <<<fmap [F [[Rec'' A] F]]> [[Rec'' A] F]> <<<recIn'' A> F> fmap>>> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast''' . = cast''' λ x : * x }.
let FixMF'' := λ A : * λ F : Π _ : * * λ fm : [[RecFunctor'' A] F] λ FixM'' : * (ι x : [Top'' A] ∀ X : Π _ : [Top'' A] * Π _ : (ι alg : [Top'' A] ∀ R : * ∀ _ : [[[Cast'' A] R] FixM''] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d : * [d alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d : * [d alg'])] x']]) [X x]) : Π A : * Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[[Cast'' A] X] Y] [[[Cast'' A] [F X]] [F Y]] Π FixM'' : * *.
let FixM'' := λ A : * λ F : Π _ : * * λ fm : [[RecFunctor'' A] F] [[Rec'' A] [[[FixMF'' A] F] fm]] : Π A : * Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[[Cast'' A] X] Y] [[[Cast'' A] [F X]] [F Y]] *.
let FixFmap'' := Λ A : * Λ F : Π _ : * * Λ fm : [[RecFunctor'' A] F] Λ D : * Λ D' : * Λ c : [[[Cast'' A] D] D'] { λ d : [[[[FixMF'' A] F] fm] D] { π d , Λ X : Π _ : [Top'' A] * λ alg : (ι alg : [Top'' A] ∀ R : * ∀ _ : [[[Cast'' A] R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [<ψ d X> { π alg , Λ R : * Λ reveal : [[[Cast'' A] R] D] <<ψ alg R> { λ r : R [<<<<cast'' A> D> D'> c> [<<<<cast'' A> R> D> reveal> r]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ r : * [cast'' [cast'' r]] x-x β (λ r : * [cast'' [cast'' r]]) λ x-x : * x-x cast''' . = cast''' λ x : * x }> alg' . ∀ R : * ∀ _ : [[[Cast'' A] R] D] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [X β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] x . ∀ X : Π _ : [Top'' A] * Π _ : (ι alg : [Top'' A] ∀ R : * ∀ _ : [[[Cast'' A] R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d : * d x-x β (λ d : * d) λ x-x : * x-x cast''' . = cast''' λ x : * x }.
let inFixM'' := Λ A : * Λ F : Π _ : * * Λ fm : [[RecFunctor'' A] F] <<<<cast'' A> [[[[FixMF'' A] F] fm] [[[FixM'' A] F] fm]]> [[[FixM'' A] F] fm]> <<<recIn'' A> [[[FixMF'' A] F] fm]> <<<FixFmap'' A> F> fm>>>.
let outFixM'' := Λ A : * Λ F : Π _ : * * Λ fm : [[RecFunctor'' A] F] <<<<cast'' A> [[[FixM'' A] F] fm]> [[[[FixMF'' A] F] fm] [[[FixM'' A] F] fm]]> <<<recOut'' A> [[[FixMF'' A] F] fm]> <<<FixFmap'' A> F> fm>>>.
let inFix'' := Λ A : * Λ F : Π _ : * * Λ fm : [[RecFunctor'' A] F] λ d : [F [[[FixM'' A] F] fm]] [<<<inFixM'' A> F> fm> { β (λ x : * x) λ alg : * [[alg (λ d' : * [d' alg])] d] , Λ X : Π _ : [Top'' A] * λ alg : (ι alg : [Top'' A] ∀ R : * ∀ _ : [[[Cast'' A] R] [[[FixM'' A] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [[<<<ψ alg [[[FixM'' A] F] fm]> { λ d' : [[[FixM'' A] F] fm] d' , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d' : * d' x-x β (λ d' : * d') λ x-x : * x-x cast''' . = cast''' λ x : * x }> { λ d' : [[[FixM'' A] F] fm] [<ψ [<<<outFixM'' A> F> fm> d'] (λ x : [Top'' A] [F [[[FixM'' A] F] fm]])> { β (λ x : * x) λ e : * λ d'' : * d'' , Λ X' : * Λ reveal : [[[Cast'' A] X'] [[[FixM'' A] F] fm]] Λ p : (ι o : Π _ : X' [F X'] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) λ e : (ι ih : Π r : X' [(λ x : [Top'' A] [F [[[FixM'' A] F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' (λ e : * λ d''' : * d''')]) <<<<cast'' A> [F X']> [F [[[FixM'' A] F] fm]]> <<<fm X'> [[[FixM'' A] F] fm]> reveal>> alg' . ∀ R : * ∀ _ : [[[Cast'' A] R] [[[FixM'' A] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) Π _ : (ι ih : Π r : R [(λ x : [Top'' A] [F [[[FixM'' A] F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' alg']) Π x' : [F R] [(λ x : [Top'' A] [F [[[FixM'' A] F] fm]]) β (λ x : * x) λ alg'' : * [[alg'' (λ d'' : * [d'' alg''])] x']] }] , β (λ d' : * [[outFixM'' d'] (λ e : * λ d'' : * d'')]) λ d' : * [d' (λ e : * λ d'' : * d'')] o . = o λ d' : * [d' (λ p : * λ d'' : * d'')] }> { λ d' : [[[FixM'' A] F] fm] [<ψ [<<<outFixM'' A> F> fm> d'] X> alg] , β (λ d' : * [[outFixM'' d'] alg]) λ d' : * [d' alg] ih . = ih λ d' : * [d' alg] }] d] x . ∀ X : Π _ : [Top'' A] * Π _ : (ι alg : [Top'' A] ∀ R : * ∀ _ : [[[Cast'' A] R] [[[FixM'' A] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] }].
let outFix'' := Λ A : * Λ F : Π _ : * * Λ fm : [[RecFunctor'' A] F] λ x : [[[FixM'' A] F] fm] [<ψ [<<<outFixM'' A> F> fm> x] (λ x' : [Top'' A] [F [[[FixM'' A] F] fm]])> { β (λ x' : * x') λ e : * λ d : * d , Λ R : * Λ c : [[[Cast'' A] R] [[[FixM'' A] F] fm]] Λ p : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) λ e : (ι ih : Π r : R [(λ x' : [Top'' A] [F [[[FixM'' A] F] fm]]) β (λ x' : * x') r] = ih λ d : * [d (λ e : * λ d' : * d')]) <<<<cast'' A> [F R]> [F [[[FixM'' A] F] fm]]> <<<fm R> [[[FixM'' A] F] fm]> c>> alg . ∀ R : * ∀ _ : [[[Cast'' A] R] [[[FixM'' A] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [(λ x' : [Top'' A] [F [[[FixM'' A] F] fm]]) β (λ x' : * x') r] = ih λ d : * [d alg]) Π x'' : [F R] [(λ x' : [Top'' A] [F [[[FixM'' A] F] fm]]) β (λ x' : * x') λ alg' : * [[alg' (λ d : * [d alg'])] x'']] }].
let IndFixM'''' := Λ A : * Λ F : Π _ : * * Λ fm : [[RecFunctor'' A] F] λ d : [[[FixM'' A] F] fm] Λ Q : Π _ : [[[FixM'' A] F] fm] * λ alg : (ι alg : [Top'' A] ∀ R : * ∀ reveal : [[[Cast'' A] R] [[[FixM'' A] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix'') Π _ : (ι ih : Π r : R [Q [<<<<cast'' A> R> [[[FixM'' A] F] fm]> reveal> r]] = ih λ d' : * [d' alg]) Π x : [F R] [Q [<<<inFix'' A> F> fm> [<<<<cast'' A> [F R]> [F [[[FixM'' A] F] fm]]> <<<fm R> [[[FixM'' A] F] fm]> reveal>> x]]]) <<[<ψ [<<<outFixM'' A> F> fm> d] (λ d' : [Top'' A] ∀ d'' : [[[FixM'' A] F] fm] ∀ e : = d'' d' [Q φ e d'' d'])> { β (λ x : * x) alg , Λ R : * Λ reveal : [[[Cast'' A] R] [[[FixM'' A] F] fm]] Λ out : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) λ ih : (ι ih : Π r : R [(λ d' : [Top'' A] ∀ d'' : [[[FixM'' A] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg]) λ d' : [F R] Λ d'' : [[[FixM'' A] F] fm] Λ e : = d'' λ alg'' : * [[alg'' (λ d''' : * [d''' alg''])] d'] [[<<<ψ alg R> reveal> out> { λ r : R <<[π ih r] [<<<<cast'' A> R> [[[FixM'' A] F] fm]> reveal> r]> ρ β r λ x-x : * x-x x-x . = [cast'' r] x-x β [cast'' r] λ x-x : * x-x> , ψ ih ih' . = ih' λ d''' : * [d''' alg] }] d'] alg' . ∀ R : * ∀ _ : [[[Cast'' A] R] [[[FixM'' A] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [(λ d' : [Top'' A] ∀ d'' : [[[FixM'' A] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [(λ d' : [Top'' A] ∀ d'' : [[[FixM'' A] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] d> ρ β [outFixM'' d] λ x-x : * x-x x-x . = d x-x β d λ x-x : * x-x>.
let IndFixM''''' := Λ A : * Λ F : Π _ : * * Λ fm : [[RecFunctor'' A] F] λ d : [[[FixM'' A] F] fm] Λ Q : Π _ : [[[FixM'' A] F] fm] * λ alg : ∀ R : * ∀ reveal : [[[Cast'' A] R] [[[FixM'' A] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix'') Π _ : Π r : R [Q [<<<<cast'' A> R> [[[FixM'' A] F] fm]> reveal> r]] Π x : [F R] [Q [<<<inFix'' A> F> fm> [<<<<cast'' A> [F R]> [F [[[FixM'' A] F] fm]]> <<<fm R> [[[FixM'' A] F] fm]> reveal>> x]]] [<[<<<IndFixM'''' A> F> fm> d] Q> { β (λ x : * x) alg , Λ R : * Λ rvl : [[[Cast'' A] R] [[[FixM'' A] F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix'') λ ih : (ι ih : Π r : R [Q [<<<<cast'' A> R> [[[FixM'' A] F] fm]> rvl> r]] = ih λ d'' : * [d'' alg]) [<<<alg R> rvl> out> π ih] alg' . ∀ R : * ∀ reveal : [[[Cast'' A] R] [[[FixM'' A] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix'') Π _ : (ι ih : Π r : R [Q [<<<<cast'' A> R> [[[FixM'' A] F] fm]> reveal> r]] = ih λ d'' : * [d'' alg']) Π x : [F R] [Q [<<<inFix'' A> F> fm> [<<<<cast'' A> [F R]> [F [[[FixM'' A] F] fm]]> <<<fm R> [[[FixM'' A] F] fm]> reveal>> x]]] }].
let lambek'' := Λ A : * Λ F : Π _ : * * Λ fm : [[RecFunctor'' A] F] λ d : [[[FixM'' A] F] fm] [<[<<<IndFixM''''' A> F> fm> d] (λ d' : [[[FixM'' A] F] fm] = [inFix'' [outFix'' d']] d')> (Λ R : * Λ rvl : [[[Cast'' A] R] [[[FixM'' A] F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix'') λ ih : Π r : R = [inFix'' [outFix'' [cast'' r]]] [cast'' r] λ d' : [F R] ρ β [inFix'' [cast'' d']] λ x-x : * x-x x-x . = [inFix'' [outFix'' [inFix'' [cast'' d']]]] x-x β [inFix'' [outFix'' [inFix'' [cast'' d']]]] λ x-x : * x-x)].
let ListF := λ A : * λ List : * (ι x : = λ x : * x λ x : * x ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ nil : * λ cons : * nil] Π _ : Π x' : A Π x'' : List [X β (λ x''' : * x''') λ nil : * λ cons : * [[cons x'] x'']] [X x]) : Π _ : * Π List : * *.
let ListIndF := Λ A : * Λ List : * λ x : [[ListF A] List] Λ X : Π _ : [[ListF A] List] * λ nil : [X { β (λ x' : * x') λ nil : * λ cons : * nil , Λ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ nil : [X' β (λ x'' : * x'') λ nil : * λ cons : * nil] λ cons : Π x'' : A Π x''' : List [X' β (λ x'''' : * x'''') λ nil' : * λ cons : * [[cons x''] x''']] nil x' . ∀ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X' β (λ x'' : * x'') λ nil : * λ cons : * nil] Π _ : Π x'' : A Π x''' : List [X' β (λ x'''' : * x'''') λ nil : * λ cons : * [[cons x''] x''']] [X' x'] }] λ cons : Π x' : A Π x'' : List [X { β (λ x''' : * x''') λ nil' : * λ cons : * [[cons x'] x''] , Λ X' : Π _ : = λ x'''' : * x'''' λ x'''' : * x'''' * λ nil' : [X' β (λ x'''' : * x'''') λ nil' : * λ cons : * nil'] λ cons : Π x'''' : A Π x''''' : List [X' β (λ x'''''' : * x'''''') λ nil'' : * λ cons : * [[cons x''''] x''''']] [[cons x'] x''] x''' . ∀ X' : Π _ : = λ x'''' : * x'''' λ x'''' : * x'''' * Π _ : [X' β (λ x'''' : * x'''') λ nil' : * λ cons : * nil'] Π _ : Π x'''' : A Π x''''' : List [X' β (λ x'''''' : * x'''''') λ nil' : * λ cons : * [[cons x''''] x''''']] [X' x'''] }] <<[[<ψ x (λ x' : = λ x' : * x' λ x' : * x' ∀ y : [[ListF A] List] ∀ e : = y x' [X φ e y x'])> (Λ y : [[ListF A] List] Λ e : = y λ nil' : * λ cons' : * nil' nil)] (λ x' : A λ x'' : List Λ y : [[ListF A] List] Λ e : = y λ nil' : * λ cons' : * [[cons' x'] x''] [[cons x'] x''])] x> ρ β x λ x-x : * x-x x-x . = x x-x β x λ x-x : * x-x>.
let ListFmap := Λ A : * Λ A' : * Λ B : * Λ c : [[[Cast'' A] A'] B] { λ x : [[ListF A] A'] { π x , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ nil : [X β (λ x'' : * x'') λ nil : * λ cons : * nil] λ cons : Π x'' : A Π x''' : B [X β (λ x'''' : * x'''') λ nil' : * λ cons : * [[cons x''] x''']] [[<ψ x X> nil] (λ x' : A λ x'' : A' [[cons x'] [<<<<cast'' A> A'> B> c> x'']])] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X β (λ x'' : * x'') λ nil : * λ cons : * nil] Π _ : Π x'' : A Π x''' : B [X β (λ x'''' : * x'''') λ nil : * λ cons : * [[cons x''] x''']] [X x'] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ x : * x x-x β (λ x : * x) λ x-x : * x-x cast''' . = cast''' λ x : * x }.
let List := λ A : * [[[FixM'' A] [ListF A]] <ListFmap A>] : Π _ : * *.
let Is-List := λ A : * λ X : * ∀ Y : * Π _ : Π _ : (ι i : Π _ : X [List A] = i λ x : * x) Π _ : (ι i : Π _ : X [[ListF A] X] = i outFix'') Y Y : Π _ : * Π X : * *.
let is-List := Λ A : * Λ Y : * λ f : Π _ : (ι i : Π _ : [List A] [List A] = i λ x : * x) Π _ : (ι i : Π _ : [List A] [[ListF A] [List A]] = i outFix'') Y [[f { λ x : [List A] x , β (λ x : * x) λ x : * x i . = i λ x : * x }] { <<<outFix'' A> [ListF A]> <ListFmap A>> , β outFix'' outFix'' i . = i outFix'' }].
let to-List := Λ A : * Λ Y : * Λ mu : [[Is-List A] Y] φ ψ [<mu (ι i : Π _ : Y [List A] = i λ x : * x)> (λ c : (ι i : Π _ : Y [List A] = i λ x : * x) λ o : (ι i : Π _ : Y [[ListF A] Y] = i outFix'') c)] π [<mu (ι i : Π _ : Y [List A] = i λ x : * x)> (λ c : (ι i : Π _ : Y [List A] = i λ x : * x) λ o : (ι i : Π _ : Y [[ListF A] Y] = i outFix'') c)] λ x : * x.
let nil := Λ A : * [<<<inFix'' A> [ListF A]> <ListFmap A>> { β (λ x : * x) λ nil : * λ cons : * nil , Λ X : Π _ : = λ x' : * x' λ x' : * x' * λ nil : [X β (λ x' : * x') λ nil : * λ cons : * nil] λ cons : Π x' : A Π x'' : [[[FixM'' A] [ListF A]] <ListFmap A>] [X β (λ x''' : * x''') λ nil' : * λ cons : * [[cons x'] x'']] nil x . ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ nil : * λ cons : * nil] Π _ : Π x' : A Π x'' : [[[FixM'' A] [ListF A]] <ListFmap A>] [X β (λ x''' : * x''') λ nil : * λ cons : * [[cons x'] x'']] [X x] }].
let cons := Λ A : * λ x : A λ x' : [List A] [<<<inFix'' A> [ListF A]> <ListFmap A>> { β (λ x'' : * x'') λ nil' : * λ cons : * [[cons x] x'] , Λ X : Π _ : = λ x''' : * x''' λ x''' : * x''' * λ nil' : [X β (λ x''' : * x''') λ nil' : * λ cons : * nil'] λ cons : Π x''' : A Π x'''' : [[[FixM'' A] [ListF A]] <ListFmap A>] [X β (λ x''''' : * x''''') λ nil'' : * λ cons : * [[cons x'''] x'''']] [[cons x] x'] x'' . ∀ X : Π _ : = λ x''' : * x''' λ x''' : * x''' * Π _ : [X β (λ x''' : * x''') λ nil' : * λ cons : * nil'] Π _ : Π x''' : A Π x'''' : [[[FixM'' A] [ListF A]] <ListFmap A>] [X β (λ x''''' : * x''''') λ nil' : * λ cons : * [[cons x'''] x'''']] [X x''] }].
let inductionList := Λ A : * Λ P : Π _ : [List A] * λ pnil : [P <nil A>] λ pcons : Π a : A Π x : [List A] Π _ : [P x] [P [[<cons A> a] x]] λ x : [List A] [<[<<<IndFixM''''' A> [ListF A]> <ListFmap A>> x] P> (Λ Type-ind : * Λ to : [[[Cast'' A] Type-ind] [[[FixM'' A] [ListF A]] <ListFmap A>]] Λ out : (ι o : Π _ : Type-ind [[ListF A] Type-ind] = o outFix'') λ ind : Π r : Type-ind [P [<<<<cast'' A> Type-ind> [[[FixM'' A] [ListF A]] <ListFmap A>]> to> r]] λ y : [[ListF A] Type-ind] <<[[<φ ρ β y λ x-x : * x-x x-x . = [ListIndF y] x-x β [ListIndF y] λ x-x : * x-x [<<ListIndF A> Type-ind> y] y (λ y'' : [[ListF A] Type-ind] ∀ y''' : [List A] ∀ e : = [inFix'' y''] y''' [P φ e [<<<inFix'' A> [ListF A]> <ListFmap A>> [<<<<cast'' A> [[ListF A] Type-ind]> [[ListF A] [List A]]> <<<<ListFmap A> Type-ind> [List A]> to>> y'']] y'''])> (Λ y'' : [List A] Λ e : = [inFix'' (λ nil' : * λ cons' : * nil')] y'' ρ σ e x' . [P x'] pnil)] (λ a : A λ as' : Type-ind Λ y'' : [List A] Λ e : = [inFix'' (λ nil' : * λ cons' : * [[cons' a] as'])] y'' ρ σ e x' . [P x'] [[[pcons a] [<<<to-List A> Type-ind> Λ Y : * λ x' : Π _ : (ι i : Π _ : Type-ind [List A] = i λ x' : * x') Π _ : (ι i : Π _ : Type-ind [[ListF A] Type-ind] = i outFix'') Y [[x' to] out]> as']] [ind as']])] [<<<inFix'' A> [ListF A]> <ListFmap A>> [<<<<cast'' A> [[ListF A] Type-ind]> [[ListF A] [[[FixM'' A] [ListF A]] <ListFmap A>]]> <<<<ListFmap A> Type-ind> [List A]> [<Λ Y : * λ x' : Π _ : (ι i : Π _ : Type-ind [List A] = i λ x' : * x') Π _ : (ι i : Π _ : Type-ind [[ListF A] Type-ind] = i outFix'') Y [[x' to] out] [[[Cast'' A] Type-ind] [List A]]> (λ to' : (ι i : Π _ : Type-ind [List A] = i λ x' : * x') λ out' : (ι i : Π _ : Type-ind [[ListF A] Type-ind] = i outFix'') to')]>> y]]> [<<<lambek'' A> [ListF A]> <ListFmap A>> [<<<inFix'' A> [ListF A]> <ListFmap A>> [<<<<cast'' A> [[ListF A] Type-ind]> [[ListF A] [[[FixM'' A] [ListF A]] <ListFmap A>]]> <<<<ListFmap A> Type-ind> [List A]> [<Λ Y : * λ x' : Π _ : (ι i : Π _ : Type-ind [List A] = i λ x' : * x') Π _ : (ι i : Π _ : Type-ind [[ListF A] Type-ind] = i outFix'') Y [[x' to] out] [[[Cast'' A] Type-ind] [List A]]> (λ to' : (ι i : Π _ : Type-ind [List A] = i λ x' : * x') λ out' : (ι i : Π _ : Type-ind [[ListF A] Type-ind] = i outFix'') to')]>> y]]]>)].
let Top''' := λ A : * λ B : Π _ : A * = λ x : * x λ x : * x : Π A : * Π B : Π _ : A * *.
let Cast''' := λ A : * λ B : Π _ : A * λ A' : * λ B' : * (ι cast''' : Π _ : A' B' = cast''' λ x : * x) : Π A : * Π B : Π _ : A * Π A' : * Π B' : * *.
let cast''' := Λ A : * Λ B : Π _ : A * Λ A' : * Λ B' : * Λ c : [[[[Cast''' A] B] A'] B'] φ ψ c π c λ x : * x.
let RecFunctor''' := λ A : * λ B : Π _ : A * λ F : Π _ : * * ∀ X : * ∀ Y : * ∀ _ : [[[[Cast''' A] B] X] Y] [[[[Cast''' A] B] [F X]] [F Y]] : Π A : * Π B : Π _ : A * Π F : Π _ : * * *.
let Rec''' := λ A : * λ B : Π _ : A * λ F : Π _ : * * ∀ X : * ∀ _ : [[[[Cast''' A] B] [F X]] X] X : Π A : * Π B : Π _ : A * Π F : Π _ : * * *.
let recCast''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ X : * Λ c : [[[[Cast''' A] B] [F X]] X] { λ a : [[[Rec''' A] B] F] <<a X> c> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast'''' . = cast'''' λ x : * x }.
let recIn''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ fmap : [[[RecFunctor''' A] B] F] { λ a : [F [[[Rec''' A] B] F]] Λ X : * Λ c : [[[[Cast''' A] B] [F X]] X] [<<<<<cast''' A> B> [F X]> X> c> [<<<<<cast''' A> B> [F [[[Rec''' A] B] F]]> [F X]> <<<fmap [[[Rec''' A] B] F]> X> <<<<<recCast''' A> B> F> X> c>>> a]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * [cast''' [cast''' a]] x-x β (λ a : * [cast''' [cast''' a]]) λ x-x : * x-x cast'''' . = cast'''' λ x : * x }.
let recOut''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ fmap : [[[RecFunctor''' A] B] F] { λ a : [[[Rec''' A] B] F] <<a [F [[[Rec''' A] B] F]]> <<<fmap [F [[[Rec''' A] B] F]]> [[[Rec''' A] B] F]> <<<<recIn''' A> B> F> fmap>>> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast'''' . = cast'''' λ x : * x }.
let FixMF''' := λ A : * λ B : Π _ : A * λ F : Π _ : * * λ fm : [[[RecFunctor''' A] B] F] λ FixM''' : * (ι x : [[Top''' A] B] ∀ X : Π _ : [[Top''' A] B] * Π _ : (ι alg : [[Top''' A] B] ∀ R : * ∀ _ : [[[[Cast''' A] B] R] FixM'''] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d : * [d alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d : * [d alg'])] x']]) [X x]) : Π A : * Π B : Π _ : A * Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[[[Cast''' A] B] X] Y] [[[[Cast''' A] B] [F X]] [F Y]] Π FixM''' : * *.
let FixM''' := λ A : * λ B : Π _ : A * λ F : Π _ : * * λ fm : [[[RecFunctor''' A] B] F] [[[Rec''' A] B] [[[[FixMF''' A] B] F] fm]] : Π A : * Π B : Π _ : A * Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[[[Cast''' A] B] X] Y] [[[[Cast''' A] B] [F X]] [F Y]] *.
let FixFmap''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ fm : [[[RecFunctor''' A] B] F] Λ D : * Λ D' : * Λ c : [[[[Cast''' A] B] D] D'] { λ d : [[[[[FixMF''' A] B] F] fm] D] { π d , Λ X : Π _ : [[Top''' A] B] * λ alg : (ι alg : [[Top''' A] B] ∀ R : * ∀ _ : [[[[Cast''' A] B] R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [<ψ d X> { π alg , Λ R : * Λ reveal : [[[[Cast''' A] B] R] D] <<ψ alg R> { λ r : R [<<<<<cast''' A> B> D> D'> c> [<<<<<cast''' A> B> R> D> reveal> r]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ r : * [cast''' [cast''' r]] x-x β (λ r : * [cast''' [cast''' r]]) λ x-x : * x-x cast'''' . = cast'''' λ x : * x }> alg' . ∀ R : * ∀ _ : [[[[Cast''' A] B] R] D] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [X β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] x . ∀ X : Π _ : [[Top''' A] B] * Π _ : (ι alg : [[Top''' A] B] ∀ R : * ∀ _ : [[[[Cast''' A] B] R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d : * d x-x β (λ d : * d) λ x-x : * x-x cast'''' . = cast'''' λ x : * x }.
let inFixM''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ fm : [[[RecFunctor''' A] B] F] <<<<<cast''' A> B> [[[[[FixMF''' A] B] F] fm] [[[[FixM''' A] B] F] fm]]> [[[[FixM''' A] B] F] fm]> <<<<recIn''' A> B> [[[[FixMF''' A] B] F] fm]> <<<<FixFmap''' A> B> F> fm>>>.
let outFixM''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ fm : [[[RecFunctor''' A] B] F] <<<<<cast''' A> B> [[[[FixM''' A] B] F] fm]> [[[[[FixMF''' A] B] F] fm] [[[[FixM''' A] B] F] fm]]> <<<<recOut''' A> B> [[[[FixMF''' A] B] F] fm]> <<<<FixFmap''' A> B> F> fm>>>.
let inFix''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ fm : [[[RecFunctor''' A] B] F] λ d : [F [[[[FixM''' A] B] F] fm]] [<<<<inFixM''' A> B> F> fm> { β (λ x : * x) λ alg : * [[alg (λ d' : * [d' alg])] d] , Λ X : Π _ : [[Top''' A] B] * λ alg : (ι alg : [[Top''' A] B] ∀ R : * ∀ _ : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [[<<<ψ alg [[[[FixM''' A] B] F] fm]> { λ d' : [[[[FixM''' A] B] F] fm] d' , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d' : * d' x-x β (λ d' : * d') λ x-x : * x-x cast'''' . = cast'''' λ x : * x }> { λ d' : [[[[FixM''' A] B] F] fm] [<ψ [<<<<outFixM''' A> B> F> fm> d'] (λ x : [[Top''' A] B] [F [[[[FixM''' A] B] F] fm]])> { β (λ x : * x) λ e : * λ d'' : * d'' , Λ X' : * Λ reveal : [[[[Cast''' A] B] X'] [[[[FixM''' A] B] F] fm]] Λ p : (ι o : Π _ : X' [F X'] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) λ e : (ι ih : Π r : X' [(λ x : [[Top''' A] B] [F [[[[FixM''' A] B] F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' (λ e : * λ d''' : * d''')]) <<<<<cast''' A> B> [F X']> [F [[[[FixM''' A] B] F] fm]]> <<<fm X'> [[[[FixM''' A] B] F] fm]> reveal>> alg' . ∀ R : * ∀ _ : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) Π _ : (ι ih : Π r : R [(λ x : [[Top''' A] B] [F [[[[FixM''' A] B] F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' alg']) Π x' : [F R] [(λ x : [[Top''' A] B] [F [[[[FixM''' A] B] F] fm]]) β (λ x : * x) λ alg'' : * [[alg'' (λ d'' : * [d'' alg''])] x']] }] , β (λ d' : * [[outFixM''' d'] (λ e : * λ d'' : * d'')]) λ d' : * [d' (λ e : * λ d'' : * d'')] o . = o λ d' : * [d' (λ p : * λ d'' : * d'')] }> { λ d' : [[[[FixM''' A] B] F] fm] [<ψ [<<<<outFixM''' A> B> F> fm> d'] X> alg] , β (λ d' : * [[outFixM''' d'] alg]) λ d' : * [d' alg] ih . = ih λ d' : * [d' alg] }] d] x . ∀ X : Π _ : [[Top''' A] B] * Π _ : (ι alg : [[Top''' A] B] ∀ R : * ∀ _ : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] }].
let outFix''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ fm : [[[RecFunctor''' A] B] F] λ x : [[[[FixM''' A] B] F] fm] [<ψ [<<<<outFixM''' A> B> F> fm> x] (λ x' : [[Top''' A] B] [F [[[[FixM''' A] B] F] fm]])> { β (λ x' : * x') λ e : * λ d : * d , Λ R : * Λ c : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] Λ p : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) λ e : (ι ih : Π r : R [(λ x' : [[Top''' A] B] [F [[[[FixM''' A] B] F] fm]]) β (λ x' : * x') r] = ih λ d : * [d (λ e : * λ d' : * d')]) <<<<<cast''' A> B> [F R]> [F [[[[FixM''' A] B] F] fm]]> <<<fm R> [[[[FixM''' A] B] F] fm]> c>> alg . ∀ R : * ∀ _ : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [(λ x' : [[Top''' A] B] [F [[[[FixM''' A] B] F] fm]]) β (λ x' : * x') r] = ih λ d : * [d alg]) Π x'' : [F R] [(λ x' : [[Top''' A] B] [F [[[[FixM''' A] B] F] fm]]) β (λ x' : * x') λ alg' : * [[alg' (λ d : * [d alg'])] x'']] }].
let IndFixM'''''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ fm : [[[RecFunctor''' A] B] F] λ d : [[[[FixM''' A] B] F] fm] Λ Q : Π _ : [[[[FixM''' A] B] F] fm] * λ alg : (ι alg : [[Top''' A] B] ∀ R : * ∀ reveal : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix''') Π _ : (ι ih : Π r : R [Q [<<<<<cast''' A> B> R> [[[[FixM''' A] B] F] fm]> reveal> r]] = ih λ d' : * [d' alg]) Π x : [F R] [Q [<<<<inFix''' A> B> F> fm> [<<<<<cast''' A> B> [F R]> [F [[[[FixM''' A] B] F] fm]]> <<<fm R> [[[[FixM''' A] B] F] fm]> reveal>> x]]]) <<[<ψ [<<<<outFixM''' A> B> F> fm> d] (λ d' : [[Top''' A] B] ∀ d'' : [[[[FixM''' A] B] F] fm] ∀ e : = d'' d' [Q φ e d'' d'])> { β (λ x : * x) alg , Λ R : * Λ reveal : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] Λ out : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) λ ih : (ι ih : Π r : R [(λ d' : [[Top''' A] B] ∀ d'' : [[[[FixM''' A] B] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg]) λ d' : [F R] Λ d'' : [[[[FixM''' A] B] F] fm] Λ e : = d'' λ alg'' : * [[alg'' (λ d''' : * [d''' alg''])] d'] [[<<<ψ alg R> reveal> out> { λ r : R <<[π ih r] [<<<<<cast''' A> B> R> [[[[FixM''' A] B] F] fm]> reveal> r]> ρ β r λ x-x : * x-x x-x . = [cast''' r] x-x β [cast''' r] λ x-x : * x-x> , ψ ih ih' . = ih' λ d''' : * [d''' alg] }] d'] alg' . ∀ R : * ∀ _ : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [(λ d' : [[Top''' A] B] ∀ d'' : [[[[FixM''' A] B] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [(λ d' : [[Top''' A] B] ∀ d'' : [[[[FixM''' A] B] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] d> ρ β [outFixM''' d] λ x-x : * x-x x-x . = d x-x β d λ x-x : * x-x>.
let IndFixM''''''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ fm : [[[RecFunctor''' A] B] F] λ d : [[[[FixM''' A] B] F] fm] Λ Q : Π _ : [[[[FixM''' A] B] F] fm] * λ alg : ∀ R : * ∀ reveal : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix''') Π _ : Π r : R [Q [<<<<<cast''' A> B> R> [[[[FixM''' A] B] F] fm]> reveal> r]] Π x : [F R] [Q [<<<<inFix''' A> B> F> fm> [<<<<<cast''' A> B> [F R]> [F [[[[FixM''' A] B] F] fm]]> <<<fm R> [[[[FixM''' A] B] F] fm]> reveal>> x]]] [<[<<<<IndFixM'''''' A> B> F> fm> d] Q> { β (λ x : * x) alg , Λ R : * Λ rvl : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix''') λ ih : (ι ih : Π r : R [Q [<<<<<cast''' A> B> R> [[[[FixM''' A] B] F] fm]> rvl> r]] = ih λ d'' : * [d'' alg]) [<<<alg R> rvl> out> π ih] alg' . ∀ R : * ∀ reveal : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix''') Π _ : (ι ih : Π r : R [Q [<<<<<cast''' A> B> R> [[[[FixM''' A] B] F] fm]> reveal> r]] = ih λ d'' : * [d'' alg']) Π x : [F R] [Q [<<<<inFix''' A> B> F> fm> [<<<<<cast''' A> B> [F R]> [F [[[[FixM''' A] B] F] fm]]> <<<fm R> [[[[FixM''' A] B] F] fm]> reveal>> x]]] }].
let lambek''' := Λ A : * Λ B : Π _ : A * Λ F : Π _ : * * Λ fm : [[[RecFunctor''' A] B] F] λ d : [[[[FixM''' A] B] F] fm] [<[<<<<IndFixM''''''' A> B> F> fm> d] (λ d' : [[[[FixM''' A] B] F] fm] = [inFix''' [outFix''' d']] d')> (Λ R : * Λ rvl : [[[[Cast''' A] B] R] [[[[FixM''' A] B] F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix''') λ ih : Π r : R = [inFix''' [outFix''' [cast''' r]]] [cast''' r] λ d' : [F R] ρ β [inFix''' [cast''' d']] λ x-x : * x-x x-x . = [inFix''' [outFix''' [inFix''' [cast''' d']]]] x-x β [inFix''' [outFix''' [inFix''' [cast''' d']]]] λ x-x : * x-x)].
let DSumF := λ A : * λ B : Π _ : A * λ DSum : * (ι x : = λ x : * x λ x : * x ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : Π a : A Π x' : [B a] [X β (λ x'' : * x'') λ pair : * [[pair a] x']] [X x]) : Π A : * Π B : Π _ : A * Π DSum : * *.
let DSumIndF := Λ A : * Λ B : Π _ : A * Λ DSum : * λ x : [[[DSumF A] B] DSum] Λ X : Π _ : [[[DSumF A] B] DSum] * λ pair : Π a : A Π x' : [B a] [X { β (λ x'' : * x'') λ pair : * [[pair a] x'] , Λ X' : Π _ : = λ x''' : * x''' λ x''' : * x''' * λ pair : Π a' : A Π x''' : [B a'] [X' β (λ x'''' : * x'''') λ pair : * [[pair a'] x''']] [[pair a] x'] x'' . ∀ X' : Π _ : = λ x''' : * x''' λ x''' : * x''' * Π _ : Π a' : A Π x''' : [B a'] [X' β (λ x'''' : * x'''') λ pair : * [[pair a'] x''']] [X' x''] }] <<[<ψ x (λ x' : = λ x' : * x' λ x' : * x' ∀ y : [[[DSumF A] B] DSum] ∀ e : = y x' [X φ e y x'])> (λ a : A λ x' : [B a] Λ y : [[[DSumF A] B] DSum] Λ e : = y λ pair' : * [[pair' a] x'] [[pair a] x'])] x> ρ β x λ x-x : * x-x x-x . = x x-x β x λ x-x : * x-x>.
let DSumFmap := Λ A : * Λ B : Π _ : A * Λ A' : * Λ B' : * Λ c : [[[[Cast''' A] B] A'] B'] { λ x : [[[DSumF A] B] A'] { π x , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ pair : Π a : A Π x'' : [B a] [X β (λ x''' : * x''') λ pair : * [[pair a] x'']] [<ψ x X> (λ a : A λ x' : [B a] [[pair a] x'])] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : Π a : A Π x'' : [B a] [X β (λ x''' : * x''') λ pair : * [[pair a] x'']] [X x'] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ x : * x x-x β (λ x : * x) λ x-x : * x-x cast'''' . = cast'''' λ x : * x }.
let DSum := λ A : * λ B : Π _ : A * [[[[FixM''' A] B] [[DSumF A] B]] <<DSumFmap A> B>] : Π A : * Π B : Π _ : A * *.
let Is-DSum := λ A : * λ B : Π _ : A * λ X : * ∀ Y : * Π _ : Π _ : (ι i : Π _ : X [[DSum A] B] = i λ x : * x) Π _ : (ι i : Π _ : X [[[DSumF A] B] X] = i outFix''') Y Y : Π A : * Π B : Π _ : A * Π X : * *.
let is-DSum := Λ A : * Λ B : Π _ : A * Λ Y : * λ f : Π _ : (ι i : Π _ : [[DSum A] B] [[DSum A] B] = i λ x : * x) Π _ : (ι i : Π _ : [[DSum A] B] [[[DSumF A] B] [[DSum A] B]] = i outFix''') Y [[f { λ x : [[DSum A] B] x , β (λ x : * x) λ x : * x i . = i λ x : * x }] { <<<<outFix''' A> B> [[DSumF A] B]> <<DSumFmap A> B>> , β outFix''' outFix''' i . = i outFix''' }].
let to-DSum := Λ A : * Λ B : Π _ : A * Λ Y : * Λ mu : [[[Is-DSum A] B] Y] φ ψ [<mu (ι i : Π _ : Y [[DSum A] B] = i λ x : * x)> (λ c : (ι i : Π _ : Y [[DSum A] B] = i λ x : * x) λ o : (ι i : Π _ : Y [[[DSumF A] B] Y] = i outFix''') c)] π [<mu (ι i : Π _ : Y [[DSum A] B] = i λ x : * x)> (λ c : (ι i : Π _ : Y [[DSum A] B] = i λ x : * x) λ o : (ι i : Π _ : Y [[[DSumF A] B] Y] = i outFix''') c)] λ x : * x.
let pair := Λ A : * Λ B : Π _ : A * λ a : A λ x : [B a] [<<<<inFix''' A> B> [[DSumF A] B]> <<DSumFmap A> B>> { β (λ x' : * x') λ pair : * [[pair a] x] , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ pair : Π a' : A Π x'' : [B a'] [X β (λ x''' : * x''') λ pair : * [[pair a'] x'']] [[pair a] x] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : Π a' : A Π x'' : [B a'] [X β (λ x''' : * x''') λ pair : * [[pair a'] x'']] [X x'] }].
let inductionDSum := Λ A : * Λ B : Π _ : A * Λ P : Π _ : [[DSum A] B] * λ ppair : Π a : A Π b : [B a] [P [[<<pair A> B> a] b]] λ x : [[DSum A] B] [<[<<<<IndFixM''''''' A> B> [[DSumF A] B]> <<DSumFmap A> B>> x] P> (Λ Type-ind : * Λ to : [[[[Cast''' A] B] Type-ind] [[[[FixM''' A] B] [[DSumF A] B]] <<DSumFmap A> B>]] Λ out : (ι o : Π _ : Type-ind [[[DSumF A] B] Type-ind] = o outFix''') λ ind : Π r : Type-ind [P [<<<<<cast''' A> B> Type-ind> [[[[FixM''' A] B] [[DSumF A] B]] <<DSumFmap A> B>]> to> r]] λ y : [[[DSumF A] B] Type-ind] <<[<φ ρ β y λ x-x : * x-x x-x . = [DSumIndF y] x-x β [DSumIndF y] λ x-x : * x-x [<<<DSumIndF A> B> Type-ind> y] y (λ y'' : [[[DSumF A] B] Type-ind] ∀ y''' : [[DSum A] B] ∀ e : = [inFix''' y''] y''' [P φ e [<<<<inFix''' A> B> [[DSumF A] B]> <<DSumFmap A> B>> [<<<<<cast''' A> B> [[[DSumF A] B] Type-ind]> [[[DSumF A] B] [[DSum A] B]]> <<<<<DSumFmap A> B> Type-ind> [[DSum A] B]> to>> y'']] y'''])> (λ a : A λ b : [B a] Λ y'' : [[DSum A] B] Λ e : = [inFix''' (λ pair' : * [[pair' a] b])] y'' ρ σ e x' . [P x'] [[ppair a] b])] [<<<<inFix''' A> B> [[DSumF A] B]> <<DSumFmap A> B>> [<<<<<cast''' A> B> [[[DSumF A] B] Type-ind]> [[[DSumF A] B] [[[[FixM''' A] B] [[DSumF A] B]] <<DSumFmap A> B>]]> <<<<<DSumFmap A> B> Type-ind> [[DSum A] B]> [<Λ Y : * λ x' : Π _ : (ι i : Π _ : Type-ind [[DSum A] B] = i λ x' : * x') Π _ : (ι i : Π _ : Type-ind [[[DSumF A] B] Type-ind] = i outFix''') Y [[x' to] out] [[[[Cast''' A] B] Type-ind] [[DSum A] B]]> (λ to' : (ι i : Π _ : Type-ind [[DSum A] B] = i λ x' : * x') λ out' : (ι i : Π _ : Type-ind [[[DSumF A] B] Type-ind] = i outFix''') to')]>> y]]> [<<<<lambek''' A> B> [[DSumF A] B]> <<DSumFmap A> B>> [<<<<inFix''' A> B> [[DSumF A] B]> <<DSumFmap A> B>> [<<<<<cast''' A> B> [[[DSumF A] B] Type-ind]> [[[DSumF A] B] [[[[FixM''' A] B] [[DSumF A] B]] <<DSumFmap A> B>]]> <<<<<DSumFmap A> B> Type-ind> [[DSum A] B]> [<Λ Y : * λ x' : Π _ : (ι i : Π _ : Type-ind [[DSum A] B] = i λ x' : * x') Π _ : (ι i : Π _ : Type-ind [[[DSumF A] B] Type-ind] = i outFix''') Y [[x' to] out] [[[[Cast''' A] B] Type-ind] [[DSum A] B]]> (λ to' : (ι i : Π _ : Type-ind [[DSum A] B] = i λ x' : * x') λ out' : (ι i : Π _ : Type-ind [[[DSumF A] B] Type-ind] = i outFix''') to')]>> y]]]>)].
let Top'''' := λ A : * λ B : * = λ x : * x λ x : * x : Π _ : * Π B : * *.
let Cast'''' := λ A : * λ B : * λ A' : * λ B' : * (ι cast'''' : Π _ : A' B' = cast'''' λ x : * x) : Π _ : * Π B : * Π A' : * Π B' : * *.
let cast'''' := Λ A : * Λ B : * Λ A' : * Λ B' : * Λ c : [[[[Cast'''' A] B] A'] B'] φ ψ c π c λ x : * x.
let RecFunctor'''' := λ A : * λ B : * λ F : Π _ : * * ∀ X : * ∀ Y : * ∀ _ : [[[[Cast'''' A] B] X] Y] [[[[Cast'''' A] B] [F X]] [F Y]] : Π _ : * Π B : * Π F : Π _ : * * *.
let Rec'''' := λ A : * λ B : * λ F : Π _ : * * ∀ X : * ∀ _ : [[[[Cast'''' A] B] [F X]] X] X : Π _ : * Π B : * Π F : Π _ : * * *.
let recCast'''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ X : * Λ c : [[[[Cast'''' A] B] [F X]] X] { λ a : [[[Rec'''' A] B] F] <<a X> c> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast''''' . = cast''''' λ x : * x }.
let recIn'''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ fmap : [[[RecFunctor'''' A] B] F] { λ a : [F [[[Rec'''' A] B] F]] Λ X : * Λ c : [[[[Cast'''' A] B] [F X]] X] [<<<<<cast'''' A> B> [F X]> X> c> [<<<<<cast'''' A> B> [F [[[Rec'''' A] B] F]]> [F X]> <<<fmap [[[Rec'''' A] B] F]> X> <<<<<recCast'''' A> B> F> X> c>>> a]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * [cast'''' [cast'''' a]] x-x β (λ a : * [cast'''' [cast'''' a]]) λ x-x : * x-x cast''''' . = cast''''' λ x : * x }.
let recOut'''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ fmap : [[[RecFunctor'''' A] B] F] { λ a : [[[Rec'''' A] B] F] <<a [F [[[Rec'''' A] B] F]]> <<<fmap [F [[[Rec'''' A] B] F]]> [[[Rec'''' A] B] F]> <<<<recIn'''' A> B> F> fmap>>> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast''''' . = cast''''' λ x : * x }.
let FixMF'''' := λ A : * λ B : * λ F : Π _ : * * λ fm : [[[RecFunctor'''' A] B] F] λ FixM'''' : * (ι x : [[Top'''' A] B] ∀ X : Π _ : [[Top'''' A] B] * Π _ : (ι alg : [[Top'''' A] B] ∀ R : * ∀ _ : [[[[Cast'''' A] B] R] FixM''''] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d : * [d alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d : * [d alg'])] x']]) [X x]) : Π A : * Π B : * Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[[[Cast'''' A] B] X] Y] [[[[Cast'''' A] B] [F X]] [F Y]] Π FixM'''' : * *.
let FixM'''' := λ A : * λ B : * λ F : Π _ : * * λ fm : [[[RecFunctor'''' A] B] F] [[[Rec'''' A] B] [[[[FixMF'''' A] B] F] fm]] : Π A : * Π B : * Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[[[Cast'''' A] B] X] Y] [[[[Cast'''' A] B] [F X]] [F Y]] *.
let FixFmap'''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ fm : [[[RecFunctor'''' A] B] F] Λ D : * Λ D' : * Λ c : [[[[Cast'''' A] B] D] D'] { λ d : [[[[[FixMF'''' A] B] F] fm] D] { π d , Λ X : Π _ : [[Top'''' A] B] * λ alg : (ι alg : [[Top'''' A] B] ∀ R : * ∀ _ : [[[[Cast'''' A] B] R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [<ψ d X> { π alg , Λ R : * Λ reveal : [[[[Cast'''' A] B] R] D] <<ψ alg R> { λ r : R [<<<<<cast'''' A> B> D> D'> c> [<<<<<cast'''' A> B> R> D> reveal> r]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ r : * [cast'''' [cast'''' r]] x-x β (λ r : * [cast'''' [cast'''' r]]) λ x-x : * x-x cast''''' . = cast''''' λ x : * x }> alg' . ∀ R : * ∀ _ : [[[[Cast'''' A] B] R] D] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [X β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] x . ∀ X : Π _ : [[Top'''' A] B] * Π _ : (ι alg : [[Top'''' A] B] ∀ R : * ∀ _ : [[[[Cast'''' A] B] R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d : * d x-x β (λ d : * d) λ x-x : * x-x cast''''' . = cast''''' λ x : * x }.
let inFixM'''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ fm : [[[RecFunctor'''' A] B] F] <<<<<cast'''' A> B> [[[[[FixMF'''' A] B] F] fm] [[[[FixM'''' A] B] F] fm]]> [[[[FixM'''' A] B] F] fm]> <<<<recIn'''' A> B> [[[[FixMF'''' A] B] F] fm]> <<<<FixFmap'''' A> B> F> fm>>>.
let outFixM'''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ fm : [[[RecFunctor'''' A] B] F] <<<<<cast'''' A> B> [[[[FixM'''' A] B] F] fm]> [[[[[FixMF'''' A] B] F] fm] [[[[FixM'''' A] B] F] fm]]> <<<<recOut'''' A> B> [[[[FixMF'''' A] B] F] fm]> <<<<FixFmap'''' A> B> F> fm>>>.
let inFix'''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ fm : [[[RecFunctor'''' A] B] F] λ d : [F [[[[FixM'''' A] B] F] fm]] [<<<<inFixM'''' A> B> F> fm> { β (λ x : * x) λ alg : * [[alg (λ d' : * [d' alg])] d] , Λ X : Π _ : [[Top'''' A] B] * λ alg : (ι alg : [[Top'''' A] B] ∀ R : * ∀ _ : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [[<<<ψ alg [[[[FixM'''' A] B] F] fm]> { λ d' : [[[[FixM'''' A] B] F] fm] d' , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d' : * d' x-x β (λ d' : * d') λ x-x : * x-x cast''''' . = cast''''' λ x : * x }> { λ d' : [[[[FixM'''' A] B] F] fm] [<ψ [<<<<outFixM'''' A> B> F> fm> d'] (λ x : [[Top'''' A] B] [F [[[[FixM'''' A] B] F] fm]])> { β (λ x : * x) λ e : * λ d'' : * d'' , Λ X' : * Λ reveal : [[[[Cast'''' A] B] X'] [[[[FixM'''' A] B] F] fm]] Λ p : (ι o : Π _ : X' [F X'] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) λ e : (ι ih : Π r : X' [(λ x : [[Top'''' A] B] [F [[[[FixM'''' A] B] F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' (λ e : * λ d''' : * d''')]) <<<<<cast'''' A> B> [F X']> [F [[[[FixM'''' A] B] F] fm]]> <<<fm X'> [[[[FixM'''' A] B] F] fm]> reveal>> alg' . ∀ R : * ∀ _ : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) Π _ : (ι ih : Π r : R [(λ x : [[Top'''' A] B] [F [[[[FixM'''' A] B] F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' alg']) Π x' : [F R] [(λ x : [[Top'''' A] B] [F [[[[FixM'''' A] B] F] fm]]) β (λ x : * x) λ alg'' : * [[alg'' (λ d'' : * [d'' alg''])] x']] }] , β (λ d' : * [[outFixM'''' d'] (λ e : * λ d'' : * d'')]) λ d' : * [d' (λ e : * λ d'' : * d'')] o . = o λ d' : * [d' (λ p : * λ d'' : * d'')] }> { λ d' : [[[[FixM'''' A] B] F] fm] [<ψ [<<<<outFixM'''' A> B> F> fm> d'] X> alg] , β (λ d' : * [[outFixM'''' d'] alg]) λ d' : * [d' alg] ih . = ih λ d' : * [d' alg] }] d] x . ∀ X : Π _ : [[Top'''' A] B] * Π _ : (ι alg : [[Top'''' A] B] ∀ R : * ∀ _ : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] }].
let outFix'''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ fm : [[[RecFunctor'''' A] B] F] λ x : [[[[FixM'''' A] B] F] fm] [<ψ [<<<<outFixM'''' A> B> F> fm> x] (λ x' : [[Top'''' A] B] [F [[[[FixM'''' A] B] F] fm]])> { β (λ x' : * x') λ e : * λ d : * d , Λ R : * Λ c : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] Λ p : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) λ e : (ι ih : Π r : R [(λ x' : [[Top'''' A] B] [F [[[[FixM'''' A] B] F] fm]]) β (λ x' : * x') r] = ih λ d : * [d (λ e : * λ d' : * d')]) <<<<<cast'''' A> B> [F R]> [F [[[[FixM'''' A] B] F] fm]]> <<<fm R> [[[[FixM'''' A] B] F] fm]> c>> alg . ∀ R : * ∀ _ : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [(λ x' : [[Top'''' A] B] [F [[[[FixM'''' A] B] F] fm]]) β (λ x' : * x') r] = ih λ d : * [d alg]) Π x'' : [F R] [(λ x' : [[Top'''' A] B] [F [[[[FixM'''' A] B] F] fm]]) β (λ x' : * x') λ alg' : * [[alg' (λ d : * [d alg'])] x'']] }].
let IndFixM'''''''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ fm : [[[RecFunctor'''' A] B] F] λ d : [[[[FixM'''' A] B] F] fm] Λ Q : Π _ : [[[[FixM'''' A] B] F] fm] * λ alg : (ι alg : [[Top'''' A] B] ∀ R : * ∀ reveal : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix'''') Π _ : (ι ih : Π r : R [Q [<<<<<cast'''' A> B> R> [[[[FixM'''' A] B] F] fm]> reveal> r]] = ih λ d' : * [d' alg]) Π x : [F R] [Q [<<<<inFix'''' A> B> F> fm> [<<<<<cast'''' A> B> [F R]> [F [[[[FixM'''' A] B] F] fm]]> <<<fm R> [[[[FixM'''' A] B] F] fm]> reveal>> x]]]) <<[<ψ [<<<<outFixM'''' A> B> F> fm> d] (λ d' : [[Top'''' A] B] ∀ d'' : [[[[FixM'''' A] B] F] fm] ∀ e : = d'' d' [Q φ e d'' d'])> { β (λ x : * x) alg , Λ R : * Λ reveal : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] Λ out : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) λ ih : (ι ih : Π r : R [(λ d' : [[Top'''' A] B] ∀ d'' : [[[[FixM'''' A] B] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg]) λ d' : [F R] Λ d'' : [[[[FixM'''' A] B] F] fm] Λ e : = d'' λ alg'' : * [[alg'' (λ d''' : * [d''' alg''])] d'] [[<<<ψ alg R> reveal> out> { λ r : R <<[π ih r] [<<<<<cast'''' A> B> R> [[[[FixM'''' A] B] F] fm]> reveal> r]> ρ β r λ x-x : * x-x x-x . = [cast'''' r] x-x β [cast'''' r] λ x-x : * x-x> , ψ ih ih' . = ih' λ d''' : * [d''' alg] }] d'] alg' . ∀ R : * ∀ _ : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [(λ d' : [[Top'''' A] B] ∀ d'' : [[[[FixM'''' A] B] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [(λ d' : [[Top'''' A] B] ∀ d'' : [[[[FixM'''' A] B] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] d> ρ β [outFixM'''' d] λ x-x : * x-x x-x . = d x-x β d λ x-x : * x-x>.
let IndFixM''''''''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ fm : [[[RecFunctor'''' A] B] F] λ d : [[[[FixM'''' A] B] F] fm] Λ Q : Π _ : [[[[FixM'''' A] B] F] fm] * λ alg : ∀ R : * ∀ reveal : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix'''') Π _ : Π r : R [Q [<<<<<cast'''' A> B> R> [[[[FixM'''' A] B] F] fm]> reveal> r]] Π x : [F R] [Q [<<<<inFix'''' A> B> F> fm> [<<<<<cast'''' A> B> [F R]> [F [[[[FixM'''' A] B] F] fm]]> <<<fm R> [[[[FixM'''' A] B] F] fm]> reveal>> x]]] [<[<<<<IndFixM'''''''' A> B> F> fm> d] Q> { β (λ x : * x) alg , Λ R : * Λ rvl : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix'''') λ ih : (ι ih : Π r : R [Q [<<<<<cast'''' A> B> R> [[[[FixM'''' A] B] F] fm]> rvl> r]] = ih λ d'' : * [d'' alg]) [<<<alg R> rvl> out> π ih] alg' . ∀ R : * ∀ reveal : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix'''') Π _ : (ι ih : Π r : R [Q [<<<<<cast'''' A> B> R> [[[[FixM'''' A] B] F] fm]> reveal> r]] = ih λ d'' : * [d'' alg']) Π x : [F R] [Q [<<<<inFix'''' A> B> F> fm> [<<<<<cast'''' A> B> [F R]> [F [[[[FixM'''' A] B] F] fm]]> <<<fm R> [[[[FixM'''' A] B] F] fm]> reveal>> x]]] }].
let lambek'''' := Λ A : * Λ B : * Λ F : Π _ : * * Λ fm : [[[RecFunctor'''' A] B] F] λ d : [[[[FixM'''' A] B] F] fm] [<[<<<<IndFixM''''''''' A> B> F> fm> d] (λ d' : [[[[FixM'''' A] B] F] fm] = [inFix'''' [outFix'''' d']] d')> (Λ R : * Λ rvl : [[[[Cast'''' A] B] R] [[[[FixM'''' A] B] F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix'''') λ ih : Π r : R = [inFix'''' [outFix'''' [cast'''' r]]] [cast'''' r] λ d' : [F R] ρ β [inFix'''' [cast'''' d']] λ x-x : * x-x x-x . = [inFix'''' [outFix'''' [inFix'''' [cast'''' d']]]] x-x β [inFix'''' [outFix'''' [inFix'''' [cast'''' d']]]] λ x-x : * x-x)].
let SumF := λ A : * λ B : * λ Sum : * (ι x : = λ x : * x λ x : * x ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : Π x' : A [X β (λ x'' : * x'') λ inl : * λ inr : * [inl x']] Π _ : Π x' : B [X β (λ x'' : * x'') λ inl : * λ inr : * [inr x']] [X x]) : Π _ : * Π B : * Π Sum : * *.
let SumIndF := Λ A : * Λ B : * Λ Sum : * λ x : [[[SumF A] B] Sum] Λ X : Π _ : [[[SumF A] B] Sum] * λ inl : Π x' : A [X { β (λ x'' : * x'') λ inl : * λ inr : * [inl x'] , Λ X' : Π _ : = λ x''' : * x''' λ x''' : * x''' * λ inl : Π x''' : A [X' β (λ x'''' : * x'''') λ inl : * λ inr : * [inl x''']] λ inr : Π x''' : B [X' β (λ x'''' : * x'''') λ inl' : * λ inr : * [inr x''']] [inl x'] x'' . ∀ X' : Π _ : = λ x''' : * x''' λ x''' : * x''' * Π _ : Π x''' : A [X' β (λ x'''' : * x'''') λ inl : * λ inr : * [inl x''']] Π _ : Π x''' : B [X' β (λ x'''' : * x'''') λ inl : * λ inr : * [inr x''']] [X' x''] }] λ inr : Π x' : B [X { β (λ x'' : * x'') λ inl' : * λ inr : * [inr x'] , Λ X' : Π _ : = λ x''' : * x''' λ x''' : * x''' * λ inl' : Π x''' : A [X' β (λ x'''' : * x'''') λ inl' : * λ inr : * [inl' x''']] λ inr : Π x''' : B [X' β (λ x'''' : * x'''') λ inl'' : * λ inr : * [inr x''']] [inr x'] x'' . ∀ X' : Π _ : = λ x''' : * x''' λ x''' : * x''' * Π _ : Π x''' : A [X' β (λ x'''' : * x'''') λ inl' : * λ inr : * [inl' x''']] Π _ : Π x''' : B [X' β (λ x'''' : * x'''') λ inl' : * λ inr : * [inr x''']] [X' x''] }] <<[[<ψ x (λ x' : = λ x' : * x' λ x' : * x' ∀ y : [[[SumF A] B] Sum] ∀ e : = y x' [X φ e y x'])> (λ x' : A Λ y : [[[SumF A] B] Sum] Λ e : = y λ inl' : * λ inr' : * [inl' x'] [inl x'])] (λ x' : B Λ y : [[[SumF A] B] Sum] Λ e : = y λ inl' : * λ inr' : * [inr' x'] [inr x'])] x> ρ β x λ x-x : * x-x x-x . = x x-x β x λ x-x : * x-x>.
let SumFmap := Λ A : * Λ B : * Λ A' : * Λ B' : * Λ c : [[[[Cast'''' A] B] A'] B'] { λ x : [[[SumF A] B] A'] { π x , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ inl : Π x'' : A [X β (λ x''' : * x''') λ inl : * λ inr : * [inl x'']] λ inr : Π x'' : B [X β (λ x''' : * x''') λ inl' : * λ inr : * [inr x'']] [[<ψ x X> (λ x' : A [inl x'])] (λ x' : B [inr x'])] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : Π x'' : A [X β (λ x''' : * x''') λ inl : * λ inr : * [inl x'']] Π _ : Π x'' : B [X β (λ x''' : * x''') λ inl : * λ inr : * [inr x'']] [X x'] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ x : * x x-x β (λ x : * x) λ x-x : * x-x cast''''' . = cast''''' λ x : * x }.
let Sum := λ A : * λ B : * [[[[FixM'''' A] B] [[SumF A] B]] <<SumFmap A> B>] : Π _ : * Π B : * *.
let Is-Sum := λ A : * λ B : * λ X : * ∀ Y : * Π _ : Π _ : (ι i : Π _ : X [[Sum A] B] = i λ x : * x) Π _ : (ι i : Π _ : X [[[SumF A] B] X] = i outFix'''') Y Y : Π _ : * Π B : * Π X : * *.
let is-Sum := Λ A : * Λ B : * Λ Y : * λ f : Π _ : (ι i : Π _ : [[Sum A] B] [[Sum A] B] = i λ x : * x) Π _ : (ι i : Π _ : [[Sum A] B] [[[SumF A] B] [[Sum A] B]] = i outFix'''') Y [[f { λ x : [[Sum A] B] x , β (λ x : * x) λ x : * x i . = i λ x : * x }] { <<<<outFix'''' A> B> [[SumF A] B]> <<SumFmap A> B>> , β outFix'''' outFix'''' i . = i outFix'''' }].
let to-Sum := Λ A : * Λ B : * Λ Y : * Λ mu : [[[Is-Sum A] B] Y] φ ψ [<mu (ι i : Π _ : Y [[Sum A] B] = i λ x : * x)> (λ c : (ι i : Π _ : Y [[Sum A] B] = i λ x : * x) λ o : (ι i : Π _ : Y [[[SumF A] B] Y] = i outFix'''') c)] π [<mu (ι i : Π _ : Y [[Sum A] B] = i λ x : * x)> (λ c : (ι i : Π _ : Y [[Sum A] B] = i λ x : * x) λ o : (ι i : Π _ : Y [[[SumF A] B] Y] = i outFix'''') c)] λ x : * x.
let inl := Λ A : * Λ B : * λ x : A [<<<<inFix'''' A> B> [[SumF A] B]> <<SumFmap A> B>> { β (λ x' : * x') λ inl : * λ inr : * [inl x] , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ inl : Π x'' : A [X β (λ x''' : * x''') λ inl : * λ inr : * [inl x'']] λ inr : Π x'' : B [X β (λ x''' : * x''') λ inl' : * λ inr : * [inr x'']] [inl x] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : Π x'' : A [X β (λ x''' : * x''') λ inl : * λ inr : * [inl x'']] Π _ : Π x'' : B [X β (λ x''' : * x''') λ inl : * λ inr : * [inr x'']] [X x'] }].
let inr := Λ A : * Λ B : * λ x : B [<<<<inFix'''' A> B> [[SumF A] B]> <<SumFmap A> B>> { β (λ x' : * x') λ inl' : * λ inr : * [inr x] , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ inl' : Π x'' : A [X β (λ x''' : * x''') λ inl' : * λ inr : * [inl' x'']] λ inr : Π x'' : B [X β (λ x''' : * x''') λ inl'' : * λ inr : * [inr x'']] [inr x] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : Π x'' : A [X β (λ x''' : * x''') λ inl' : * λ inr : * [inl' x'']] Π _ : Π x'' : B [X β (λ x''' : * x''') λ inl' : * λ inr : * [inr x'']] [X x'] }].
let inductionSum := Λ A : * Λ B : * Λ P : Π _ : [[Sum A] B] * λ pinl : Π a : A [P [<<inl A> B> a]] λ pinr : Π b : B [P [<<inr A> B> b]] λ x : [[Sum A] B] [<[<<<<IndFixM''''''''' A> B> [[SumF A] B]> <<SumFmap A> B>> x] P> (Λ Type-ind : * Λ to : [[[[Cast'''' A] B] Type-ind] [[[[FixM'''' A] B] [[SumF A] B]] <<SumFmap A> B>]] Λ out : (ι o : Π _ : Type-ind [[[SumF A] B] Type-ind] = o outFix'''') λ ind : Π r : Type-ind [P [<<<<<cast'''' A> B> Type-ind> [[[[FixM'''' A] B] [[SumF A] B]] <<SumFmap A> B>]> to> r]] λ y : [[[SumF A] B] Type-ind] <<[[<φ ρ β y λ x-x : * x-x x-x . = [SumIndF y] x-x β [SumIndF y] λ x-x : * x-x [<<<SumIndF A> B> Type-ind> y] y (λ y'' : [[[SumF A] B] Type-ind] ∀ y''' : [[Sum A] B] ∀ e : = [inFix'''' y''] y''' [P φ e [<<<<inFix'''' A> B> [[SumF A] B]> <<SumFmap A> B>> [<<<<<cast'''' A> B> [[[SumF A] B] Type-ind]> [[[SumF A] B] [[Sum A] B]]> <<<<<SumFmap A> B> Type-ind> [[Sum A] B]> to>> y'']] y'''])> (λ a : A Λ y'' : [[Sum A] B] Λ e : = [inFix'''' (λ inl' : * λ inr' : * [inl' a])] y'' ρ σ e x' . [P x'] [pinl a])] (λ b : B Λ y'' : [[Sum A] B] Λ e : = [inFix'''' (λ inl' : * λ inr' : * [inr' b])] y'' ρ σ e x' . [P x'] [pinr b])] [<<<<inFix'''' A> B> [[SumF A] B]> <<SumFmap A> B>> [<<<<<cast'''' A> B> [[[SumF A] B] Type-ind]> [[[SumF A] B] [[[[FixM'''' A] B] [[SumF A] B]] <<SumFmap A> B>]]> <<<<<SumFmap A> B> Type-ind> [[Sum A] B]> [<Λ Y : * λ x' : Π _ : (ι i : Π _ : Type-ind [[Sum A] B] = i λ x' : * x') Π _ : (ι i : Π _ : Type-ind [[[SumF A] B] Type-ind] = i outFix'''') Y [[x' to] out] [[[[Cast'''' A] B] Type-ind] [[Sum A] B]]> (λ to' : (ι i : Π _ : Type-ind [[Sum A] B] = i λ x' : * x') λ out' : (ι i : Π _ : Type-ind [[[SumF A] B] Type-ind] = i outFix'''') to')]>> y]]> [<<<<lambek'''' A> B> [[SumF A] B]> <<SumFmap A> B>> [<<<<inFix'''' A> B> [[SumF A] B]> <<SumFmap A> B>> [<<<<<cast'''' A> B> [[[SumF A] B] Type-ind]> [[[SumF A] B] [[[[FixM'''' A] B] [[SumF A] B]] <<SumFmap A> B>]]> <<<<<SumFmap A> B> Type-ind> [[Sum A] B]> [<Λ Y : * λ x' : Π _ : (ι i : Π _ : Type-ind [[Sum A] B] = i λ x' : * x') Π _ : (ι i : Π _ : Type-ind [[[SumF A] B] Type-ind] = i outFix'''') Y [[x' to] out] [[[[Cast'''' A] B] Type-ind] [[Sum A] B]]> (λ to' : (ι i : Π _ : Type-ind [[Sum A] B] = i λ x' : * x') λ out' : (ι i : Π _ : Type-ind [[[SumF A] B] Type-ind] = i outFix'''') to')]>> y]]]>)].
let Top''''' := λ Atom : * = λ x : * x λ x : * x : Π _ : * *.
let Cast''''' := λ Atom : * λ A : * λ B : * (ι cast''''' : Π _ : A B = cast''''' λ x : * x) : Π _ : * Π A : * Π B : * *.
let cast''''' := Λ Atom : * Λ A : * Λ B : * Λ c : [[[Cast''''' Atom] A] B] φ ψ c π c λ x : * x.
let RecFunctor''''' := λ Atom : * λ F : Π _ : * * ∀ X : * ∀ Y : * ∀ _ : [[[Cast''''' Atom] X] Y] [[[Cast''''' Atom] [F X]] [F Y]] : Π _ : * Π F : Π _ : * * *.
let Rec''''' := λ Atom : * λ F : Π _ : * * ∀ X : * ∀ _ : [[[Cast''''' Atom] [F X]] X] X : Π _ : * Π F : Π _ : * * *.
let recCast''''' := Λ Atom : * Λ F : Π _ : * * Λ X : * Λ c : [[[Cast''''' Atom] [F X]] X] { λ a : [[Rec''''' Atom] F] <<a X> c> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast'''''' . = cast'''''' λ x : * x }.
let recIn''''' := Λ Atom : * Λ F : Π _ : * * Λ fmap : [[RecFunctor''''' Atom] F] { λ a : [F [[Rec''''' Atom] F]] Λ X : * Λ c : [[[Cast''''' Atom] [F X]] X] [<<<<cast''''' Atom> [F X]> X> c> [<<<<cast''''' Atom> [F [[Rec''''' Atom] F]]> [F X]> <<<fmap [[Rec''''' Atom] F]> X> <<<<recCast''''' Atom> F> X> c>>> a]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * [cast''''' [cast''''' a]] x-x β (λ a : * [cast''''' [cast''''' a]]) λ x-x : * x-x cast'''''' . = cast'''''' λ x : * x }.
let recOut''''' := Λ Atom : * Λ F : Π _ : * * Λ fmap : [[RecFunctor''''' Atom] F] { λ a : [[Rec''''' Atom] F] <<a [F [[Rec''''' Atom] F]]> <<<fmap [F [[Rec''''' Atom] F]]> [[Rec''''' Atom] F]> <<<recIn''''' Atom> F> fmap>>> , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ a : * a x-x β (λ a : * a) λ x-x : * x-x cast'''''' . = cast'''''' λ x : * x }.
let FixMF''''' := λ Atom : * λ F : Π _ : * * λ fm : [[RecFunctor''''' Atom] F] λ FixM''''' : * (ι x : [Top''''' Atom] ∀ X : Π _ : [Top''''' Atom] * Π _ : (ι alg : [Top''''' Atom] ∀ R : * ∀ _ : [[[Cast''''' Atom] R] FixM'''''] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d : * [d alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d : * [d alg'])] x']]) [X x]) : Π Atom : * Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[[Cast''''' Atom] X] Y] [[[Cast''''' Atom] [F X]] [F Y]] Π FixM''''' : * *.
let FixM''''' := λ Atom : * λ F : Π _ : * * λ fm : [[RecFunctor''''' Atom] F] [[Rec''''' Atom] [[[FixMF''''' Atom] F] fm]] : Π Atom : * Π F : Π _ : * * Π fm : ∀ X : * ∀ Y : * ∀ _ : [[[Cast''''' Atom] X] Y] [[[Cast''''' Atom] [F X]] [F Y]] *.
let FixFmap''''' := Λ Atom : * Λ F : Π _ : * * Λ fm : [[RecFunctor''''' Atom] F] Λ D : * Λ D' : * Λ c : [[[Cast''''' Atom] D] D'] { λ d : [[[[FixMF''''' Atom] F] fm] D] { π d , Λ X : Π _ : [Top''''' Atom] * λ alg : (ι alg : [Top''''' Atom] ∀ R : * ∀ _ : [[[Cast''''' Atom] R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [<ψ d X> { π alg , Λ R : * Λ reveal : [[[Cast''''' Atom] R] D] <<ψ alg R> { λ r : R [<<<<cast''''' Atom> D> D'> c> [<<<<cast''''' Atom> R> D> reveal> r]] , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ r : * [cast''''' [cast''''' r]] x-x β (λ r : * [cast''''' [cast''''' r]]) λ x-x : * x-x cast'''''' . = cast'''''' λ x : * x }> alg' . ∀ R : * ∀ _ : [[[Cast''''' Atom] R] D] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [X β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] x . ∀ X : Π _ : [Top''''' Atom] * Π _ : (ι alg : [Top''''' Atom] ∀ R : * ∀ _ : [[[Cast''''' Atom] R] D'] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d : * d x-x β (λ d : * d) λ x-x : * x-x cast'''''' . = cast'''''' λ x : * x }.
let inFixM''''' := Λ Atom : * Λ F : Π _ : * * Λ fm : [[RecFunctor''''' Atom] F] <<<<cast''''' Atom> [[[[FixMF''''' Atom] F] fm] [[[FixM''''' Atom] F] fm]]> [[[FixM''''' Atom] F] fm]> <<<recIn''''' Atom> [[[FixMF''''' Atom] F] fm]> <<<FixFmap''''' Atom> F> fm>>>.
let outFixM''''' := Λ Atom : * Λ F : Π _ : * * Λ fm : [[RecFunctor''''' Atom] F] <<<<cast''''' Atom> [[[FixM''''' Atom] F] fm]> [[[[FixMF''''' Atom] F] fm] [[[FixM''''' Atom] F] fm]]> <<<recOut''''' Atom> [[[FixMF''''' Atom] F] fm]> <<<FixFmap''''' Atom> F> fm>>>.
let inFix''''' := Λ Atom : * Λ F : Π _ : * * Λ fm : [[RecFunctor''''' Atom] F] λ d : [F [[[FixM''''' Atom] F] fm]] [<<<inFixM''''' Atom> F> fm> { β (λ x : * x) λ alg : * [[alg (λ d' : * [d' alg])] d] , Λ X : Π _ : [Top''''' Atom] * λ alg : (ι alg : [Top''''' Atom] ∀ R : * ∀ _ : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x : * x) r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x : * x) λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [[<<<ψ alg [[[FixM''''' Atom] F] fm]> { λ d' : [[[FixM''''' Atom] F] fm] d' , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ d' : * d' x-x β (λ d' : * d') λ x-x : * x-x cast'''''' . = cast'''''' λ x : * x }> { λ d' : [[[FixM''''' Atom] F] fm] [<ψ [<<<outFixM''''' Atom> F> fm> d'] (λ x : [Top''''' Atom] [F [[[FixM''''' Atom] F] fm]])> { β (λ x : * x) λ e : * λ d'' : * d'' , Λ X' : * Λ reveal : [[[Cast''''' Atom] X'] [[[FixM''''' Atom] F] fm]] Λ p : (ι o : Π _ : X' [F X'] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) λ e : (ι ih : Π r : X' [(λ x : [Top''''' Atom] [F [[[FixM''''' Atom] F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' (λ e : * λ d''' : * d''')]) <<<<cast''''' Atom> [F X']> [F [[[FixM''''' Atom] F] fm]]> <<<fm X'> [[[FixM''''' Atom] F] fm]> reveal>> alg' . ∀ R : * ∀ _ : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d'' : * [d'' (λ p : * λ d''' : * d''')]) Π _ : (ι ih : Π r : R [(λ x : [Top''''' Atom] [F [[[FixM''''' Atom] F] fm]]) β (λ x : * x) r] = ih λ d'' : * [d'' alg']) Π x' : [F R] [(λ x : [Top''''' Atom] [F [[[FixM''''' Atom] F] fm]]) β (λ x : * x) λ alg'' : * [[alg'' (λ d'' : * [d'' alg''])] x']] }] , β (λ d' : * [[outFixM''''' d'] (λ e : * λ d'' : * d'')]) λ d' : * [d' (λ e : * λ d'' : * d'')] o . = o λ d' : * [d' (λ p : * λ d'' : * d'')] }> { λ d' : [[[FixM''''' Atom] F] fm] [<ψ [<<<outFixM''''' Atom> F> fm> d'] X> alg] , β (λ d' : * [[outFixM''''' d'] alg]) λ d' : * [d' alg] ih . = ih λ d' : * [d' alg] }] d] x . ∀ X : Π _ : [Top''''' Atom] * Π _ : (ι alg : [Top''''' Atom] ∀ R : * ∀ _ : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [X β (λ x' : * x') r] = ih λ d' : * [d' alg]) Π x' : [F R] [X β (λ x'' : * x'') λ alg' : * [[alg' (λ d' : * [d' alg'])] x']]) [X x] }].
let outFix''''' := Λ Atom : * Λ F : Π _ : * * Λ fm : [[RecFunctor''''' Atom] F] λ x : [[[FixM''''' Atom] F] fm] [<ψ [<<<outFixM''''' Atom> F> fm> x] (λ x' : [Top''''' Atom] [F [[[FixM''''' Atom] F] fm]])> { β (λ x' : * x') λ e : * λ d : * d , Λ R : * Λ c : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] Λ p : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) λ e : (ι ih : Π r : R [(λ x' : [Top''''' Atom] [F [[[FixM''''' Atom] F] fm]]) β (λ x' : * x') r] = ih λ d : * [d (λ e : * λ d' : * d')]) <<<<cast''''' Atom> [F R]> [F [[[FixM''''' Atom] F] fm]]> <<<fm R> [[[FixM''''' Atom] F] fm]> c>> alg . ∀ R : * ∀ _ : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d : * [d (λ p : * λ d' : * d')]) Π _ : (ι ih : Π r : R [(λ x' : [Top''''' Atom] [F [[[FixM''''' Atom] F] fm]]) β (λ x' : * x') r] = ih λ d : * [d alg]) Π x'' : [F R] [(λ x' : [Top''''' Atom] [F [[[FixM''''' Atom] F] fm]]) β (λ x' : * x') λ alg' : * [[alg' (λ d : * [d alg'])] x'']] }].
let IndFixM'''''''''' := Λ Atom : * Λ F : Π _ : * * Λ fm : [[RecFunctor''''' Atom] F] λ d : [[[FixM''''' Atom] F] fm] Λ Q : Π _ : [[[FixM''''' Atom] F] fm] * λ alg : (ι alg : [Top''''' Atom] ∀ R : * ∀ reveal : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix''''') Π _ : (ι ih : Π r : R [Q [<<<<cast''''' Atom> R> [[[FixM''''' Atom] F] fm]> reveal> r]] = ih λ d' : * [d' alg]) Π x : [F R] [Q [<<<inFix''''' Atom> F> fm> [<<<<cast''''' Atom> [F R]> [F [[[FixM''''' Atom] F] fm]]> <<<fm R> [[[FixM''''' Atom] F] fm]> reveal>> x]]]) <<[<ψ [<<<outFixM''''' Atom> F> fm> d] (λ d' : [Top''''' Atom] ∀ d'' : [[[FixM''''' Atom] F] fm] ∀ e : = d'' d' [Q φ e d'' d'])> { β (λ x : * x) alg , Λ R : * Λ reveal : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] Λ out : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) λ ih : (ι ih : Π r : R [(λ d' : [Top''''' Atom] ∀ d'' : [[[FixM''''' Atom] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg]) λ d' : [F R] Λ d'' : [[[FixM''''' Atom] F] fm] Λ e : = d'' λ alg'' : * [[alg'' (λ d''' : * [d''' alg''])] d'] [[<<<ψ alg R> reveal> out> { λ r : R <<[π ih r] [<<<<cast''''' Atom> R> [[[FixM''''' Atom] F] fm]> reveal> r]> ρ β r λ x-x : * x-x x-x . = [cast''''' r] x-x β [cast''''' r] λ x-x : * x-x> , ψ ih ih' . = ih' λ d''' : * [d''' alg] }] d'] alg' . ∀ R : * ∀ _ : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o λ d' : * [d' (λ p : * λ d'' : * d'')]) Π _ : (ι ih : Π r : R [(λ d' : [Top''''' Atom] ∀ d'' : [[[FixM''''' Atom] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) r] = ih λ d' : * [d' alg']) Π x' : [F R] [(λ d' : [Top''''' Atom] ∀ d'' : [[[FixM''''' Atom] F] fm] ∀ e : = d'' d' [Q φ e d'' d']) β (λ x : * x) λ alg'' : * [[alg'' (λ d' : * [d' alg''])] x']] }] d> ρ β [outFixM''''' d] λ x-x : * x-x x-x . = d x-x β d λ x-x : * x-x>.
let IndFixM''''''''''' := Λ Atom : * Λ F : Π _ : * * Λ fm : [[RecFunctor''''' Atom] F] λ d : [[[FixM''''' Atom] F] fm] Λ Q : Π _ : [[[FixM''''' Atom] F] fm] * λ alg : ∀ R : * ∀ reveal : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix''''') Π _ : Π r : R [Q [<<<<cast''''' Atom> R> [[[FixM''''' Atom] F] fm]> reveal> r]] Π x : [F R] [Q [<<<inFix''''' Atom> F> fm> [<<<<cast''''' Atom> [F R]> [F [[[FixM''''' Atom] F] fm]]> <<<fm R> [[[FixM''''' Atom] F] fm]> reveal>> x]]] [<[<<<IndFixM'''''''''' Atom> F> fm> d] Q> { β (λ x : * x) alg , Λ R : * Λ rvl : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix''''') λ ih : (ι ih : Π r : R [Q [<<<<cast''''' Atom> R> [[[FixM''''' Atom] F] fm]> rvl> r]] = ih λ d'' : * [d'' alg]) [<<<alg R> rvl> out> π ih] alg' . ∀ R : * ∀ reveal : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] ∀ _ : (ι o : Π _ : R [F R] = o outFix''''') Π _ : (ι ih : Π r : R [Q [<<<<cast''''' Atom> R> [[[FixM''''' Atom] F] fm]> reveal> r]] = ih λ d'' : * [d'' alg']) Π x : [F R] [Q [<<<inFix''''' Atom> F> fm> [<<<<cast''''' Atom> [F R]> [F [[[FixM''''' Atom] F] fm]]> <<<fm R> [[[FixM''''' Atom] F] fm]> reveal>> x]]] }].
let lambek''''' := Λ Atom : * Λ F : Π _ : * * Λ fm : [[RecFunctor''''' Atom] F] λ d : [[[FixM''''' Atom] F] fm] [<[<<<IndFixM''''''''''' Atom> F> fm> d] (λ d' : [[[FixM''''' Atom] F] fm] = [inFix''''' [outFix''''' d']] d')> (Λ R : * Λ rvl : [[[Cast''''' Atom] R] [[[FixM''''' Atom] F] fm]] Λ out : (ι o : Π _ : R [F R] = o outFix''''') λ ih : Π r : R = [inFix''''' [outFix''''' [cast''''' r]]] [cast''''' r] λ d' : [F R] ρ β [inFix''''' [cast''''' d']] λ x-x : * x-x x-x . = [inFix''''' [outFix''''' [inFix''''' [cast''''' d']]]] x-x β [inFix''''' [outFix''''' [inFix''''' [cast''''' d']]]] λ x-x : * x-x)].
let SexpF := λ Atom : * λ Sexp : * (ι x : = λ x : * x λ x : * x ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ Nil : * λ ConsSexp : * λ ConsAtom : * Nil] Π _ : Π x' : Sexp Π x'' : Bool Π x''' : Sexp [X β (λ x'''' : * x'''') λ Nil : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x'] x''] x''']] Π _ : Π x' : Atom Π x'' : Bool Π x''' : Sexp [X β (λ x'''' : * x'''') λ Nil : * λ ConsSexp : * λ ConsAtom : * [[[ConsAtom x'] x''] x''']] [X x]) : Π _ : * Π Sexp : * *.
let SexpIndF := Λ Atom : * Λ Sexp : * λ x : [[SexpF Atom] Sexp] Λ X : Π _ : [[SexpF Atom] Sexp] * λ Nil : [X { β (λ x' : * x') λ Nil : * λ ConsSexp : * λ ConsAtom : * Nil , Λ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ Nil : [X' β (λ x'' : * x'') λ Nil : * λ ConsSexp : * λ ConsAtom : * Nil] λ ConsSexp : Π x'' : Sexp Π x''' : Bool Π x'''' : Sexp [X' β (λ x''''' : * x''''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x''] x'''] x'''']] λ ConsAtom : Π x'' : Atom Π x''' : Bool Π x'''' : Sexp [X' β (λ x''''' : * x''''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsAtom x''] x'''] x'''']] Nil x' . ∀ X' : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X' β (λ x'' : * x'') λ Nil : * λ ConsSexp : * λ ConsAtom : * Nil] Π _ : Π x'' : Sexp Π x''' : Bool Π x'''' : Sexp [X' β (λ x''''' : * x''''') λ Nil : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x''] x'''] x'''']] Π _ : Π x'' : Atom Π x''' : Bool Π x'''' : Sexp [X' β (λ x''''' : * x''''') λ Nil : * λ ConsSexp : * λ ConsAtom : * [[[ConsAtom x''] x'''] x'''']] [X' x'] }] λ ConsSexp : Π x' : Sexp Π x'' : Bool Π x''' : Sexp [X { β (λ x'''' : * x'''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x'] x''] x'''] , Λ X' : Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * λ Nil' : [X' β (λ x''''' : * x''''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * Nil'] λ ConsSexp : Π x''''' : Sexp Π x'''''' : Bool Π x''''''' : Sexp [X' β (λ x'''''''' : * x'''''''') λ Nil'' : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x'''''] x''''''] x''''''']] λ ConsAtom : Π x''''' : Atom Π x'''''' : Bool Π x''''''' : Sexp [X' β (λ x'''''''' : * x'''''''') λ Nil'' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsAtom x'''''] x''''''] x''''''']] [[[ConsSexp x'] x''] x'''] x'''' . ∀ X' : Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * Π _ : [X' β (λ x''''' : * x''''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * Nil'] Π _ : Π x''''' : Sexp Π x'''''' : Bool Π x''''''' : Sexp [X' β (λ x'''''''' : * x'''''''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x'''''] x''''''] x''''''']] Π _ : Π x''''' : Atom Π x'''''' : Bool Π x''''''' : Sexp [X' β (λ x'''''''' : * x'''''''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * [[[ConsAtom x'''''] x''''''] x''''''']] [X' x''''] }] λ ConsAtom : Π x' : Atom Π x'' : Bool Π x''' : Sexp [X { β (λ x'''' : * x'''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsAtom x'] x''] x'''] , Λ X' : Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * λ Nil' : [X' β (λ x''''' : * x''''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * Nil'] λ ConsSexp' : Π x''''' : Sexp Π x'''''' : Bool Π x''''''' : Sexp [X' β (λ x'''''''' : * x'''''''') λ Nil'' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsSexp' x'''''] x''''''] x''''''']] λ ConsAtom : Π x''''' : Atom Π x'''''' : Bool Π x''''''' : Sexp [X' β (λ x'''''''' : * x'''''''') λ Nil'' : * λ ConsSexp'' : * λ ConsAtom : * [[[ConsAtom x'''''] x''''''] x''''''']] [[[ConsAtom x'] x''] x'''] x'''' . ∀ X' : Π _ : = λ x''''' : * x''''' λ x''''' : * x''''' * Π _ : [X' β (λ x''''' : * x''''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * Nil'] Π _ : Π x''''' : Sexp Π x'''''' : Bool Π x''''''' : Sexp [X' β (λ x'''''''' : * x'''''''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsSexp' x'''''] x''''''] x''''''']] Π _ : Π x''''' : Atom Π x'''''' : Bool Π x''''''' : Sexp [X' β (λ x'''''''' : * x'''''''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsAtom x'''''] x''''''] x''''''']] [X' x''''] }] <<[[[<ψ x (λ x' : = λ x' : * x' λ x' : * x' ∀ y : [[SexpF Atom] Sexp] ∀ e : = y x' [X φ e y x'])> (Λ y : [[SexpF Atom] Sexp] Λ e : = y λ Nil' : * λ ConsSexp' : * λ ConsAtom' : * Nil' Nil)] (λ x' : Sexp λ x'' : Bool λ x''' : Sexp Λ y : [[SexpF Atom] Sexp] Λ e : = y λ Nil' : * λ ConsSexp' : * λ ConsAtom' : * [[[ConsSexp' x'] x''] x'''] [[[ConsSexp x'] x''] x'''])] (λ x' : Atom λ x'' : Bool λ x''' : Sexp Λ y : [[SexpF Atom] Sexp] Λ e : = y λ Nil' : * λ ConsSexp' : * λ ConsAtom' : * [[[ConsAtom' x'] x''] x'''] [[[ConsAtom x'] x''] x'''])] x> ρ β x λ x-x : * x-x x-x . = x x-x β x λ x-x : * x-x>.
let SexpFmap := Λ Atom : * Λ A : * Λ B : * Λ c : [[[Cast''''' Atom] A] B] { λ x : [[SexpF Atom] A] { π x , Λ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * λ Nil : [X β (λ x'' : * x'') λ Nil : * λ ConsSexp : * λ ConsAtom : * Nil] λ ConsSexp : Π x'' : B Π x''' : Bool Π x'''' : B [X β (λ x''''' : * x''''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x''] x'''] x'''']] λ ConsAtom : Π x'' : Atom Π x''' : Bool Π x'''' : B [X β (λ x''''' : * x''''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsAtom x''] x'''] x'''']] [[[<ψ x X> Nil] (λ x' : A λ x'' : Bool λ x''' : A [[[ConsSexp [<<<<cast''''' Atom> A> B> c> x']] x''] [<<<<cast''''' Atom> A> B> c> x''']])] (λ x' : Atom λ x'' : Bool λ x''' : A [[[ConsAtom x'] x''] [<<<<cast''''' Atom> A> B> c> x''']])] x' . ∀ X : Π _ : = λ x'' : * x'' λ x'' : * x'' * Π _ : [X β (λ x'' : * x'') λ Nil : * λ ConsSexp : * λ ConsAtom : * Nil] Π _ : Π x'' : B Π x''' : Bool Π x'''' : B [X β (λ x''''' : * x''''') λ Nil : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x''] x'''] x'''']] Π _ : Π x'' : Atom Π x''' : Bool Π x'''' : B [X β (λ x''''' : * x''''') λ Nil : * λ ConsSexp : * λ ConsAtom : * [[[ConsAtom x''] x'''] x'''']] [X x'] } , ρ β (λ x : * x) λ x-x : * x-x x-x . = λ x : * x x-x β (λ x : * x) λ x-x : * x-x cast'''''' . = cast'''''' λ x : * x }.
let Sexp := λ Atom : * [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] : Π _ : * *.
let Is-Sexp := λ Atom : * λ X : * ∀ Y : * Π _ : Π _ : (ι i : Π _ : X [Sexp Atom] = i λ x : * x) Π _ : (ι i : Π _ : X [[SexpF Atom] X] = i outFix''''') Y Y : Π _ : * Π X : * *.
let is-Sexp := Λ Atom : * Λ Y : * λ f : Π _ : (ι i : Π _ : [Sexp Atom] [Sexp Atom] = i λ x : * x) Π _ : (ι i : Π _ : [Sexp Atom] [[SexpF Atom] [Sexp Atom]] = i outFix''''') Y [[f { λ x : [Sexp Atom] x , β (λ x : * x) λ x : * x i . = i λ x : * x }] { <<<outFix''''' Atom> [SexpF Atom]> <SexpFmap Atom>> , β outFix''''' outFix''''' i . = i outFix''''' }].
let to-Sexp := Λ Atom : * Λ Y : * Λ mu : [[Is-Sexp Atom] Y] φ ψ [<mu (ι i : Π _ : Y [Sexp Atom] = i λ x : * x)> (λ c : (ι i : Π _ : Y [Sexp Atom] = i λ x : * x) λ o : (ι i : Π _ : Y [[SexpF Atom] Y] = i outFix''''') c)] π [<mu (ι i : Π _ : Y [Sexp Atom] = i λ x : * x)> (λ c : (ι i : Π _ : Y [Sexp Atom] = i λ x : * x) λ o : (ι i : Π _ : Y [[SexpF Atom] Y] = i outFix''''') c)] λ x : * x.
let Nil := Λ Atom : * [<<<inFix''''' Atom> [SexpF Atom]> <SexpFmap Atom>> { β (λ x : * x) λ Nil : * λ ConsSexp : * λ ConsAtom : * Nil , Λ X : Π _ : = λ x' : * x' λ x' : * x' * λ Nil : [X β (λ x' : * x') λ Nil : * λ ConsSexp : * λ ConsAtom : * Nil] λ ConsSexp : Π x' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] Π x'' : Bool Π x''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x'''' : * x'''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x'] x''] x''']] λ ConsAtom : Π x' : Atom Π x'' : Bool Π x''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x'''' : * x'''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsAtom x'] x''] x''']] Nil x . ∀ X : Π _ : = λ x' : * x' λ x' : * x' * Π _ : [X β (λ x' : * x') λ Nil : * λ ConsSexp : * λ ConsAtom : * Nil] Π _ : Π x' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] Π x'' : Bool Π x''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x'''' : * x'''') λ Nil : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x'] x''] x''']] Π _ : Π x' : Atom Π x'' : Bool Π x''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x'''' : * x'''') λ Nil : * λ ConsSexp : * λ ConsAtom : * [[[ConsAtom x'] x''] x''']] [X x] }].
let ConsSexp := Λ Atom : * λ x : [Sexp Atom] λ x' : Bool λ x'' : [Sexp Atom] [<<<inFix''''' Atom> [SexpF Atom]> <SexpFmap Atom>> { β (λ x''' : * x''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x] x'] x''] , Λ X : Π _ : = λ x'''' : * x'''' λ x'''' : * x'''' * λ Nil' : [X β (λ x'''' : * x'''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * Nil'] λ ConsSexp : Π x'''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] Π x''''' : Bool Π x'''''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x''''''' : * x''''''') λ Nil'' : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x''''] x'''''] x'''''']] λ ConsAtom : Π x'''' : Atom Π x''''' : Bool Π x'''''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x''''''' : * x''''''') λ Nil'' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsAtom x''''] x'''''] x'''''']] [[[ConsSexp x] x'] x''] x''' . ∀ X : Π _ : = λ x'''' : * x'''' λ x'''' : * x'''' * Π _ : [X β (λ x'''' : * x'''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * Nil'] Π _ : Π x'''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] Π x''''' : Bool Π x'''''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x''''''' : * x''''''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * [[[ConsSexp x''''] x'''''] x'''''']] Π _ : Π x'''' : Atom Π x''''' : Bool Π x'''''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x''''''' : * x''''''') λ Nil' : * λ ConsSexp : * λ ConsAtom : * [[[ConsAtom x''''] x'''''] x'''''']] [X x'''] }].
let ConsAtom := Λ Atom : * λ x : Atom λ x' : Bool λ x'' : [Sexp Atom] [<<<inFix''''' Atom> [SexpF Atom]> <SexpFmap Atom>> { β (λ x''' : * x''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsAtom x] x'] x''] , Λ X : Π _ : = λ x'''' : * x'''' λ x'''' : * x'''' * λ Nil' : [X β (λ x'''' : * x'''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * Nil'] λ ConsSexp' : Π x'''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] Π x''''' : Bool Π x'''''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x''''''' : * x''''''') λ Nil'' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsSexp' x''''] x'''''] x'''''']] λ ConsAtom : Π x'''' : Atom Π x''''' : Bool Π x'''''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x''''''' : * x''''''') λ Nil'' : * λ ConsSexp'' : * λ ConsAtom : * [[[ConsAtom x''''] x'''''] x'''''']] [[[ConsAtom x] x'] x''] x''' . ∀ X : Π _ : = λ x'''' : * x'''' λ x'''' : * x'''' * Π _ : [X β (λ x'''' : * x'''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * Nil'] Π _ : Π x'''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] Π x''''' : Bool Π x'''''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x''''''' : * x''''''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsSexp' x''''] x'''''] x'''''']] Π _ : Π x'''' : Atom Π x''''' : Bool Π x'''''' : [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>] [X β (λ x''''''' : * x''''''') λ Nil' : * λ ConsSexp' : * λ ConsAtom : * [[[ConsAtom x''''] x'''''] x'''''']] [X x'''] }].
let inductionSexp := Λ Atom : * Λ P : Π _ : [Sexp Atom] * λ pnil : [P <Nil Atom>] λ pcsexp : Π s : [Sexp Atom] Π b : Bool Π s' : [Sexp Atom] Π _ : [P s] Π _ : [P s'] [P [[[<ConsSexp Atom> s] b] s']] λ pcatom : Π a : Atom Π b : Bool Π s : [Sexp Atom] Π _ : [P s] [P [[[<ConsAtom Atom> a] b] s]] λ sexp : [Sexp Atom] [<[<<<IndFixM''''''''''' Atom> [SexpF Atom]> <SexpFmap Atom>> sexp] P> (Λ Type-ind : * Λ to : [[[Cast''''' Atom] Type-ind] [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>]] Λ out : (ι o : Π _ : Type-ind [[SexpF Atom] Type-ind] = o outFix''''') λ ind : Π r : Type-ind [P [<<<<cast''''' Atom> Type-ind> [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>]> to> r]] λ y : [[SexpF Atom] Type-ind] <<[[[<φ ρ β y λ x-x : * x-x x-x . = [SexpIndF y] x-x β [SexpIndF y] λ x-x : * x-x [<<SexpIndF Atom> Type-ind> y] y (λ y'' : [[SexpF Atom] Type-ind] ∀ y''' : [Sexp Atom] ∀ e : = [inFix''''' y''] y''' [P φ e [<<<inFix''''' Atom> [SexpF Atom]> <SexpFmap Atom>> [<<<<cast''''' Atom> [[SexpF Atom] Type-ind]> [[SexpF Atom] [Sexp Atom]]> <<<<SexpFmap Atom> Type-ind> [Sexp Atom]> to>> y'']] y'''])> (Λ y'' : [Sexp Atom] Λ e : = [inFix''''' (λ Nil' : * λ ConsSexp' : * λ ConsAtom' : * Nil')] y'' ρ σ e x . [P x] pnil)] (λ s : Type-ind λ b : Bool λ s' : Type-ind Λ y'' : [Sexp Atom] Λ e : = [inFix''''' (λ Nil' : * λ ConsSexp' : * λ ConsAtom' : * [[[ConsSexp' s] b] s'])] y'' ρ σ e x . [P x] [[[[[pcsexp [<<<to-Sexp Atom> Type-ind> Λ Y : * λ x : Π _ : (ι i : Π _ : Type-ind [Sexp Atom] = i λ x : * x) Π _ : (ι i : Π _ : Type-ind [[SexpF Atom] Type-ind] = i outFix''''') Y [[x to] out]> s]] b] [<<<to-Sexp Atom> Type-ind> Λ Y : * λ x : Π _ : (ι i : Π _ : Type-ind [Sexp Atom] = i λ x : * x) Π _ : (ι i : Π _ : Type-ind [[SexpF Atom] Type-ind] = i outFix''''') Y [[x to] out]> s']] [ind s]] [ind s']])] (λ a : Atom λ b : Bool λ s : Type-ind Λ y'' : [Sexp Atom] Λ e : = [inFix''''' (λ Nil' : * λ ConsSexp' : * λ ConsAtom' : * [[[ConsAtom' a] b] s])] y'' ρ σ e x . [P x] [[[[pcatom a] b] [<<<to-Sexp Atom> Type-ind> Λ Y : * λ x : Π _ : (ι i : Π _ : Type-ind [Sexp Atom] = i λ x : * x) Π _ : (ι i : Π _ : Type-ind [[SexpF Atom] Type-ind] = i outFix''''') Y [[x to] out]> s]] [ind s]])] [<<<inFix''''' Atom> [SexpF Atom]> <SexpFmap Atom>> [<<<<cast''''' Atom> [[SexpF Atom] Type-ind]> [[SexpF Atom] [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>]]> <<<<SexpFmap Atom> Type-ind> [Sexp Atom]> [<Λ Y : * λ x : Π _ : (ι i : Π _ : Type-ind [Sexp Atom] = i λ x : * x) Π _ : (ι i : Π _ : Type-ind [[SexpF Atom] Type-ind] = i outFix''''') Y [[x to] out] [[[Cast''''' Atom] Type-ind] [Sexp Atom]]> (λ to' : (ι i : Π _ : Type-ind [Sexp Atom] = i λ x : * x) λ out' : (ι i : Π _ : Type-ind [[SexpF Atom] Type-ind] = i outFix''''') to')]>> y]]> [<<<lambek''''' Atom> [SexpF Atom]> <SexpFmap Atom>> [<<<inFix''''' Atom> [SexpF Atom]> <SexpFmap Atom>> [<<<<cast''''' Atom> [[SexpF Atom] Type-ind]> [[SexpF Atom] [[[FixM''''' Atom] [SexpF Atom]] <SexpFmap Atom>]]> <<<<SexpFmap Atom> Type-ind> [Sexp Atom]> [<Λ Y : * λ x : Π _ : (ι i : Π _ : Type-ind [Sexp Atom] = i λ x : * x) Π _ : (ι i : Π _ : Type-ind [[SexpF Atom] Type-ind] = i outFix''''') Y [[x to] out] [[[Cast''''' Atom] Type-ind] [Sexp Atom]]> (λ to' : (ι i : Π _ : Type-ind [Sexp Atom] = i λ x : * x) λ out' : (ι i : Π _ : Type-ind [[SexpF Atom] Type-ind] = i outFix''''') to')]>> y]]]>)].
