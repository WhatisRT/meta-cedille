let Product := λ A : * λ B : * [[DSum A] λ _ : A B].
let prodPair := Λ A : * Λ B : * λ a : A λ b : B [[<<pair A> λ _ : A B> a] b] : ∀ A : * ∀ B : * Π _ : A Π _ : B [[Product A] B].
let inductionProduct := Λ A : * Λ B : * <<inductionDSum A> λ _ : A B>.

let pr1 := Λ A : * Λ B : * [<<<inductionProduct A> B> λ _ : [[Product A] B] A> λ a : A λ _ : B a] : ∀ A : * ∀ B : * Π _ : [[Product A] B] A.
let pr2 := Λ A : * Λ B : * [<<<inductionProduct A> B> λ _ : [[Product A] B] B> λ _ : A λ b : B b] : ∀ A : * ∀ B : * Π _ : [[Product A] B] B.

let TripleProduct := λ A : * λ B : * λ C : * [[Product A] [[Product B] C]].
let mkTripleProduct := Λ A : * Λ B : * Λ C : * λ a : A λ b : B λ c : C [[<<prodPair A> [[Product B] C]> a] [[<<prodPair B> C> b] c]].
let pr31 := Λ A : * Λ B : * Λ C : * λ x : [[[TripleProduct A] B] C] [<<pr1 A> [[Product B] C]> x].
let pr32 := Λ A : * Λ B : * Λ C : * λ x : [[[TripleProduct A] B] C] [<<pr1 B> C> [<<pr2 A> [[Product B] C]> x]].
let pr33 := Λ A : * Λ B : * Λ C : * λ x : [[[TripleProduct A] B] C] [<<pr2 B> C> [<<pr2 A> [[Product B] C]> x]].