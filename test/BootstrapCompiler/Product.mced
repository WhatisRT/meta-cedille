elet bootstrap/Product (A, B : *) : * := DSum A (λ _ : A. B).
elet bootstrap/prodPair [A, B : *] (a : A) (b : B) : A × B := pair ?_ ?(λ _ : A. B) a b.
elet bootstrap/recursionProduct [A, B : *] : ∀ X : *. (A -> B -> X) -> (A × B) -> X :=
  recursionDSum ?A ?(λ _ : A. B).

elet bootstrap/pr1 [A, B : *] : (A × B) -> A := recursionProduct ?_ ?_ ?_ (λ a : A. λ _ : B. a).
elet bootstrap/pr2 [A, B : *] : (A × B) -> B := recursionProduct ?_ ?_ ?B (λ _ : A. λ b : B. b).

elet bootstrap/productMap1 [A, B, C : *] (f : A -> C) (x : A × B) : C × B :=
  prodPair ?_ ?_ (f $ pr1 ?_ ?_ x) (pr2 ?_ ?_ x).
elet bootstrap/productMap2 [A, B, C : *] (f : B -> C) (x : A × B) : A × C :=
  prodPair ?_ ?_ (pr1 ?_ ?_ x) (f $ pr2 ?_ ?_ x).

elet bootstrap/TripleProduct (A, B, C : *) : * := A × (B × C).
elet bootstrap/mkTripleProduct [A, B, C : *] (a : A) (b : B) (c : C) : TripleProduct A B C :=
  prodPair ?_ ?(B × C) a $ prodPair ?_ ?_ b c.
elet bootstrap/recursionTripleProduct [A, B, C, D : *] (f : A -> B -> C -> D) (x : TripleProduct A B C)
  : D :=
  recursionProduct ?A ?(B × C) ?_
    (λ a : A. λ bc : B × C. recursionProduct ?_ ?_ ?_ (λ b : B. λ c : C. f a b c) bc) x.

elet bootstrap/pr31 [A, B, C : *] (x : TripleProduct A B C) : A := pr1 ?A ?(B × C) x.
elet bootstrap/pr32 [A, B, C : *] (x : TripleProduct A B C) : B := pr1 ?B ?C $ pr2 ?A ?(B × C) x.
elet bootstrap/pr33 [A, B, C : *] (x : TripleProduct A B C) : C := pr2 ?B ?C $ pr2 ?A ?(B × C) x.

runMeta compileNames "Product.mced" [String|"Product", "prodPair", "recursionProduct", "pr1", "pr2", "productMap1", "productMap2", "TripleProduct", "mkTripleProduct", "recursionTripleProduct", "pr31", "pr32", "pr33"].
