b-let metaResult : * := Product (List init$string) (List init$term).

b-let stringListToList (l : init$stringList) : List init$string :=
  l ?(List init$string) (nil ?init$string)
    (λ s : init$string. λ rec : List init$string. cons ?init$string s rec).

b-let listToStringList (l : List init$string) : init$stringList :=
  (inductionList ?init$string ?(λ _ : List init$string. init$stringList)
                 init$stringList$nil
                 (λ s : init$string. λ _ : List init$string. λ rec : init$stringList. init$stringList$cons s rec))
    l.

b-let termListToList (l : init$termList) : List init$term :=
  l ?(List init$term) (nil ?init$term)
    (λ s : init$term. λ rec : List init$term. cons ?init$term s rec).

b-let strToMetaResult (s : init$string) : metaResult :=
  pair ?(List init$string) ?(λ _ : List init$string. List init$term) [init$string | s] [init$term |].

b-let metaResultToLists (res : init$metaResult) : metaResult :=
  res ?metaResult
    (λ l : init$stringList. λ l' : init$termList.
      prodPair ?(List init$string) ?(List init$term) (stringListToList l) (termListToList l')).
