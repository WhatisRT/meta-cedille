--------------------------------------------------------------------------------
-- Providing conversions for the built-in types to more natural ones
--
-- Maybe this should be moved elsewhere?
--------------------------------------------------------------------------------

b-let metaResult : * := Product (List String) (List init$term).
b-let mkMetaResult (l : List String) (l' : List init$term) := prodPair ?(List String) ?(List init$term) l l'.
b-let emptyMetaResult : metaResult := mkMetaResult [String|] [init$term|].

b-let stringListToList (l : init$stringList) : List String :=
  l ?(List String) (nil ?String)
    (λ s : String. λ rec : List String. cons ?String s rec).

b-let listToStringList : List String -> init$stringList :=
  recursionList ?String ?init$stringList
                init$stringList$nil
                (λ s : String. λ _ : List String. λ rec : init$stringList. init$stringList$cons s rec).

b-let termListToList (l : init$termList) : List init$term :=
  l ?(List init$term) (nil ?init$term)
    (λ s : init$term. λ rec : List init$term. cons ?init$term s rec).

b-let strToMetaResult (s : String) : metaResult := mkMetaResult [String | s] [init$term |].

b-let metaResultToLists (res : init$metaResult) : metaResult :=
  res ?metaResult (λ l : init$stringList. λ l' : init$termList. mkMetaResult (stringListToList l) (termListToList l')).

b-let nothingTerm := θ{□}.
b-let nothingTerm1 (_ : Term) := nothingTerm.
b-let nothingTerm2 (_, _ : Term) := nothingTerm.
b-let nothingTerm3 (_, _, _ : Term) := nothingTerm.

b-let initTermToTerm (t : init$term) := t ?Term
  varTerm sortTerm (λ _ : init$const. nothingTerm)
    nothingTerm1 nothingTerm1 nothingTerm2 nothingTerm2 nothingTerm1 appSingle appSingleE
    (λ _ : Term. λ _ : String. λ _, _ : Term. nothingTerm)
    (λ s : String. λ t, t' : Term. binderTerm forallBinder s t t')
    (λ s : String. λ t, t' : Term. binderTerm piBinder s t t')
    (λ _ : String. λ _, _ : Term. nothingTerm)
    (λ s : String. λ t, t' : Term. binderTerm lambdaBinder s t t')
    (λ s : String. λ t, t' : Term. binderTerm LambdaBinder s t t')
    (λ _, _ : Term. λ _ : String. λ _ : Term. nothingTerm)
    nothingTerm3 nothingTerm2 nothingTerm1 nothingTerm2 nothingTerm1
    -- Zetas
    nothingTerm2 nothingTerm3 nothingTerm3 nothingTerm2 nothingTerm2
    nothingTerm3 nothingTerm1 nothingTerm1 nothingTerm1 nothingTerm2 nothingTerm1
    (λ _ : init$char. nothingTerm) nothingTerm2.

-- assuming no unknowns in f and no recursive unknowns in app, infer
-- unknowns in app and return the applied term

b-let telescopeFromTypeHelper (t : Term) : Product Telescope Term :=
  prodPair ?Telescope ?Term telNil t.

b-let telCons  (n : String) (T : Term) := cons ?Param (mkParam false (mkPreParam n T)).
b-let telConsE (n : String) (T : Term) := cons ?Param (mkParam true  (mkPreParam n T)).

b-let telescopeFromType : Term -> Product Telescope Term :=
  recursionTerm ?(Product Telescope Term)
    (λ v : init$var. telescopeFromTypeHelper (varTerm v))
    (λ s : init$sort. telescopeFromTypeHelper (sortTerm s))
    (λ b : Binder. λ n : String. λ t, t' : Term. λ rect, rect' : Product Telescope Term.
      b ?(Product Telescope Term)
        (telescopeFromTypeHelper (lambdaTerm n t t'))
        (telescopeFromTypeHelper (LambdaTerm n t t'))
        (productMap1 ?Telescope ?Term ?Telescope (telCons n t) rect')
        (productMap1 ?Telescope ?Term ?Telescope (telConsE n t) rect'))
    (λ t : Term. λ app : List App.
     λ _ : Product Telescope Term. λ _ : List (Product Bool (Product Telescope Term)).
       telescopeFromTypeHelper (appLTerm t app))
    (λ c : init$char. telescopeFromTypeHelper (charTerm c))
    (telescopeFromTypeHelper unknownTerm)
    (λ u : Term. λ _ : Product Telescope Term. telescopeFromTypeHelper (unquoteTerm u)).
