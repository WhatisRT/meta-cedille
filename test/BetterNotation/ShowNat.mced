--------------------------------------------------------------------------------
-- Show for natural numbers and binary numbers
--------------------------------------------------------------------------------

b-let Dec := ∀ X : *. Π _, _, _, _, _, _, _, _, _, _ : X. X.
b-let Dec0 : Dec := Λ X : *. λ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 : X. d0.
b-let Dec1 : Dec := Λ X : *. λ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 : X. d1.
b-let Dec2 : Dec := Λ X : *. λ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 : X. d2.
b-let Dec3 : Dec := Λ X : *. λ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 : X. d3.
b-let Dec4 : Dec := Λ X : *. λ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 : X. d4.
b-let Dec5 : Dec := Λ X : *. λ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 : X. d5.
b-let Dec6 : Dec := Λ X : *. λ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 : X. d6.
b-let Dec7 : Dec := Λ X : *. λ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 : X. d7.
b-let Dec8 : Dec := Λ X : *. λ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 : X. d8.
b-let Dec9 : Dec := Λ X : *. λ d0, d1, d2, d3, d4, d5, d6, d7, d8, d9 : X. d9.

b-let showDec (d : Dec) : String := d ?String "0" "1" "2" "3" "4" "5" "6" "7" "8" "9".

-- Prints a list of digits in a certain base
b-let showListOfDigitsBased [X : *] (showX : Π _ : X. String) (l : List X) : String :=
  stringConcat (map ?X ?String showX (reverse ?X l)).

-- Create the lists of digits from the corresponding Nats

b-let incrementBinList (l : List Bool) : List Bool :=
  recursionList ?Bool ?(List Bool)
    [Bool | true]
    (λ b : Bool. λ bs : List Bool. λ rec : List Bool.
      ifthenelse ?(List Bool) b (cons ?Bool false rec) (cons ?Bool true bs))
    l.

b-let incrementDecList (l : List Dec) : List Dec :=
  recursionList ?Dec ?(List Dec)
    [Dec | Dec1]
    (λ d : Dec. λ ds : List Dec. λ rec : List Dec.
      d ?(List Dec)
        (cons ?Dec Dec1 ds) (cons ?Dec Dec2 ds) (cons ?Dec Dec3 ds) (cons ?Dec Dec4 ds) (cons ?Dec Dec5 ds)
        (cons ?Dec Dec6 ds) (cons ?Dec Dec7 ds) (cons ?Dec Dec8 ds) (cons ?Dec Dec9 ds) (cons ?Dec Dec0 rec))
    l.

b-let natToBinList (n : Nat) : List Bool :=
  recursionNat ?(List Bool)
    [Bool | false]
    (λ _ : Nat. λ rec : List Bool. incrementBinList rec)
    n.

b-let natToDecList (n : Nat) : List Dec :=
  recursionNat ?(List Dec)
    [Dec | Dec0]
    (λ _ : Nat. λ rec : List Dec. incrementDecList rec)
    n.

-- Actual show functions

b-let showNatBinary (n : Nat) : String :=
  showListOfDigitsBased ?Bool (λ b : Bool. ifthenelse ?String b "1" "0") (natToBinList n).
b-let showNatDecimal (n : Nat) : String :=
  showListOfDigitsBased ?Dec showDec (natToDecList n).
