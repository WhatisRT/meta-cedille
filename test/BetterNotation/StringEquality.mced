b-let bitEq (b, b' : init$bit) : Bool := b ?Bool (b' ?Bool true false) (b' ?Bool false true).

b-let byteEq (b, b' : init$byte) : Bool :=
  b ?Bool (λ x1 : init$bit. λ x2 : init$bit. λ x3 : init$bit. λ x4 : init$bit.
           λ x5 : init$bit. λ x6 : init$bit. λ x7 : init$bit. λ x8 : init$bit.
             b' ?Bool (λ y1 : init$bit. λ y2 : init$bit. λ y3 : init$bit. λ y4 : init$bit.
                       λ y5 : init$bit. λ y6 : init$bit. λ y7 : init$bit. λ y8 : init$bit.
                         and (bitEq x1 y1) (and (bitEq x2 y2) (and (bitEq x3 y3) (and (bitEq x4 y4)
                         (and (bitEq x5 y5) (and (bitEq x6 y6) (and (bitEq x7 y7) (bitEq x8 y8))))))))).

b-let charEq (c, c' : init$char) : Bool :=
  c ?Bool λ x1 : init$byte. λ x2 : init$byte. λ x3 : init$byte. λ x4 : init$byte.
    c' ?Bool λ y1 : init$byte. λ y2 : init$byte. λ y3 : init$byte. λ y4 : init$byte.
      and (byteEq x1 y1) (and (byteEq x2 y2) (and (byteEq x3 y3) (byteEq x4 y4))).

b-let stringEq (s, s' : init$string) : Bool :=
  listEq ?init$char charEq (stringToList s) (stringToList s').
