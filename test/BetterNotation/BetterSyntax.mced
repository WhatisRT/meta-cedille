--------------------------------------------------------------------------------
-- Base of the new syntax
--
-- We define some basic statements and the new syntax here
--------------------------------------------------------------------------------

b-let simpleCommand (s : init$string) : M metaResult :=
  mapMeta ?init$string ?metaResult strToMetaResult (shellCmd s (listToStringList [init$string |])).

b-let letInfoTermToQuoted (i : LetInfo) : LetInfo :=
  mkLetInfo (stringApp "qTerm" (letInfoName i)) (quoteTerm (letInfoTerm i)) (just ?Term θ{Term}).

b-let runMetaCommand (t : Term) : init$newStmt :=
  λ s : EvaluatorState.
    bindMeta ?init$newStmt ?(Product metaResult EvaluatorState) (checkTerm init$newStmt (TermToInitTerm t)) (λ stmt : init$newStmt. stmt s).

-- Syntax

-- statements from the old syntax
b-let init$newStmt'$o=minus=_stmt'_ (stmt : init$stmt') : init$newStmt := stmtToNewStmt stmt.

-- flags

b-let init$flag$true := true.
b-let init$flag$false := false.

-- set statements

b-let init$setStmt$RequireTypeAnnotations_space__flag_ (_ : init$space) (b : Bool) :=
  seqEvalState ?Unit ?metaResult (modifyEvalFlags (modifyAnnReq b))
    (bindEvalState ?EvaluatorState ?metaResult getEvalState updateEvalState).

-- "native" statements in the new syntax
b-let init$newStmt'$set_space__setStmt_=dot= (_ : init$space) (s : init$newStmt) := s.
b-let init$newStmt'$let_space__betterLet_ (_ : init$space) (i : LetInfo) : init$newStmt := letInfoToNewStmtMod i.
b-let init$newStmt'$qlet_space__betterLet_ (_ : init$space) (i : LetInfo) : init$newStmt :=
  seqNewStmt (letInfoToNewStmt i) (letInfoToNewStmt (letInfoTermToQuoted i)).
b-let init$newStmt'$runMeta_space__multiTerm_=dot= (_ : init$space) (t : Term) : init$newStmt := runMetaCommand t.
b-let init$newStmt'$echo_space__multiTerm_=dot= (_ : init$space) (t : Term) : init$newStmt :=
  runMetaCommand θ{echoStmt γ{t}}.
b-let init$newStmt'$import_space__string_=dot= (_ : init$space) (n : init$string) : init$newStmt := stmtToNewStmt (quote$import' n).
b-let init$newStmt'$updateEval=dot= : init$newStmt :=
  evalStateUnitToNewStmt (modifyEvalState (λ e : EvaluatorState. e)).
b-let init$newStmt'$ : init$newStmt := emptyStmt.

b-let init$newStmt$_space'__newStmt'_ (_ : init$space') (stmt : init$newStmt) : init$newStmt := stmt.

-- new evaluator
b-let evalNewStmt (s : EvaluatorState) (stmt : init$newStmt) : M (Product metaResult EvaluatorState) := stmt s.

seteval [evalNewStmt emptyEvaluatorState] init newStmt.

-- this defines the initial dictionary
runMeta stmtToNewStmt (convertLetInfo (mkLetInfo (mkModuleDictName emptyModuleDict) θ{emptyModuleDict} (just ?Term θ{ModuleDict}))).