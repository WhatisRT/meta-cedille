-- statements from the old syntax
b-let init$newStmt'$o=minus=_stmt'_ (stmt : init$stmt') : init$newStmt := stmtToNewStmt stmt.

-- flags

b-let init$flag$true := true.
b-let init$flag$false := false.

-- set statements

b-let init$setStmt$RequireTypeAnnotations_space__flag_ (_ : init$space) (b : Bool) :=
  seqEvalState ?Unit ?metaResult (modifyEvalFlags (modifyAnnReq b))
    (bindEvalState ?EvaluatorState ?metaResult getEvalState updateEvalState).

-- "native" statements in the new syntax
b-let init$newStmt'$set_space__setStmt_=dot= (_ : init$space) (s : init$newStmt) := s.
b-let init$newStmt'$let_space__betterLet_ (_ : init$space) (i : LetInfo) : init$newStmt := letInfoToNewStmtMod i.
b-let init$newStmt'$module_space__string__telescope'_=dot=
  (_ : init$space) (n : init$string) (t : Telescope) : init$newStmt :=
  initModule [init$string|n] zero t.
b-let init$newStmt'$EndModule=dot= : init$newStmt := endModule.
b-let init$newStmt'$qlet_space__betterLet_ (_ : init$space) (i : LetInfo) : init$newStmt :=
  seqNewStmt (letInfoToNewStmt i) (letInfoToNewStmt (letInfoTermToQuoted i)).
b-let init$newStmt'$runMeta_space__multiTerm_=dot= (_ : init$space) (t : init$term) : init$newStmt := runMetaCommand t.
b-let init$newStmt'$echo_space__multiTerm_=dot= (_ : init$space) (t : init$term) : init$newStmt :=
  runMetaCommand (quote$square θ{echoStmt} t).
b-let init$newStmt'$import_space__string_=dot= (_ : init$space) (n : init$string) : init$newStmt := stmtToNewStmt (quote$import' n).
b-let init$newStmt'$Import_space__moduleName__maybeApplist_=dot= (_ : init$space) (n : ModuleName) (l : List App) : init$newStmt :=
  loadAndImportModule n l "x".
b-let init$newStmt'$ : init$newStmt := emptyStmt.

b-let init$newStmt$_space'__newStmt'_ (_ : init$space') (stmt : init$newStmt) : init$newStmt := stmt.

-- new evaluator
b-let evalNewStmt (s : EvaluatorState) (stmt : init$newStmt) : M (Product metaResult EvaluatorState) := stmt s.

seteval [evalNewStmt emptyEvaluatorState] init newStmt.

-- this defines the initial dictionary
runMeta stmtToNewStmt (convertLetInfo (mkLetInfo (mkModuleDictName emptyModuleDict) θ{emptyModuleDict} (just' ?init$term θ{ModuleDict}))).