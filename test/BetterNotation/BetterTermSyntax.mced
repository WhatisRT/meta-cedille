--------------------------------------------------------------------------------
-- Syntax for new terms
--
-- Application: use f x1 ... xn where erased arguments are prefixed with a '?'
-- Others: use *, □, "...", (...), {Π ∀ λ Λ} x : T. t,
--------------------------------------------------------------------------------

-- Syntax for application

let init$app$_singleTerm_ := mkAppU.
let init$app$=question=_singleTerm_ := mkAppE.

let init$applist$ := <nil App>.
let init$applist$_app__maybeApplist_ := λ a : App λ as : [List App] [[<cons App> a] as].

let init$maybeApplist$ := <nil App>.
let init$maybeApplist$_space__applist_ := λ _ : init$space λ l : [List App] l.

-- Syntax for terms in general
-- multiTerm is a potential application of multiple terms
-- singleTerm is for anything except application

let init$multiTerm$_singleTerm__maybeApplist_ := appLTerm.

let init$singleTerm$=ast= := [sortTerm init$sort$=ast=].
let init$singleTerm$=sq= := [sortTerm init$sort$=sq=].

let init$singleTerm$_string_ := λ n : init$string [varTerm [init$var$_string_ n]].
let init$singleTerm$=lparen=_multiTerm_=rparen= := λ t : Term t.

let init$singleTerm$=forall=_space__string__space'_=colon=_space'__multiTerm_=dot=_space__multiTerm_ :=
  λ _ : init$space λ n : init$string λ _ : init$space' λ _ : init$space'
  λ T : Term λ _ : init$space λ t : Term
    [[[forallTerm n] T] t].

let init$singleTerm$=Pi=_space__string__space'_=colon=_space'__multiTerm_=dot=_space__multiTerm_ :=
  λ _ : init$space λ n : init$string λ _ : init$space' λ _ : init$space'
  λ T : Term λ _ : init$space λ t : Term
    [[[piTerm n] T] t].

let init$singleTerm$=lambda=_space__string__space'_=colon=_space'__multiTerm_=dot=_space__multiTerm_ :=
  λ _ : init$space λ n : init$string λ _ : init$space' λ _ : init$space'
  λ T : Term λ _ : init$space λ t : Term
    [[[lambdaTerm n] T] t].

let init$singleTerm$=Lambda=_space__string__space'_=colon=_space'__multiTerm_=dot=_space__multiTerm_ :=
  λ _ : init$space λ n : init$string λ _ : init$space' λ _ : init$space'
  λ T : Term λ _ : init$space λ t : Term
    [[[LambdaTerm n] T] t].
