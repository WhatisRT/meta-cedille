-- use [ X | x1 , ... , xn] to denote a List X

b-let init$termlist'$ : List Term := nil ?Term.
b-let init$termlist'$=comma=_space'__multiTerm__termlist'_
  (_ : init$space') (t : Term) (ts : List Term) : List Term :=
  cons ?Term t ts.

b-let init$termlist$ : List Term := nil ?Term.
b-let init$termlist$_multiTerm__termlist'_
  (t : Term) (ts : List Term) : List Term :=
  cons ?Term t ts.

b-let quoteTermList (type : Term) (terms : List Term) : Term :=
  recursionList ?Term ?Term
    (appSingleE (sVarTerm "nil") type)
    (λ t : Term. λ _ : List Term. λ rec : Term.
      appSingle (appSingle (appSingleE (sVarTerm "cons") type) t) rec)
    terms.

b-let init$singleTerm$=lsquare=_space'__multiTerm_=pipe=_space'__termlist_=rsquare=
  (_ : init$space') (type : Term) (_ : init$space') (terms : List Term) : Term :=
  quoteTermList type terms.

seteval eval init stmt.