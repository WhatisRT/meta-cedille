let Binder := ∀ X : * Π _ : X Π _ : X Π _ : X Π _ : X X.
let lambdaBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X lambda.
let LambdaBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X Lambda.
let piBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X pi.
let forallBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X forall.

let Term := ∀ X : *
  Π _ : (Π _ : init$var X)
  Π _ : (Π _ : init$sort X)
  Π _ : (Π _ : Binder Π _ : init$string Π _ : X Π _ : X X)
  Π _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  Π _ : (Π _ : X X) X.

let varTerm := λ var : init$var Λ X : *
  λ v : (Π _ : init$var X)
  λ _ : (Π _ : init$sort X)
  λ _ : (Π _ : Binder Π _ : init$string Π _ : X Π _ : X X)
  λ _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ _ : (Π _ : X X) [v var] : Π _ : init$var Term.

let sortTerm := λ sort : init$sort Λ X : *
  λ _ : (Π _ : init$var X)
  λ s : (Π _ : init$sort X)
  λ _ : (Π _ : Binder Π _ : init$string Π _ : X Π _ : X X)
  λ _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ _ : (Π _ : X X) [s sort] : Π _ : init$sort Term.

let binderTerm := λ binder : Binder λ name : init$string λ T : Term λ t : Term Λ X : *
  λ v : (Π _ : init$var X)
  λ s : (Π _ : init$sort X)
  λ b : (Π _ : Binder Π _ : init$string Π _ : X Π _ : X X)
  λ a : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ u : (Π _ : X X) [[[[b binder] name] [[[[[<T X> v] s] b] a] u]] [[[[[<t X> v] s] b] a] u]]
    : Π _ : Binder Π _ : init$string Π _ : Term Π _ : Term Term.

let appLTerm := λ t : Term λ l : [List [[Product Bool] Term]] Λ X : *
  λ v : (Π _ : init$var X)
  λ s : (Π _ : init$sort X)
  λ b : (Π _ : Binder Π _ : init$string Π _ : X Π _ : X X)
  λ a : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ u : (Π _ : X X)
    [[a [[[[[<t X> v] s] b] a] u]] [[<<map [[Product Bool] Term]> [[Product Bool] X]> λ bt : [[Product Bool] Term] [[<<prodPair Bool> X> [<<pr1 Bool> Term> bt]] [[[[[<[<<pr2 Bool> Term> bt] X> v] s] b] a] u]]] l]]
      : Π _ : Term Π _ : [List [[Product Bool] Term]] Term.

let unquoteTerm := λ t : Term Λ X : *
  λ v : (Π _ : init$var X)
  λ s : (Π _ : init$sort X)
  λ b : (Π _ : Binder Π _ : init$string Π _ : X Π _ : X X)
  λ a : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ u : (Π _ : X X) [u [[[[[<t X> v] s] b] a] u]] : Π _ : Term Term.

let sVarTerm := λ s : init$string [varTerm [init$var$_string_ s]].
let lambdaTerm := [binderTerm lambdaBinder].
let LambdaTerm := [binderTerm LambdaBinder].
let piTerm := [binderTerm piBinder].
let forallTerm := [binderTerm forallBinder].

let App' := [[Product Bool] init$term].
let appErased' := <<pr1 Bool> init$term>.
let appTerm' := <<pr2 Bool> init$term>.

let appToQuotedApp :=
  λ t : init$term λ a : App'
    [[[[
      [<ifthenelse Π _ : init$term Π _ : init$term init$term> [appErased' a]]
        quote$angle]
        quote$square]
      t] [appTerm' a]].

let foldWithApp := [<<foldl App'> init$term> appToQuotedApp] : Π _ : [List App'] Π _ : init$term init$term.

let TermToInitTerm := λ t : Term
  [[[[[<t init$term>
    λ v : init$var [init$term$_var_ v]]
    λ s : init$sort [init$term$_sort_ s]]
    λ b : Binder λ n : init$string λ T : init$term λ t : init$term
      [[[[[[[<b Π _ : init$string Π _ : init$term Π _ : init$term init$term>
        quote$lambda]
        quote$Lambda]
        quote$Pi]
        quote$forall] n] T] t]]
    λ t : init$term λ l : [List App'] [[foldWithApp [<reverse App'> l]] t]]
    λ u : init$term quote$sq]
  : Π _ : Term init$term.

let App := [[Product Bool] Term].
let mkApp := <<prodPair Bool> Term>.
let mkAppU := [<<prodPair Bool> Term> false].
let mkAppE := [<<prodPair Bool> Term> true].
let appErased := <<pr1 Bool> Term>.
let appTerm := <<pr2 Bool> Term>.

let appSingle := λ t : Term λ t' : Term [[appLTerm t] [<pureList App> [mkAppU t']]].
let appSingleE := λ t : Term λ t' : Term [[appLTerm t] [<pureList App> [mkAppE t']]].

let toAppU := [<<map Term> App> mkAppU].