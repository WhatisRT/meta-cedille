--------------------------------------------------------------------------------
-- Defines a convenient syntax to register binary infix symbols
--------------------------------------------------------------------------------

let mkInfixData' (s, s' : String) := mkInfixData s (λ t, t' : Term. θ{γ{sVarTerm s'} γ{t} γ{t'}}).

let defineInfix (symbol, funName : String) : init$newStmt :=
  seqNewStmt
    (letInfoToNewStmt (mkLetInfo
      (stringApp "init$infix$" symbol)
      θ{mkInfixData' γ{quote$String symbol} γ{quote$String funName}}
      (just ?Term θ{InfixData})))
    reloadMEnv.

let init$newStmt'$infix^space^=doublequote=_newstring_=doublequote=^space^=colon==equal=^space^_string_=dot=
  (s : String) (s' : String) : init$newStmt := defineInfix s s'.

updateEval.

infix "×" := Product.
