-- use b-let f (x1, ..., xn : T1) ... (... : Tn) : T := def. to define a term

let Maybe' := λ A : * [[Sum A] Unit].

let maybe' := Λ A : * Λ B : * λ default : B λ f : Π _ : A B λ x : [Maybe' A]
  [[[<<<inductionSum A> Unit> (λ _ : [Maybe' A] B)> (λ a : A [f a])] (λ _ : Unit default)] x].

let PreParam := [[Product init$name] init$term].
let mkPreParam := <<prodPair init$name> init$term>.
let Param := [[Product Bool] PreParam]. -- potentially erased
let mkParam := <<prodPair Bool> PreParam>.

let paramErased := <<pr1 Bool> PreParam> : Π _ : Param Bool.
let paramName := λ p : Param [<<pr1 init$name> init$term> [<<pr2 Bool> PreParam> p]] : Π _ : Param init$name.
let paramType := λ p : Param [<<pr2 init$name> init$term> [<<pr2 Bool> PreParam> p]] : Π _ : Param init$term.

let init$nameparams$_name__nameparams'_ := <cons init$name>.

let init$nameparams'$ := <nil init$name>.
let init$nameparams'$=comma=_space'__name__nameparams'_ := λ _ : init$space' <cons init$name>.

let init$param'$_nameparams__space_=colon=_space__bTerm_ := λ ns : [List init$name] λ _ : init$space λ _ : init$space λ t : init$term
  [[<<map init$name> PreParam> (λ n' : init$name [[mkPreParam n'] t])] ns].

let init$params := [List Param].
let init$params$=lparen=_param'_=rparen=_space__params_ := λ p : [List PreParam] λ _ : init$space
  [<app Param> [[<<map PreParam> Param> [mkParam false]] p]].
let init$params$=lsquare=_param'_=rsquare=_space__params_ := λ p : [List PreParam] λ _ : init$space
  [<app Param> [[<<map PreParam> Param> [mkParam true]] p]].
let init$params$ := <nil Param>.

let paramToLambda := λ t : init$term λ p : Param
  [[[[[
    [<ifthenelse Π _ : init$name Π _ : init$term Π _ : init$term init$term> [paramErased p]]
      quote$Lambda]
      quote$lambda]
    [paramName p]] [paramType p]] t]
  : Π _ : init$term Π _ : Param init$term.

let foldWithLambdas := [<<foldl Param> init$term> paramToLambda] : Π _ : init$params Π _ : init$term init$term.

let paramToPi := λ t : init$term λ p : Param
  [[[[[
    [<ifthenelse Π _ : init$name Π _ : init$term Π _ : init$term init$term> [paramErased p]]
      quote$forall]
      quote$Pi]
    [paramName p]] [paramType p]] t]
  : Π _ : init$term Π _ : Param init$term.

let foldWithPi := [<<foldl Param> init$term> paramToPi] : Π _ : init$params Π _ : init$term init$term.

let init$betterLetType$ := [<<inr init$term> Unit> tt].
let init$betterLetType$_space__bTerm__space_=colon= := λ _ : init$space λ t : init$term λ _ : init$space [<<inl init$term> Unit> t].

let init$betterLet$_name__space__params_=colon=_betterLetType_=equal=_space'__bTerm_=dot= :=
  λ n : init$name λ _ : init$space λ params : init$params λ maybeType : [Maybe' init$term] λ _ : init$space' λ term : init$term
    [[[<<maybe' init$term> init$stmt'>
      [[quote$simpleLet' n] [[foldWithLambdas params] term]]]
      λ type : init$term [[[quote$annotatedLet' n] [[foldWithLambdas params] term]] [[foldWithPi params] type]]]
      maybeType].

let init$stmt'$b=minus=let_space__betterLet_ :=
  λ _ : init$space λ s : init$stmt' s.

seteval eval init stmt.