-- use b-let f (x1, ..., xn : T1) ... (... : Tn) : T := def. to define a term

let Maybe' := λ A : * [[Sum A] Unit].
let just' := Λ A : * λ a : A [<<inl A> Unit> a].
let nothing' := Λ A : * [<<inr A> Unit> tt].

let maybe' := Λ A : * Λ B : * λ default : B λ f : Π _ : A B λ x : [Maybe' A]
  [[[<<<inductionSum A> Unit> (λ _ : [Maybe' A] B)> (λ a : A [f a])] (λ _ : Unit default)] x].
let mapMaybe' :=
  Λ A : * Λ B : * λ f : Π _ : A B λ x : [Maybe' A]
    [[[<<maybe' A> [Maybe' B]> [<<inr B> Unit> tt]] λ a : A [<just' B> [f a]]] x].

let LetInfo := [[[TripleProduct init$string] Term] [Maybe' Term]].
let mkLetInfo := <<<mkTripleProduct init$string> Term> [Maybe' Term]>
  : Π _ : init$string Π _ : Term Π _ : [Maybe' Term] LetInfo.
let letInfoName := λ i : LetInfo [<<<pr31 init$string> Term> [Maybe' Term]> i].
let letInfoTerm := λ i : LetInfo [<<<pr32 init$string> Term> [Maybe' Term]> i].
let letInfoType := λ i : LetInfo [<<<pr33 init$string> Term> [Maybe' Term]> i].
let letInfoHasAnn := λ i : LetInfo [[[<<maybe' Term> Bool> false] λ _ : Term true] [letInfoType i]].

let paramToLambda := λ t : Term λ p : Param
  [[[[[
    [<ifthenelse Π _ : init$string Π _ : Term Π _ : Term Term> [paramErased p]]
      LambdaTerm]
      lambdaTerm]
    [paramName p]] [paramType p]] t]
  : Π _ : Term Π _ : Param Term.

let foldWithLambdas := [<<foldl Param> Term> paramToLambda] : Π _ : Telescope Π _ : Term Term.

let paramToPi := λ t : Term λ p : Param
  [[[[[
    [<ifthenelse Π _ : init$string Π _ : Term Π _ : Term Term> [paramErased p]]
      forallTerm]
      piTerm]
    [paramName p]] [paramType p]] t]
  : Π _ : Term Π _ : Param Term.

let foldWithPi := [<<foldl Param> Term> paramToPi] : Π _ : Telescope Π _ : Term Term.

let init$betterLetType$ := [<<inr Term> Unit> tt].
let init$betterLetType$_space__multiTerm_=colon= := λ _ : init$space λ t : Term [<<inl Term> Unit> t].

let init$betterLet$_string__space__telescope_=colon=_betterLetType_=equal=_space'__multiTerm_=dot= :=
  λ n : init$string λ _ : init$space λ tel : Telescope λ maybeType : [Maybe' Term] λ _ : init$space' λ term : Term
    [[[mkLetInfo n] [[foldWithLambdas tel] term]] [[<<mapMaybe' Term> Term> [foldWithPi tel]] maybeType]].

let convertLetInfo :=
  λ i : LetInfo
    [[[<<maybe' Term> init$stmt'>
      [[quote$simpleLet' [letInfoName i]] [TermToInitTerm [letInfoTerm i]]]]
      λ type : Term [[[quote$annotatedLet' [letInfoName i]] [TermToInitTerm [letInfoTerm i]]] [TermToInitTerm type]]]
      [letInfoType i]].

let init$stmt'$b=minus=let_space__betterLet_ := λ _ : init$space convertLetInfo.

seteval eval init stmt.