--------------------------------------------------------------------------------
-- Defines showTerm
--
-- TODO: move somewhere else?
--------------------------------------------------------------------------------

b-let showIndex' (i : init$index') : String :=
  i ?String
    ""
    (stringApp "0") (stringApp "1") (stringApp "2") (stringApp "3") (stringApp "4")
    (stringApp "5") (stringApp "6") (stringApp "7") (stringApp "8") (stringApp "9").

b-let showIndex (i : init$index) : String :=
  i ?String
    (λ i' : init$index'. stringApp "0" (showIndex' i'))
    (λ i' : init$index'. stringApp "1" (showIndex' i'))
    (λ i' : init$index'. stringApp "2" (showIndex' i'))
    (λ i' : init$index'. stringApp "3" (showIndex' i'))
    (λ i' : init$index'. stringApp "4" (showIndex' i'))
    (λ i' : init$index'. stringApp "5" (showIndex' i'))
    (λ i' : init$index'. stringApp "6" (showIndex' i'))
    (λ i' : init$index'. stringApp "7" (showIndex' i'))
    (λ i' : init$index'. stringApp "8" (showIndex' i'))
    (λ i' : init$index'. stringApp "9" (showIndex' i')).

b-let showVar (v : init$var) : String := v ?String (λ s : String. s) showIndex.
b-let showSort (s : init$sort) : String := s ?String "*" "□".
b-let showBinder (b : Binder) : String := b ?String "λ" "Λ" "Π" "∀".

b-let showTerm (t : Term) : String :=
  t ?String
    (λ v : init$var. showVar v)
    (λ s : init$sort. showSort s)
    (λ b : Binder. λ n : String. λ T, t : String.
      stringConcat [String| showBinder b, " ", n, " : ", T, ". ", t])
    (λ t : String. λ l : List (Product Bool String).
      stringConcat (cons ?String t
                          (map ?(Product Bool String) ?String
                               (λ bs : Product Bool String.
                                 stringConcat [String| ifthenelse ?String (pr1 ?Bool ?String bs) " ?" " ",
                                                             "(", pr2 ?Bool ?String bs, ")"]) l)))
    (λ c : Char. stringConcat [String| "κ", stringCons c stringNil])
    (λ t : String. stringConcat [String| "γ{", t, "}"]).