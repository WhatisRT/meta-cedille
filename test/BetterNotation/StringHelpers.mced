--------------------------------------------------------------------------------
-- Helper functions for strings
--------------------------------------------------------------------------------

b-let stringToList (s : String) : List init$char :=
  s ?(List init$char) (λ c : init$char. λ rec : List init$char. cons ?init$char c rec) (nil ?init$char).

b-let stringFromList (s : List init$char) : String :=
  recursionList ?init$char ?String init$string$nil
    (λ c : init$char. λ cs : List init$char. λ rec : String. init$string$cons c rec)
    s.

b-let stringApp (s, s' : String) : String :=
  stringFromList (app ?init$char (stringToList s) (stringToList s')).

b-let stringConcat (l : List String) : String :=
  recursionList ?String ?String
    init$string$nil
    (λ s : String. λ _ : List String. λ rec : String. stringApp s rec)
    l.

-- Equality

b-let stringEq (s, s' : String) : Bool :=
  listEq ?init$char charEq (stringToList s) (stringToList s').
