--------------------------------------------------------------------------------
-- We define functions for the new evaluator here
--------------------------------------------------------------------------------

b-let quoteNat (n : Nat) : Term :=
  recursionNat ?Term θ{zero} (λ _ : Nat. λ rec : Term. θ{suc γ{rec}}) n.

-- Flags that can be used to control the evaluator (currently only one)
b-let EvalFlags : * := Bool.
b-let defaultFlags : EvalFlags := false.
b-let quoteEvalFlags (f : EvalFlags) : Term :=
  ifthenelse ?Term f θ{true} θ{false}.

-- Controls whether `let` has to have a type annotation at the end to be accepted
b-let getAnnReq (f : EvalFlags) : Bool := f.
b-let modifyAnnReq (b : Bool) (_ : EvalFlags) : EvalFlags := b.

-- ModuleState contains a module if we are in the process of defining one, as
-- well as the module dictionary. Quoting ModuleState requires the Module and
-- ModuleDict to be defined in the environment.

b-let ModuleState : * := Product (Maybe Module) ModuleDict.
b-let mkModuleState (m : Maybe Module) (d : ModuleDict) : ModuleState := prodPair ?(Maybe Module) ?ModuleDict m d.
b-let ModuleStateModule (s : ModuleState) : Maybe Module := pr1 ?(Maybe Module) ?ModuleDict s.
b-let ModuleStateDict (s : ModuleState) : ModuleDict := pr2 ?(Maybe Module) ?ModuleDict s.
b-let emptyModState : ModuleState := mkModuleState (nothing ?Module) emptyModuleDict.
b-let quoteMaybeModule (x : Maybe Module) : Term :=
  maybe ?Module ?Term
    θ{nothing ?Module}
    (λ m : Module. θ{just ?Module γ{sVarTerm (mkTempModuleName m)}})
    x.
b-let quoteDict (d : ModuleDict) : Term := sVarTerm (mkModuleDictName d).
b-let quoteModuleState (s : ModuleState) : Term :=
  θ{mkModuleState γ{quoteMaybeModule (ModuleStateModule s)} γ{quoteDict (ModuleStateDict s)}}.

b-let OtherState := Nat. -- used for counting
b-let quoteOtherState (s : OtherState) := quoteNat s.
b-let emptyOtherState := zero.

-- The additional state in the evaluator contains the ModuleState as well as the flags
b-let EvaluatorState : * := TripleProduct EvalFlags ModuleState OtherState.
b-let mkEvaluatorState (f : EvalFlags) (s : ModuleState) (o : OtherState) : EvaluatorState :=
  mkTripleProduct ?EvalFlags ?ModuleState ?OtherState f s o.
b-let getEvalFlags := pr31 ?EvalFlags ?ModuleState ?OtherState.
b-let getModuleState := pr32 ?EvalFlags ?ModuleState ?OtherState.
b-let getOtherState := pr33 ?EvalFlags ?ModuleState ?OtherState.

b-let modifyModuleInState (f : Maybe Module -> Maybe Module) (s : EvaluatorState) : EvaluatorState :=
  mkEvaluatorState (getEvalFlags s)
                   (mkModuleState (f (ModuleStateModule (getModuleState s))) (ModuleStateDict (getModuleState s)))
                   (getOtherState s).

b-let modifyModuleDictInState (f : ModuleDict -> ModuleDict) (s : EvaluatorState) : EvaluatorState :=
  mkEvaluatorState (getEvalFlags s)
                   (mkModuleState (ModuleStateModule (getModuleState s)) (f (ModuleStateDict (getModuleState s))))
                   (getOtherState s).

b-let incrementStateCounter (s : EvaluatorState) : EvaluatorState :=
  mkEvaluatorState (getEvalFlags s) (getModuleState s) (suc (getOtherState s)).

b-let quoteEvaluatorState (s : EvaluatorState) : Term :=
  θ{mkEvaluatorState γ{quoteEvalFlags (getEvalFlags s)} γ{quoteModuleState (getModuleState s)} γ{quoteOtherState (getOtherState s)}}.

b-let emptyEvaluatorState : EvaluatorState := mkEvaluatorState defaultFlags emptyModState emptyOtherState.

--------------------------------------------------------------------------------
-- EvalState monad. This is a combination of the state and meta monads
-- to give us access to the mutable state
--------------------------------------------------------------------------------
b-let EvalState : * -> * := λ T : *. EvaluatorState -> M (Product T EvaluatorState).
b-let pureEvalState [T : *] (t : T) : EvalState T :=
  λ s : EvaluatorState. returnMeta ?(Product T EvaluatorState) (prodPair ?T ?EvaluatorState t s).
b-let bindEvalState [T, T' : *] (x : EvalState T) (f : T -> EvalState T') : EvalState T' :=
  λ s : EvaluatorState.
    bindMeta ?(Product T EvaluatorState) ?(Product T' EvaluatorState) (x s)
             (λ res : (Product T EvaluatorState). f (pr1 ?T ?EvaluatorState res) (pr2 ?T ?EvaluatorState res)).

b-let mapEvalState [T, T' : *] (f : T -> T') (t : EvalState T) : EvalState T' :=
  bindEvalState ?T ?T' t (λ x : T. pureEvalState ?T' (f x)).
b-let seqEvalState [T, T' : *] (t : EvalState T) (t' : EvalState T') : EvalState T' :=
  bindEvalState ?T ?T' t (λ _ : T. t').
b-let sequenceEvalState [T : *] (l : List (EvalState T)) : EvalState (List T) :=
  foldl ?(EvalState T) ?(EvalState (List T)) (λ l' : EvalState (List T). λ x : EvalState T.
    bindEvalState ?T ?(List T) x (λ x' : T. mapEvalState ?(List T) ?(List T) (cons ?T x') l'))
    l (pureEvalState ?(List T) (nil ?T)).

b-let liftMtoEvalState [T : *] (t : M T) : EvalState T :=
  λ s : EvaluatorState.
    bindMeta ?T ?(Product T EvaluatorState) t
      (λ x : T. returnMeta ?(Product T EvaluatorState) (prodPair ?T ?EvaluatorState x s)).

--------------------------------------------------------------------------------
-- Lift the primitives into EvalState
--------------------------------------------------------------------------------
b-let let (n : String) (t : Term) : EvalState metaResult :=
  liftMtoEvalState ?metaResult (primLet n (TermToInitTerm t)).
b-let annLet (n : String) (t, T : Term) : EvalState metaResult :=
  liftMtoEvalState ?metaResult (primAnnLet n (TermToInitTerm t) (TermToInitTerm T)).
b-let setEval (eval : Term) (NT, ns : String) : EvalState metaResult :=
  liftMtoEvalState ?metaResult (primSetEval (TermToInitTerm eval) NT ns).
b-let shellCmd (cmd : String) (args : List String) : EvalState String :=
  liftMtoEvalState ?String (primShellCmd cmd args).
b-let checkTerm (T : *) (t : Term) : EvalState T :=
  liftMtoEvalState ?T (primCheckTerm T (TermToInitTerm t)).
b-let parse (nt : String) (T : *) (text : String) : EvalState (Product T String) :=
  liftMtoEvalState ?(Product T String) (primParse nt T text).
-- normalize is currently broken
b-let normalize (t : Term) : EvalState Term :=
  liftMtoEvalState ?Term (mapMeta ?init$term ?Term initTermToTerm (primNormalize (TermToInitTerm t))).
b-let headNormalize (t : Term) : EvalState Term :=
  liftMtoEvalState ?Term (mapMeta ?init$term ?Term initTermToTerm (primHeadNormalize (TermToInitTerm t))).
b-let inferType (t : Term) : EvalState Term :=
  liftMtoEvalState ?Term (mapMeta ?init$term ?Term initTermToTerm (primInferType (TermToInitTerm t))).
b-let import (s : String) : EvalState metaResult :=
  liftMtoEvalState ?metaResult (primImport s).

--------------------------------------------------------------------------------
-- Define the new statement type & useful functions
--------------------------------------------------------------------------------
b-let init$newStmt : * := EvalState metaResult.

b-let stmtToNewStmt (stmt : M metaResult) : init$newStmt :=
  liftMtoEvalState ?metaResult stmt.

b-let updateEvalState (s : EvaluatorState) : init$newStmt :=
  setEval (appSingle θ{evalNewStmt} (quoteEvaluatorState s)) "init" "newStmt".

b-let getEvalState : EvalState EvaluatorState :=
  λ s : EvaluatorState. returnMeta ?(Product EvaluatorState EvaluatorState) (prodPair ?EvaluatorState ?EvaluatorState s s).
b-let setEvalState (s : EvaluatorState) : EvalState Unit :=
  seqEvalState ?metaResult ?Unit
    (updateEvalState s)
    (λ _ : EvaluatorState. returnMeta ?(Product Unit EvaluatorState) (prodPair ?Unit ?EvaluatorState tt s)).
b-let modifyEvalState (f : EvaluatorState -> EvaluatorState) : EvalState Unit :=
  bindEvalState ?EvaluatorState ?Unit getEvalState
    (λ s : EvaluatorState. setEvalState (f s)).
b-let getModuleState' : EvalState ModuleState := mapEvalState ?EvaluatorState ?ModuleState getModuleState getEvalState.
b-let voidEvalState [T : *] (x : EvalState T) : EvalState Unit :=
  seqEvalState ?T ?Unit x (pureEvalState ?Unit tt).

b-let getFlags : EvalState EvalFlags :=
  mapEvalState ?EvaluatorState ?EvalFlags getEvalFlags getEvalState.
b-let modifyEvalFlags (f : EvalFlags -> EvalFlags) : EvalState Unit :=
  modifyEvalState (λ s : EvaluatorState. mkEvaluatorState (f (getEvalFlags s)) (getModuleState s) (getOtherState s)).
b-let modifyModuleState (f : ModuleState -> ModuleState) : EvalState Unit :=
  modifyEvalState (λ s : EvaluatorState. mkEvaluatorState (getEvalFlags s) (f (getModuleState s)) (getOtherState s)).
b-let modifyOtherState (f : OtherState -> OtherState) : EvalState Unit :=
  modifyEvalState (λ s : EvaluatorState. mkEvaluatorState (getEvalFlags s) (getModuleState s) (f (getOtherState s))).

b-let emptyStmt : init$newStmt := pureEvalState ?metaResult emptyMetaResult.

b-let seqNewStmt (s, s' : init$newStmt) : init$newStmt :=
  seqEvalState ?metaResult ?metaResult s s'.

b-let seqNewStmts (l : List init$newStmt) : init$newStmt :=
  foldl ?init$newStmt ?init$newStmt seqNewStmt (reverse ?init$newStmt l) emptyStmt.

b-let evalStateUnitToNewStmt (x : EvalState Unit) : init$newStmt :=
  seqEvalState ?Unit ?metaResult x (pureEvalState ?metaResult emptyMetaResult).

b-let modifyEvalStateStmt (f : EvaluatorState -> EvaluatorState) : init$newStmt :=
  evalStateUnitToNewStmt (modifyEvalState f).

b-let updateModuleState (s : ModuleState) : EvalState Unit :=
  bindEvalState ?EvaluatorState ?Unit getEvalState
    (λ s' : EvaluatorState. setEvalState (mkEvaluatorState (getEvalFlags s') s (getOtherState s'))).

b-let echoStmt (s : String) : init$newStmt :=
  mapEvalState ?String ?metaResult strToMetaResult (shellCmd "echo" (listToStringList [String | s])).

b-let letInfoToNewStmt (i : LetInfo) : init$newStmt :=
  bindEvalState ?EvalFlags ?metaResult getFlags (λ f : EvalFlags.
    ifthenelse ?init$newStmt (or (not (getAnnReq f)) (letInfoHasAnn i))
      (stmtToNewStmt (convertLetInfo i))
      (echoStmt "The provided command has no type annotation!")).
