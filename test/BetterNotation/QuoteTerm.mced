-- quotation syntax is θ{term}

b-let appDouble (t, t', t'' : Term) :=  appLTerm t [App| mkAppU t', mkAppU t''].

b-let quoteAst : Term := sortTerm init$sort$=ast=.
b-let quoteSq : Term := sortTerm init$sort$=sq=.
b-let quoteTemp : Term := quoteSq.

b-let quoteVar (v : init$var) : Term :=
  appSingle
    (sVarTerm "sVarTerm")
    (v ?Term (λ n : init$string. quote$String n) (λ i : init$index. quoteTemp)).

b-let quoteBinder (b : Binder) : Term :=
  b ?Term (sVarTerm "lambdaBinder") (sVarTerm "LambdaBinder") (sVarTerm "piBinder") (sVarTerm "forallBinder").

b-let quoteBool (b : Bool) : Term := ifthenelse ?Term b (sVarTerm "true") (sVarTerm "false").

b-let quoteAppLeft (a : App) : Term :=
  appDouble (sVarTerm "mkApp") (quoteBool (appErased a)) (appTerm a). -- don't need to quote the term here

b-let quoteTerm (t : Term) : Term :=
  t ?Term
    (λ v : init$var. quoteVar v)
    (λ s : init$sort. s ?Term (sVarTerm "quoteAst") (sVarTerm "quoteSq"))
    (λ b : Binder. λ n : init$string. λ T : Term. λ t : Term.
      appLTerm (sVarTerm "binderTerm")
        (cons ?App (mkAppU (quoteBinder b)) ((cons ?App (mkAppU (quote$String n))
        ((cons ?App (mkAppU T) ((cons ?App (mkAppU t) (nil ?App)))))))))
    (λ t : Term. λ l : List App.
      appDouble (sVarTerm "appLTerm") t
        (quoteTermList (sVarTerm "App") (map ?App ?Term quoteAppLeft l))).

b-let init$singleTerm$=theta==lbrace=_space'__multiTerm_=rbrace= (_ : init$space') (t : Term) : Term := quoteTerm t.

seteval eval init stmt.