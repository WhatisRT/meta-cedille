b-let prefixVar (p : init$string) (v : init$var) : init$var :=
  v ?init$var
    (λ s : init$string. init$var$_string_ (stringApp p s))
    init$var$_index_.

b-let prefixNamesInTerm (p : init$string) (t : Term) : Term :=
  t ?Term
    (λ v : init$var. varTerm (prefixVar p v))
    sortTerm
    (λ b : Binder. λ n : init$string. λ T : Term. λ t : Term. binderTerm b (stringApp p n) T t)
    (λ t : Term. λ l : List App. appLTerm t l)
    (λ u : Term. unquoteTerm u).

b-let quoteNat (n : Nat) : Term :=
  recursionNat ?Term θ{zero} (λ _ : Nat. λ rec : Term. θ{suc γ{rec}}) n.

b-let quoteParam (p : Param) : Term :=
  θ{mkParam γ{quoteBool (paramErased p)} (mkPreParam γ{quote$String (paramName p)} γ{quoteTerm (paramType p)})}.

b-let quoteTelescope (t : Telescope) : Term := quoteTermList θ{Param} (map ?Param ?Term quoteParam t).

b-let initModule (n : ModuleName) (v : Nat) (t : Telescope) : init$newStmt :=
  (λ m : Module.
    seqNewStmt
      (letInfoToNewStmt
        (mkLetInfo (mkTempModuleName m)
          θ{mkInitModule γ{quoteModuleName n} γ{quoteNat v} γ{quoteTelescope t}}
          (just ?Term θ{Module})))
      (modifyEvalStateStmt (modifyModuleInState (λ _ : Maybe Module. just ?Module m))))
  (mkInitModule n v t).

b-let consModule (n : init$string) (m : Module) : Module :=
  mkModule (ModuleModuleName m) (ModuleVersion m) (ModuleTelescope m) (cons ?init$string n (ModuleContents m)).

b-let setModule (m : Maybe Module) : init$newStmt := modifyEvalStateStmt (modifyModuleInState (λ _ : Maybe Module. m)).

b-let updateTempModule (n : init$string) (m : Module) : init$newStmt :=
  seqNewStmt
    (letInfoToNewStmt
      (mkLetInfo (mkTempModuleNameSuc m)
        θ{consModule γ{quote$String n} γ{sVarTerm (mkTempModuleName m)}}
        (just ?Term θ{Module})))
    (setModule (just ?Module (consModule n m))).

b-let nameToModuleName (m : Module) (n : init$string) : init$string := stringApp (mkModuleContentPrefix (ModuleModuleInfo m)) n.
b-let nameToMaybeModuleName (x : Maybe Module) (n : init$string) : init$string :=
  maybe ?Module ?init$string n (λ m : Module. nameToModuleName m n) x.

b-let importExternalLetInfo (name : init$string) (m : Module) : LetInfo :=
  mkLetInfo (nameToModuleName m name) (sVarTerm name) (nothing ?Term).

b-let modifyLetInfo (i : LetInfo) (m : Module) : LetInfo :=
  (λ prefix : init$string.
    mkLetInfo
      (nameToModuleName m (letInfoName i))
      (prefixNamesInTerm prefix (foldWithLambdas (ModuleTelescope m) (letInfoTerm i)))
      (maybe ?Term ?(Maybe Term)
        (nothing ?Term) (λ t : Term. just ?Term (prefixNamesInTerm prefix t)) (letInfoType i)))
  (mkModuleContentPrefix (ModuleModuleInfo m)).

b-let letInModule (i : LetInfo) (m : Module) : init$newStmt :=
  seqNewStmt
    (stmtToNewStmt (convertLetInfo (modifyLetInfo i m)))
    (updateTempModule (letInfoName i) m).

b-let letInMaybeModule (i : LetInfo) (x : Maybe Module) : init$newStmt :=
  maybe ?Module ?init$newStmt
    (stmtToNewStmt (convertLetInfo i))
    (letInModule i)
    x.

b-let importExternalStmt (name : init$string) : init$newStmt :=
  bindEvalState ?EvaluatorState ?metaResult getEvalState (λ s : EvaluatorState.
    maybe ?Module ?init$newStmt
      (echoStmt "External imports are only possible in modules!")
      (λ m : Module. stmtToNewStmt (convertLetInfo (importExternalLetInfo name m)))
      (ModuleStateModule (getModuleState s))).

b-let letInfoToNewStmtMod (i : LetInfo) : init$newStmt :=
  bindEvalState ?EvaluatorState ?metaResult getEvalState (λ s : EvaluatorState.
    ifthenelse ?init$newStmt (or (not (getAnnReq (getEvalFlags s))) (letInfoHasAnn i))
      (letInMaybeModule i (ModuleStateModule (getModuleState s)))
      (echoStmt "The provided command has no type annotation!")).

b-let updateModuleDict (m : Module) (d : ModuleDict) : init$newStmt :=
  letInfoToNewStmt (mkLetInfo
    (mkModuleDictNameSuc d)
    θ{insertModuleDict γ{sVarTerm (mkModuleName m)} γ{sVarTerm (mkModuleDictName d)}}
    (just ?Term θ{ModuleDict})).

b-let finishModuleDef (m : Module) (d : ModuleDict) : init$newStmt :=
  seqNewStmts [init$newStmt|
    letInfoToNewStmt (mkLetInfo
      (mkModuleName m)
      (sVarTerm (mkTempModuleName m))
      (just ?Term θ{Module})),
    updateModuleDict m d,
    evalStateUnitToNewStmt (updateModuleState (mkModuleState (nothing ?Module) (insertModuleDict m d)))].

b-let endModule : init$newStmt :=
  bindEvalState ?ModuleState ?metaResult getModuleState'
    (λ s : ModuleState.
      maybe ?Module ?init$newStmt
        (echoStmt "Currently not in a module!")
        (λ m : Module. finishModuleDef m (ModuleStateDict s))
        (ModuleStateModule s)).

b-let findModule (n : ModuleName) : EvalState (Maybe Module) :=
  mapEvalState ?ModuleState ?(Maybe Module) (λ s : ModuleState. lookupModuleDict n (ModuleStateDict s)) getModuleState'.

b-let importModule (m : Module) (l : List App) : init$newStmt :=
  bindEvalState ?ModuleState ?metaResult getModuleState' (λ s : ModuleState.
    seqNewStmts (map ?init$string ?init$newStmt
      (λ n : init$string. letInfoToNewStmt (mkLetInfo
        (nameToMaybeModuleName (ModuleStateModule s) n)
        (appLTerm (sVarTerm (nameToModuleName m n)) l)
        (nothing ?Term)))
      (ModuleContents m))).

b-let importFile (file : init$string) : init$newStmt := stmtToNewStmt (quote$import' file).
b-let moduleNameToPath (n : ModuleName) : init$string := stringConcat (intersperse ?init$string "/" n).

b-let importModuleOrStmt (n : ModuleName) (l : List App) (stmt : init$newStmt) : init$newStmt :=
  bindEvalState ?(Maybe Module) ?metaResult (findModule n)
    (maybe ?Module ?init$newStmt stmt (λ m : Module. importModule m l)).

b-let loadModule (n : ModuleName) (prefix : init$string) : init$newStmt :=
  importFile (stringApp prefix (moduleNameToPath n)).

b-let importModule' (n : ModuleName) (l : List App) : init$newStmt :=
  importModuleOrStmt n l (echoStmt "Could not find module!").

b-let init$moduleName'$=slash=_string__moduleName'_ (s : init$string) (n : ModuleName) := cons ?init$string s n.
b-let init$moduleName'$ := nil ?init$string.

b-let init$moduleName$_string__moduleName'_ (s : init$string) (n : ModuleName) := cons ?init$string s n.

-- Top-level statements

b-let init$newStmt'$module_space__string__telescope'_=dot=
  (_ : init$space) (n : init$string) (t : Telescope) : init$newStmt :=
  initModule [init$string|n] zero t.
b-let init$newStmt'$EndModule=dot= : init$newStmt := endModule.
b-let init$newStmt'$LoadModule_space__moduleName_=dot= (_ : init$space) (n : ModuleName) : init$newStmt := loadModule n "test/".
b-let init$newStmt'$Import_space__moduleName__maybeApplist_=dot= (_ : init$space) (n : ModuleName) (l : List App) : init$newStmt :=
  importModule' n l.
b-let init$newStmt'$Given_space__string_=dot= (_ : init$space) (name : init$string) : init$newStmt :=
  importExternalStmt name.