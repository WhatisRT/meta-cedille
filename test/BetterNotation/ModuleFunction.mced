b-let prefixVar (p : init$string) (v : init$var) : init$var :=
  v ?init$var
    (λ s : init$string. init$var$_string_ (stringApp p s))
    init$var$_index_.

b-let prefixNamesInTerm (p : init$string) (t : Term) : Term :=
  t ?Term
    (λ v : init$var. varTerm (prefixVar p v))
    sortTerm
    (λ b : Binder. λ n : init$string. λ T : Term. λ t : Term. binderTerm b (stringApp p n) T t)
    (λ t : Term. λ l : List App. appLTerm t l).

b-let quoteNat (n : Nat) : Term :=
  inductionNat ?(λ _ : Nat. Term) θ{zero} (λ _ : Nat. λ rec : Term. appLTerm θ{suc} [App| mkAppU rec]) n.

b-let quoteParam (p : Param) : Term :=
  appLTerm θ{mkParam}
    [App| mkAppU (quoteBool (paramErased p)), mkAppU
          (appLTerm θ{mkPreParam} [App| mkAppU (quote$String (paramName p)), mkAppU (quoteTerm (paramType p))])].

b-let quoteTelescope (t : Telescope) : Term := quoteTermList θ{Param} (map ?Param ?Term quoteParam t).

b-let initModule (n : ModuleName) (v : Nat) (t : Telescope) : init$newStmt :=
  (λ m : Module.
    seqNewStmt
      (letInfoToNewStmt
        (mkLetInfo (mkTempModuleName m)
          (appLTerm θ{mkInitModule} [App| mkAppU (quoteModuleName n), mkAppU (quoteNat v), mkAppU (quoteTelescope t)])
          (just' ?Term θ{Module})))
      (modifyEvalStateStmt (modifyModuleInState (λ _ : Maybe' Module. just' ?Module m))))
  (mkInitModule n v t).

b-let consModule (n : init$string) (m : Module) : Module :=
  mkModule (ModuleModuleName m) (ModuleVersion m) (ModuleTelescope m) (cons ?init$string n (ModuleContents m)).

b-let setModule (m : Maybe' Module) : init$newStmt := modifyEvalStateStmt (modifyModuleInState (λ _ : Maybe' Module. m)).

b-let updateTempModule (n : init$string) (m : Module) : init$newStmt :=
  seqNewStmt
    (letInfoToNewStmt
      (mkLetInfo (mkTempModuleNameSuc m)
        (appLTerm θ{consModule} [App| mkAppU (quote$String n), mkAppU (sVarTerm (mkTempModuleName m))])
        (just' ?Term θ{Module})))
    (setModule (just' ?Module (consModule n m))).

b-let nameToModuleName (m : Module) (n : init$string) : init$string := stringApp (mkModulePrefix (ModuleModuleInfo m)) n.
b-let nameToMaybeModuleName (x : Maybe' Module) (n : init$string) : init$string :=
  maybe' ?Module ?init$string n (λ m : Module. nameToModuleName m n) x.

b-let modifyLetInfo (i : LetInfo) (m : Module) : LetInfo :=
  (λ prefix : init$string.
    mkLetInfo
      (nameToModuleName m (letInfoName i))
      (prefixNamesInTerm prefix (foldWithLambdas (ModuleTelescope m) (letInfoTerm i)))
      (maybe' ?Term ?(Maybe' Term)
        (nothing' ?Term) (λ t : Term. just' ?Term (prefixNamesInTerm prefix t)) (letInfoType i)))
  (mkModulePrefix (ModuleModuleInfo m)).

b-let letInModule (i : LetInfo) (m : Module) : init$newStmt :=
  seqNewStmt
    (stmtToNewStmt (convertLetInfo (modifyLetInfo i m)))
    (updateTempModule (letInfoName i) m).

b-let letInMaybeModule (i : LetInfo) (x : Maybe' Module) : init$newStmt :=
  maybe' ?Module ?init$newStmt
    (stmtToNewStmt (convertLetInfo i))
    (letInModule i)
    x.

b-let letInfoToNewStmtMod (i : LetInfo) : init$newStmt :=
  bindEvalState ?EvaluatorState ?metaResult getEvalState (λ s : EvaluatorState.
    ifthenelse ?init$newStmt (or (not (getAnnReq (getEvalFlags s))) (letInfoHasAnn i))
      (letInMaybeModule i (ModuleStateModule (getModuleState s)))
      (echoStmt "The provided command has no type annotation!")).

b-let updateModuleDict (m : Module) (d : ModuleDict) : init$newStmt :=
  letInfoToNewStmt (mkLetInfo
    (mkModuleDictNameSuc d)
    (appLTerm θ{insertModuleDict} [App| mkAppU (sVarTerm (mkModuleName m)), mkAppU (sVarTerm (mkModuleDictName d))])
    (just' ?Term θ{ModuleDict})).

b-let finishModuleDef (m : Module) (d : ModuleDict) : init$newStmt :=
  seqNewStmts [init$newStmt|
    letInfoToNewStmt (mkLetInfo
      (mkModuleName m)
      (sVarTerm (mkTempModuleName m))
      (just' ?Term θ{Module})),
    updateModuleDict m d,
    evalStateUnitToNewStmt (updateModuleState (mkModuleState (nothing' ?Module) (insertModuleDict m d)))].

b-let endModule : init$newStmt :=
  bindEvalState ?ModuleState ?metaResult getModuleState'
    (λ s : ModuleState.
      maybe' ?Module ?init$newStmt
        (echoStmt "Currently not in a module!")
        (λ m : Module. finishModuleDef m (ModuleStateDict s))
        (ModuleStateModule s)).

b-let findModule (n : ModuleName) : EvalState (Maybe' Module) :=
  mapEvalState ?ModuleState ?(Maybe' Module) (λ s : ModuleState. lookupModuleDict n (ModuleStateDict s)) getModuleState'.

b-let importModule (m : Module) (l : List App) : init$newStmt :=
  bindEvalState ?ModuleState ?metaResult getModuleState' (λ s : ModuleState.
    seqNewStmts (map ?init$string ?init$newStmt
      (λ n : init$string. letInfoToNewStmt (mkLetInfo
        (nameToMaybeModuleName (ModuleStateModule s) n)
        (appLTerm (sVarTerm (nameToModuleName m n)) l)
        (nothing' ?Term)))
      (ModuleContents m))).

b-let importFile (file : init$string) : init$newStmt := stmtToNewStmt (quote$import' file).
b-let moduleNameToPath (n : ModuleName) : init$string := concatStrings (intersperse ?init$string "/" n).

b-let importModuleOrStmt (n : ModuleName) (l : List App) (stmt : init$newStmt) : init$newStmt :=
  bindEvalState ?(Maybe' Module) ?metaResult (findModule n)
    (maybe' ?Module ?init$newStmt stmt (λ m : Module. importModule m l)).

b-let loadAndImportModule (n : ModuleName) (l : List App) (prefix : init$string) : init$newStmt :=
  importModuleOrStmt n l
    (seqNewStmt (importFile (stringApp prefix (moduleNameToPath n))) (importModuleOrStmt n l (echoStmt "Could not find module!"))).

b-let init$moduleName'$=slash=_string__moduleName'_ (s : init$string) (n : ModuleName) := cons ?init$string s n.
b-let init$moduleName'$ := nil ?init$string.

b-let init$moduleName$_string__moduleName'_ (s : init$string) (n : ModuleName) := cons ?init$string s n.