--------------------------------------------------------------------------------
-- A more convenient term datatype and corresponding syntax
--
-- Application: use f x1 ... xn where erased arguments are prefixed with a '?'
-- Others: use *, □, "...", (...), {Π ∀ λ Λ} x1, ..., xn : T. t,
--------------------------------------------------------------------------------

let Binder := ∀ X : * Π _ : X Π _ : X Π _ : X Π _ : X X.
let lambdaBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X lambda.
let LambdaBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X Lambda.
let piBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X pi.
let forallBinder := Λ X : * λ lambda : X λ Lambda : X λ pi : X λ forall : X forall.

let Term := ∀ X : *
  Π _ : (Π _ : init$var X)
  Π _ : (Π _ : init$sort X)
  Π _ : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  Π _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  Π _ : (Π _ : init$char X)
  Π _ : (Π _ : X X) X.

let varTerm := λ var : init$var Λ X : *
  λ v : (Π _ : init$var X)
  λ _ : (Π _ : init$sort X)
  λ _ : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ _ : (Π _ : init$char X)
  λ _ : (Π _ : X X) [v var] : Π _ : init$var Term.

let sortTerm := λ sort : init$sort Λ X : *
  λ _ : (Π _ : init$var X)
  λ s : (Π _ : init$sort X)
  λ _ : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ _ : (Π _ : init$char X)
  λ _ : (Π _ : X X) [s sort] : Π _ : init$sort Term.

let binderTerm := λ binder : Binder λ name : String λ T : Term λ t : Term Λ X : *
  λ v : (Π _ : init$var X)
  λ s : (Π _ : init$sort X)
  λ b : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ a : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ k : (Π _ : init$char X)
  λ u : (Π _ : X X) [[[[b binder] name] [[[[[[<T X> v] s] b] a] k] u]] [[[[[[<t X> v] s] b] a] k] u]]
    : Π _ : Binder Π _ : String Π _ : Term Π _ : Term Term.

let appLTerm := λ t : Term λ l : [List [[Product Bool] Term]] Λ X : *
  λ v : (Π _ : init$var X)
  λ s : (Π _ : init$sort X)
  λ b : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ a : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ k : (Π _ : init$char X)
  λ u : (Π _ : X X)
    [[a [[[[[[<t X> v] s] b] a] k] u]] [[<<map [[Product Bool] Term]> [[Product Bool] X]> λ bt : [[Product Bool] Term] [[<<prodPair Bool> X> [<<pr1 Bool> Term> bt]] [[[[[[<[<<pr2 Bool> Term> bt] X> v] s] b] a] k] u]]] l]]
      : Π _ : Term Π _ : [List [[Product Bool] Term]] Term.

let charTerm := λ c : init$char Λ X : *
  λ _ : (Π _ : init$var X)
  λ _ : (Π _ : init$sort X)
  λ _ : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ _ : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ k : (Π _ : init$char X)
  λ _ : (Π _ : X X) [k c] : Π _ : init$char Term.

let unquoteTerm := λ t : Term Λ X : *
  λ v : (Π _ : init$var X)
  λ s : (Π _ : init$sort X)
  λ b : (Π _ : Binder Π _ : String Π _ : X Π _ : X X)
  λ a : (Π _ : X Π _ : [List [[Product Bool] X]] X)
  λ k : (Π _ : init$char X)
  λ u : (Π _ : X X) [u [[[[[[<t X> v] s] b] a] k] u]] : Π _ : Term Term.

let sVarTerm := λ s : String [varTerm [init$var$_string_ s]].
let iVarTerm := λ i : init$index [varTerm [init$var$_index_ i]].
let lambdaTerm := [binderTerm lambdaBinder].
let LambdaTerm := [binderTerm LambdaBinder].
let piTerm := [binderTerm piBinder].
let forallTerm := [binderTerm forallBinder].

let App' := [[Product Bool] init$term].
let appErased' := <<pr1 Bool> init$term>.
let appTerm' := <<pr2 Bool> init$term>.

let appToQuotedApp :=
  λ t : init$term λ a : App'
    [[[[
      [<ifthenelse Π _ : init$term Π _ : init$term init$term> [appErased' a]]
        quote$angle]
        quote$square]
      t] [appTerm' a]].

let foldWithApp := [<<foldl App'> init$term> appToQuotedApp] : Π _ : [List App'] Π _ : init$term init$term.

let TermToInitTerm := λ t : Term
  [[[[[[<t init$term>
    λ v : init$var [init$term$_var_ v]]
    λ s : init$sort [init$term$_sort_ s]]
    λ b : Binder λ n : String λ T : init$term λ t : init$term
      [[[[[[[<b Π _ : String Π _ : init$term Π _ : init$term init$term>
        quote$lambda]
        quote$Lambda]
        quote$Pi]
        quote$forall] n] T] t]]
    λ t : init$term λ l : [List App'] [[foldWithApp [<reverse App'> l]] t]]
    λ c : init$char [quote$kappa c]]
    λ u : init$term quote$sq]
  : Π _ : Term init$term.

let App := [[Product Bool] Term].
let mkApp := <<prodPair Bool> Term>.
let mkAppU := [<<prodPair Bool> Term> false].
let mkAppE := [<<prodPair Bool> Term> true].
let appErased := <<pr1 Bool> Term>.
let appTerm := <<pr2 Bool> Term>.

let appSingle := λ t : Term λ t' : Term [[appLTerm t] [<pureList App> [mkAppU t']]].
let appSingleE := λ t : Term λ t' : Term [[appLTerm t] [<pureList App> [mkAppE t']]].

let toAppU := [<<map Term> App> mkAppU].

--------------------------------------------------------------------------------
-- Parameters and telescopes
--------------------------------------------------------------------------------

-- A parameter without erasure information
let PreParam := [[Product String] Term].
let mkPreParam := <<prodPair String> Term>.

let preParamName := λ p : PreParam [<<pr1 String> Term> p] : Π _ : PreParam String.
let preParamType := λ p : PreParam [<<pr2 String> Term> p] : Π _ : PreParam Term.

-- If the first entry in the product is `true` the argument is erased
let Param := [[Product Bool] PreParam].
let mkParam := <<prodPair Bool> PreParam>.

let paramErased := <<pr1 Bool> PreParam> : Π _ : Param Bool.
let paramName := λ p : Param [<<pr1 String> Term> [<<pr2 Bool> PreParam> p]] : Π _ : Param String.
let paramType := λ p : Param [<<pr2 String> Term> [<<pr2 Bool> PreParam> p]] : Π _ : Param Term.

-- Constructs a `List PreParam` from some names and a type
let namesToPreParams :=
  λ ns : [List String] λ t : Term [[<<map String> PreParam> (λ n : String [[mkPreParam n] t])] ns].

let Telescope := [List Param].
let telApp := λ p : [List PreParam] [<app Param> [[<<map PreParam> Param> [mkParam false]] p]].
let telAppE := λ p : [List PreParam] [<app Param> [[<<map PreParam> Param> [mkParam true]] p]].
let telNil := <nil Param>.

let preParamToBinder := λ b : Binder λ t : Term λ p : PreParam
  [[[[binderTerm b] [preParamName p]] [preParamType p]] t].

let applyMultiBinder := λ b : Binder [<<foldl PreParam> Term> [preParamToBinder b]].

let telescopeToApp := λ tel : Telescope [[<<map Param> App> λ p : Param [[mkApp [paramErased p]] [sVarTerm [paramName p]]]] tel].

--------------------------------------------------------------------------------
-- Parsing rules for telescopes
--------------------------------------------------------------------------------

let init$nameparams'$ := <nil String>.
let init$nameparams'$=comma=_space'__string__nameparams'_ := λ _ : init$space' <cons String>.

let init$nameparams$_string__nameparams'_ := <cons String>.

let init$params$_nameparams__space_=colon=_space__multiTerm_ :=
  λ ns : [List String] λ _ : init$space λ _ : init$space λ t : Term [[namesToPreParams ns] t].

let init$telescope'$ := telNil.
let init$telescope'$_space__telescope_ := λ _ : init$space λ t : Telescope t.

let init$telescope$=lparen=_params_=rparen=_telescope'_ := λ p : [List PreParam] [telApp p].
let init$telescope$=lsquare=_params_=rsquare=_telescope'_ := λ p : [List PreParam] [telAppE p].
let init$telescope$ := telNil.

--------------------------------------------------------------------------------
-- Syntax for new terms
--------------------------------------------------------------------------------

-- Syntax for application

let init$app$_singleTerm_ := mkAppU.
let init$app$=question=_singleTerm_ := mkAppE.

let init$applist$ := <nil App>.
let init$applist$_app__maybeApplist_ := λ a : App λ as : [List App] [[<cons App> a] as].

let init$maybeApplist$ := <nil App>.
let init$maybeApplist$_space__applist_ := λ _ : init$space λ l : [List App] l.

-- Syntax for terms in general
-- multiTerm is a potential application of multiple terms
-- singleTerm is for anything except application

let init$maybeInfix$ := λ t : Term t.
let init$maybeInfix$=minus==rangle=_space__multiTerm_ :=
  λ _ : init$space λ m : Term λ t : Term [[[piTerm init$string$nil] t] m].

let init$multiTerm$_singleTerm__maybeApplist__space'__maybeInfix_ :=
  λ t : Term λ l : [List App] λ _ : init$space' λ trans : Π _ : Term Term [trans [[appLTerm t] l]].

let init$singleTerm$=ast= := [sortTerm init$sort$=ast=].
let init$singleTerm$=sq= := [sortTerm init$sort$=sq=].

let init$singleTerm$_string_ := λ n : String [varTerm [init$var$_string_ n]].
let init$singleTerm$=lparen=_multiTerm_=rparen= := λ t : Term t.

let init$binder$=lambda= := lambdaBinder.
let init$binder$=Lambda= := LambdaBinder.
let init$binder$=Pi= := piBinder.
let init$binder$=forall= := forallBinder.

let init$singleTerm$_binder__space__params_=dot=_space__multiTerm_ :=
  λ b : Binder λ _ : init$space λ p : [List PreParam] λ _ : init$space λ t : Term
    [[[applyMultiBinder b] p] t].
