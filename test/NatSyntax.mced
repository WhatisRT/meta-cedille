let init$bindigit$0 := false : Bool.
let init$bindigit$1 := true : Bool.

let init$binnat'$_bindigit__binnat'_ := <cons Bool> : Π _ : Bool Π _ : [List Bool] [List Bool].
let init$binnat'$ := τ[Bool|] : [List Bool].

let init$binnat$_bindigit__binnat'_ := <cons Bool> : Π _ : Bool Π _ : [List Bool] [List Bool].

let quoteBoolT := γ[quote$stringToVar quote$t "rue"] : init$term.
let quoteBoolF := γ[quote$stringToVar quote$f "alse"] : init$term.
let quoteBool := γ[quote$stringToVar quote$B "ool"] : init$term.

let quoteNilBool := γ[quote$angle quoteNil quoteBool] : init$term.
let quoteConsBool := γ[quote$angle quoteCons quoteBool] : init$term.

b-let quoteBoolFun (b : Bool) : init$term := γ[ifthenelse ?init$term b quoteBoolT quoteBoolF].

let quoteListBool :=
  γ[inductionList ?Bool ?(λ _ : [List Bool] init$term) quoteNilBool
    λ b : Bool λ bs : [List Bool] λ rec : init$term
      γ[quote$square γ[quote$square quoteConsBool [quoteBoolFun b]] rec]]
  : Π _ : [List Bool] init$term.

b-let boolToNat (b : Bool) : Nat := γ[ifthenelse ?Nat b one zero].
b-let boolListToNat (bs : [List Bool]) : Nat :=
  γ[inductionList ?Bool ?(λ _ : [List Bool] Nat) zero
    λ b : Bool λ _ : [List Bool] λ rec : Nat γ[add γ[mul rec two] [boolToNat b]] γ[reverse ?Bool bs]].

let quoteBoolListToNat := γ[quote$stringToVar quote$b "oolListToNat"] : init$term.

b-let init$term$=nu=_binnat_ (bs : [List Bool]) : init$term :=
  γ[quote$square quoteBoolListToNat [quoteListBool bs]].

seteval eval init stmt.