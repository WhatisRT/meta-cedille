-- Binary

let init$bindigit$0 : Bool := false.
let init$bindigit$1 : Bool := true.

let init$binnat'$_bindigit__binnat'_ := cons ?Bool.
let init$binnat'$ : List Bool := [Bool|].

let init$binnat$_bindigit__binnat'_ := cons ?Bool.

let boolToNat (b : Bool) : Nat := ifthenelse ?Nat b one zero.

-- Decimal

let init$decdigit$0 : Dec := Dec0.
let init$decdigit$1 : Dec := Dec1.
let init$decdigit$2 : Dec := Dec2.
let init$decdigit$3 : Dec := Dec3.
let init$decdigit$4 : Dec := Dec4.
let init$decdigit$5 : Dec := Dec5.
let init$decdigit$6 : Dec := Dec6.
let init$decdigit$7 : Dec := Dec7.
let init$decdigit$8 : Dec := Dec8.
let init$decdigit$9 : Dec := Dec9.

let init$decnat'$_decdigit__decnat'_ := cons ?Dec.
let init$decnat'$ : List Dec := [Dec|].

let init$decnat$_decdigit__decnat'_ := cons ?Dec.

let quoteDec (d : Dec) : Term :=
  d ?Term θ{Dec0} θ{Dec1} θ{Dec2} θ{Dec3} θ{Dec4} θ{Dec5} θ{Dec6} θ{Dec7} θ{Dec8} θ{Dec9}.

let decToNat (d : Dec) : Nat := d ?Nat zero one two three four five six seven eight nine.

--

let quoteList [X : *] (quotedX : Term) (quoteX : X -> Term) : List X -> Term :=
  recursionList ?X ?Term θ{nil ?γ{quotedX}}
    (λ x : X. λ _ : List X. λ rec : Term. θ{cons ?γ{quotedX} γ{quoteX x} γ{rec}}).

let quoteListBool := quoteList ?Bool θ{Bool} quoteBool.
let quoteListDec := quoteList ?Dec θ{Dec} quoteDec.

let baseListToNat [B : *] (digitToNat : B -> Nat) (ds : List B) (base : Nat) : Nat :=
  recursionList ?B ?Nat zero
    (λ d : B. λ _ : List B. λ rec : Nat. add (mul rec ten) (digitToNat d))
    (reverse ?B ds).

let boolListToNat (bs : List Bool) : Nat := baseListToNat ?Bool boolToNat bs two.
let decListToNat (ds : List Dec) : Nat := baseListToNat ?Dec decToNat ds ten.

--------------------------------------------------------------------------------
-- This section is here for convenience
--------------------------------------------------------------------------------

let index'ToDigits (i : init$index') : List Dec :=
  i ?(List Dec)
    [Dec|]
    (cons ?Dec Dec0) (cons ?Dec Dec1) (cons ?Dec Dec2) (cons ?Dec Dec3) (cons ?Dec Dec4)
    (cons ?Dec Dec5) (cons ?Dec Dec6) (cons ?Dec Dec7) (cons ?Dec Dec8) (cons ?Dec Dec9).

let indexToDigits (i : init$index) : List Dec :=
  i ?(List Dec)
    (λ i' : init$index'. cons ?Dec Dec0 (index'ToDigits i'))
    (λ i' : init$index'. cons ?Dec Dec1 (index'ToDigits i'))
    (λ i' : init$index'. cons ?Dec Dec2 (index'ToDigits i'))
    (λ i' : init$index'. cons ?Dec Dec3 (index'ToDigits i'))
    (λ i' : init$index'. cons ?Dec Dec4 (index'ToDigits i'))
    (λ i' : init$index'. cons ?Dec Dec5 (index'ToDigits i'))
    (λ i' : init$index'. cons ?Dec Dec6 (index'ToDigits i'))
    (λ i' : init$index'. cons ?Dec Dec7 (index'ToDigits i'))
    (λ i' : init$index'. cons ?Dec Dec8 (index'ToDigits i'))
    (λ i' : init$index'. cons ?Dec Dec9 (index'ToDigits i')).

let indexToNat (i : init$index) : Nat := decListToNat (indexToDigits i).

--------------------------------------------------------------------------------

--let init$singleTerm$_binnat_ (bs : List Bool) : init$term := quote$square θ{boolListToNat} (quoteListBool bs).
let init$singleTerm$_decnat_ (ds : List Dec) : Term := θ{decListToNat γ{quoteListDec ds}}.

o-seteval [evalNewStmt emptyEvaluatorState] init newStmt.