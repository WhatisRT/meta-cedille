let init$bindigit$0 : Bool := false.
let init$bindigit$1 : Bool := true.

let init$binnat'$_bindigit__binnat'_ := cons ?Bool.
let init$binnat'$ : List Bool := [Bool|].

let init$binnat$_bindigit__binnat'_ := cons ?Bool.

let quoteBoolFun (b : Bool) : init$term := ifthenelse ?init$term b θ{true} θ{false}.

let quoteListBool : Π _ : List Bool. init$term :=
  inductionList ?Bool ?(λ _ : List Bool. init$term) θ{(nil ?Bool)}
    (λ b : Bool. λ bs : List Bool. λ rec : init$term.
      quote$square (quote$square θ{(cons ?Bool)} (quoteBoolFun b)) rec).

let boolToNat (b : Bool) : Nat := ifthenelse ?Nat b one zero.
let boolListToNat (bs : List Bool) : Nat :=
  inductionList ?Bool ?(λ _ : List Bool. Nat) zero
    (λ b : Bool. λ _ : List Bool. λ rec : Nat. add (mul rec two) (boolToNat b))
    (reverse ?Bool bs).

let init$singleTerm$_binnat_ (bs : List Bool) : init$term :=
  quote$square θ{boolListToNat} (quoteListBool bs).

o-seteval evalNewStmt init newStmt.