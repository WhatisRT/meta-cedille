let init$bindigit$0 := f : Bool.
let init$bindigit$1 := t : Bool.

let init$binnat'$_bindigit__binnat'_ := <cons Bool> : Π _ : Bool Π _ : [List Bool] [List Bool].
let init$binnat'$ := <nil Bool> : [List Bool].

let init$binnat$_bindigit__binnat'_ := <cons Bool> : Π _ : Bool Π _ : [List Bool] [List Bool].

let quoteBoolT := [quote$var [[quote$name quote$t] quote$nnil]] : init$term.
let quoteBoolF := [quote$var [[quote$name quote$f] quote$nnil]] : init$term.
let quoteBool := [[quote$stringToVar quote$B] "ool"] : init$term.

let quoteNil := [[quote$stringToVar quote$n] "il"] : init$term.
let quoteCons := [[quote$stringToVar quote$c] "ons"] : init$term.
let quoteNilBool := [[quote$angle quoteNil] quoteBool] : init$term.
let quoteConsBool := [[quote$angle quoteCons] quoteBool] : init$term.

let quoteBoolFun := λ b : Bool [[[<ifthenelse init$term> b] quoteBoolT] quoteBoolF] : Π _ : Bool init$term.

let quoteListBool := [[<<inductionList Bool> λ _ : [List Bool] init$term> quoteNilBool] λ b : Bool λ bs : [List Bool] λ rec : init$term [[quote$square [[quote$square quoteConsBool] [quoteBoolFun b]]] rec]] : Π _ : [List Bool] init$term.

let boolToNat := λ b : Bool [[[<ifthenelse Nat> b] one] zero] : Π _ : Bool Nat.
let boolListToNat := λ bs : [List Bool] [[[<<inductionList Bool> λ _ : [List Bool] Nat> zero] λ b : Bool λ _ : [List Bool] λ rec : Nat [[add [[mul rec] two]] [boolToNat b]]] [<reverse Bool> bs]] : Π _ : [List Bool] Nat.

let quoteBoolListToNat := [[quote$stringToVar quote$b] "oolListToNat"] : init$term.

let init$term$=nu=_binnat_ := λ bs : [List Bool] [[quote$square quoteBoolListToNat] [quoteListBool bs]] : Π _ : [List Bool] init$term.

seteval eval init stmt.