module Maybe.

-- Temporary workaround to make all the names that `data` needs available
import test/Datatypes/ModuleCompatibility.

data Maybe (A : *) where
| nothing : Maybe A
| just    : A -> Maybe A.

let maybe [A, B : *] (default : B) (f : A -> B) (x : Maybe A) : B := MaybeFold A B default f x.

let bindMaybe (A, B : *) (x : Maybe A) (f : A -> Maybe B) : Maybe B :=
  maybe ?A ?(Maybe B) (nothing B) f x.

let mapMaybe [A, B : *] (f : A -> B) (x : Maybe A) : Maybe B :=
  maybe ?A ?(Maybe B) (nothing B) (Î» a : A. just B $ f a) x.

endModule.