module Nat.

-- Temporary workaround to make all the names that `data` needs available
import test/Datatypes/ModuleCompatibility.

Given Eq.
Given refl.

data Nat where
| zero : Nat
| succ : Π _ : Nat. Nat.

let NatRec (X : *) (recZero : X) (recSucc : Π _ : X. Π _ : Nat. X) (n : Nat) : X :=
  pr1 ?X ?Nat (NatFold (Product X Nat)
    (prodPair ?X ?Nat recZero zero)
    (λ x : Product X Nat. prodPair ?X ?Nat (recSucc (pr1 ?X ?Nat x) (pr2 ?X ?Nat x)) (succ (pr2 ?X ?Nat x)))
    n).

let plus (n, m : Nat) : Nat := NatRec Nat m (λ _, rec : Nat. succ rec) n.

let zeroPlus (n : Nat) : Eq Nat (plus zero n) n := refl Nat n.

EndModule.