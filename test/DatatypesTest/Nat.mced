module Nat.

-- Temporary workaround to make all the names that `data` needs available
import test/Datatypes/ModuleCompatibility.

Given Eq refl Bool false true.

data Nat where
| zero : Nat
| succ : Nat -> Nat.

let NatRec (X : *) (recZero : X) (recSucc : X -> Nat -> X) (n : Nat) : X :=
  pr1 ?X ?Nat (NatFold (X × Nat)
    (prodPair ?X ?Nat recZero zero)
    (λ x : X × Nat. prodPair ?X ?Nat (recSucc (pr1 ?X ?Nat x) (pr2 ?X ?Nat x)) (succ $ pr2 ?X ?Nat x))
    n).

let plus (n, m : Nat) : Nat := NatFold Nat m (λ rec : Nat. succ rec) n.
let pred (n : Nat) : Nat := NatRec Nat zero (λ _, n' : Nat. n') n.
let minus (n, m : Nat) : Nat := NatFold Nat n (λ rec : Nat. pred rec) m.

let beq (n, m : Nat) : Bool :=
  NatFold (Nat -> Bool)
    (NatFold Bool true (λ _ : Bool. false))
    (λ rec : Nat -> Bool. NatRec Bool false (λ _ : Bool. λ m' : Nat. rec m'))
    n m.

let leq (m, n : Nat) : Bool := beq (minus m n) zero.
let lt (m, n : Nat) : Bool := leq (succ m) n.

let zeroPlus (n : Nat) : Eq Nat (plus zero n) n := refl Nat n.

-- Show, using the old implementation
Given Dec Dec0 incrementDecList showDec showListOfDigitsBased List nil cons String.

let natToDecList (n : Nat) : List Dec :=
  NatFold (List Dec)
    [Dec | Dec0]
    (λ rec : List Dec. incrementDecList rec)
    n.

let showNat (n : Nat) : String := showListOfDigitsBased ?Dec showDec $ natToDecList n.

endModule.