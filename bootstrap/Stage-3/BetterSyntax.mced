--------------------------------------------------------------------------------
-- Base of the new syntax
--
-- We define some basic statements and the new syntax here
--------------------------------------------------------------------------------

b-let letInfoTermToQuoted (i : LetInfo) : LetInfo :=
  mkLetInfo (stringApp "qTerm" (letInfoName i)) (quoteTerm (letInfoTerm i)) (just ?Term θ{Term}).

b-let addQuotedLetInfo : ElabLet :=
  liftElabLet (λ i : LetInfo. voidEval ?metaResult (letInfoToNewStmt (letInfoTermToQuoted i))).

b-let letInfoToNewStmtMod := runEvalLets [ElabLet| checkTypeAnn, moduleElab].

b-let runMetaCommand (t : Term) : init$newStmt := joinEval ?metaResult (checkTerm init$newStmt t).

b-let runEcho (t : Term) : init$newStmt := runMetaCommand θ{echoStmt γ{t}}.

b-let reloadMEnv : init$newStmt := evalUnitToNewStmt (modifyEval (λ e : EvalState. e)).

b-let showTypeStmt (tel : Telescope) (t : Term) : init$newStmt :=
  inContext ?metaResult (map ?Param ?PreParam (pr2 ?Bool ?PreParam) tel)
    (bindEval ?String ?metaResult (bindEval ?Term ?String (inferType t) showTermE) (λ x : String.
      echoStmtL [String|showTerm t, " : ", x])).

-- Syntax

-- statements from the old syntax
b-let init$newStmt'$o=minus=_stmt'_ (stmt : M metaResult) : init$newStmt := stmtToNewStmt stmt.

-- flags

b-let init$flag$true := true.
b-let init$flag$false := false.

-- set statements

b-let modifyAndUpdateEvalOpts (f : EvalOpts -> EvalOpts) : init$newStmt :=
  seqEval ?Unit ?metaResult (modifyEvalOpts f) updateMEnv.

b-let init$setStmt$RequireTypeAnnotations^space^_flag_ (b : Bool) :=
  modifyAndUpdateEvalOpts (setAnnReq b).
b-let init$setStmt$PWD^space^_term_ (dirT : Term) :=
  bindEval ?String ?metaResult (checkTerm String dirT)
    (λ dir : String. modifyAndUpdateEvalOpts (setWorkingDir dir)).

-- "native" statements in the new syntax
b-let init$newStmt'$set^space^_setStmt_=dot= (s : init$newStmt) := s.
b-let init$newStmt'$let^space^_betterLet_ (i : LetInfo) : init$newStmt :=
  letInfoToNewStmtMod i.
b-let init$newStmt'$qlet^space^_betterLet_ (i : LetInfo) : init$newStmt :=
  runEvalLets [ElabLet| checkTypeAnn, moduleElab, addQuotedLetInfo] i.
b-let init$newStmt'$runMeta^space^_multiTerm_=dot= (t : Term) : init$newStmt := runMetaCommand t.
b-let init$newStmt'$echo^space^_multiTerm_=dot= (t : Term) : init$newStmt :=
  bindEval ?Term ?metaResult (modifyTermMod t) runEcho.
b-let init$newStmt'$showType^space^_telescope__multiTerm_=dot= (tel : Telescope) (t : Term) : init$newStmt :=
  showTypeStmt tel t.
b-let init$newStmt'$normalize^space^_multiTerm_=dot= (t : Term) : init$newStmt :=
  seqEval ?Term ?metaResult (normalize t) (pureEval ?metaResult emptyMetaResult).
b-let init$newStmt'$headNormalize^space^_multiTerm_=dot= (t : Term) : init$newStmt :=
  seqEval ?Term ?metaResult (headNormalize t) (pureEval ?metaResult emptyMetaResult).
b-let init$newStmt'$import^space^_string_=dot= (n : String) : init$newStmt := import n.
b-let init$newStmt'$updateEval=dot= : init$newStmt := updateMEnv.
b-let init$newStmt'$ : init$newStmt := emptyStmt.

b-let init$newStmt$^space'^_newStmt'_ (stmt : init$newStmt) : init$newStmt := stmt.

-- new evaluator
b-let evalNewStmt (s : EvalState) (stmt : init$newStmt) : M (Product metaResult EvalState) :=
  runEval ?metaResult stmt s.

seteval [evalNewStmt emptyEvalState] init newStmt.

-- this defines the initial dictionary
runMeta stmtToNewStmt (convertLetInfo (mkLetInfo (mkModuleDictName emptyModuleDict) θ{emptyModuleDict} (just ?Term θ{ModuleDict}))).

-- Test parse:
--runMeta bindEval ?Term ?metaResult (inferType' θ{evalNewStmt}) (λ x : Term. echoStmt (showTerm x)).
--showType filter.