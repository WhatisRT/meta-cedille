--------------------------------------------------------------------------------
-- Datatypes and functions for modules
--------------------------------------------------------------------------------

-- global prefix to write all data in
b-let modulePrefix := "modPrefix|".

-- ModuleName, each entry in the list represents a level of nesting
b-let ModuleName := List String.
b-let moduleNameEq (n, n' : ModuleName) : Bool := listEq ?String stringEq n n'.
b-let ModuleNameToName (n : ModuleName) : String := stringConcat n.
b-let quoteModuleName (n : ModuleName) : Term := quoteTermList θ{String} (map ?String ?Term quoteString n).

-- ModuleInfo contains all the global data about the module
b-let ModuleInfo := TripleProduct ModuleName Nat Telescope.
b-let ModuleInfoName (i : ModuleInfo) : ModuleName := pr31 ?ModuleName ?Nat ?Telescope i.
b-let ModuleInfoVersion (i : ModuleInfo) : Nat := pr32 ?ModuleName ?Nat ?Telescope i.
b-let ModuleInfoTelescope (i : ModuleInfo) : Telescope := pr33 ?ModuleName ?Nat ?Telescope i.

b-let mkModuleInfo (name : ModuleName) (version : Nat) (t : Telescope) : ModuleInfo :=
  mkTripleProduct ?ModuleName ?Nat ?Telescope name version t.

-- Everything related to the module has this prefix
b-let mkModulePrefix (i : ModuleInfo) : String :=
  stringApp modulePrefix (stringApp (ModuleNameToName (ModuleInfoName i)) (showNatDecimal (ModuleInfoVersion i))).

-- The definitions in the module have this prefix
b-let mkModuleContentPrefix (i : ModuleInfo) : String :=
  stringApp (mkModulePrefix i) "|".

-- All the data about a module is collected in the Module type
b-let Module := Product ModuleInfo (List String).
b-let ModuleModuleInfo (m : Module) : ModuleInfo := pr1 ?ModuleInfo ?(List String) m.
b-let ModuleModuleName (m : Module) : ModuleName := ModuleInfoName (ModuleModuleInfo m).
b-let ModuleVersion (m : Module) : Nat := ModuleInfoVersion (ModuleModuleInfo m).
b-let ModuleTelescope (m : Module) : Telescope := ModuleInfoTelescope (ModuleModuleInfo m).
b-let ModuleContents (m : Module) : List String := pr2 ?ModuleInfo ?(List String) m.

b-let mkModule (name : ModuleName) (version : Nat) (t : Telescope) (contents : List String) : Module :=
  prodPair ?ModuleInfo ?(List String) (mkModuleInfo name version t) contents.

b-let mkInitModule (name : ModuleName) (version : Nat) (t : Telescope) : Module :=
  mkModule name version t [String|].

-- Functions for generating module names. While they are being defined, we use
-- the temporary names to build them incrementally.

b-let mkTempModuleName' (m : Module) (n : Nat) : String := -- name for temporary modules
  stringConcat [String | mkModulePrefix (ModuleModuleInfo m), "||", showNatDecimal n].
b-let mkTempModuleName (m : Module) : String := mkTempModuleName' m (length ?String (ModuleContents m)).
b-let mkTempModuleNameSuc (m : Module) : String := mkTempModuleName' m (suc (length ?String (ModuleContents m))).
b-let mkModuleName (m : Module) : String :=
  stringConcat [String | mkModulePrefix (ModuleModuleInfo m), "||"].

-- ModuleDict is a type that is used to collect all the modules that are
-- currently defined. We will bind them to a global name where the version is
-- used to let us update the dictionary. There are probably better ways of doing
-- this.

b-let ModuleDict := Product Nat (ModuleName -> Maybe (Product Bool Module)).
b-let mkModuleDict := prodPair ?Nat ?(ModuleName -> Maybe (Product Bool Module)).
b-let ModuleDictVersion := pr1 ?Nat ?(ModuleName -> Maybe (Product Bool Module)).
b-let ModuleDictDict := pr2 ?Nat ?(ModuleName -> Maybe (Product Bool Module)).
b-let emptyModuleDict : ModuleDict :=
  mkModuleDict zero (λ _ : ModuleName. nothing ?(Product Bool Module)).
b-let insertModuleDict (m : Module) (dict : ModuleDict) : ModuleDict :=
  mkModuleDict
    (suc (ModuleDictVersion dict))
    (λ n : ModuleName.
      ifthenelse ?(Maybe (Product Bool Module)) (moduleNameEq n (ModuleModuleName m))
        (just ?(Product Bool Module) (prodPair ?Bool ?Module true m))
        (ModuleDictDict dict n)).
b-let lookupModuleDict (k : ModuleName) (dict : ModuleDict) : Maybe (Product Bool Module) :=
  ModuleDictDict dict k.
b-let unloadModuleFromDict (m : ModuleName) (dict : ModuleDict) : ModuleDict :=
  maybe ?(Product Bool Module) ?ModuleDict
    dict
    (λ x : Product Bool Module. mkModuleDict (suc (ModuleDictVersion dict)) (λ n : ModuleName.
      ifthenelse ?(Maybe (Product Bool Module)) (moduleNameEq n m)
        (just ?(Product Bool Module) (productMap1 ?Bool ?Module ?Bool (λ _ : Bool. false) x))
        (ModuleDictDict dict n)))
    (ModuleDictDict dict m).


b-let mkModuleDictName' (v : Nat) (d : ModuleDict) : String :=
  stringConcat [String| modulePrefix, "||Dict", (showNatDecimal v)].
b-let mkModuleDictName (d : ModuleDict) : String := mkModuleDictName' (ModuleDictVersion d) d.
b-let mkModuleDictNameSuc (d : ModuleDict) : String := mkModuleDictName' (suc (ModuleDictVersion d)) d.
